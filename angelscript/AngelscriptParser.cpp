
// Generated from ./AngelscriptParser.g4 by ANTLR 4.13.2


#include "AngelscriptParserVisitor.h"

#include "AngelscriptParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct AngelscriptParserStaticData final {
  AngelscriptParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AngelscriptParserStaticData(const AngelscriptParserStaticData&) = delete;
  AngelscriptParserStaticData(AngelscriptParserStaticData&&) = delete;
  AngelscriptParserStaticData& operator=(const AngelscriptParserStaticData&) = delete;
  AngelscriptParserStaticData& operator=(AngelscriptParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag angelscriptparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<AngelscriptParserStaticData> angelscriptparserParserStaticData = nullptr;

void angelscriptparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (angelscriptparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(angelscriptparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AngelscriptParserStaticData>(
    std::vector<std::string>{
      "script", "moduleImport", "asGeneric", "simpleTypeSpecifierList", 
      "booleanLiteral", "primaryExpression", "idExpression", "unqualifiedId", 
      "qualifiedId", "nestedNameSpecifier", "lambdaExpression", "lambdaIntroducer", 
      "lambdaCapture", "captureDefault", "captureList", "capture", "simpleCapture", 
      "initcapture", "lambdaDeclarator", "postfixExpression", "expressionList", 
      "pseudoDestructorName", "unaryExpression", "unaryOperator", "newPlacement", 
      "newInitializer_", "castExpression", "multiplicativeExpression", "additiveExpression", 
      "shiftExpression", "shiftOperator", "relationalExpression", "equalityExpression", 
      "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
      "logicalAndExpression", "logicalOrExpression", "conditionalExpression", 
      "assignmentExpression", "assignmentOperator", "expression", "constantExpression", 
      "statement", "labeledStatement", "expressionStatement", "compoundStatement", 
      "statementSeq", "selectionStatement", "condition", "iterationStatement", 
      "forInitStatement", "forRangeDeclaration", "forRangeInitializer", 
      "jumpStatement", "declarationStatement", "declarationseq", "declaration", 
      "blockDeclaration", "aliasDeclaration", "simpleDeclaration", "emptyDeclaration_", 
      "declSpecifier", "declSpecifierSeq", "functionSpecifier", "typedefName", 
      "typeSpecifier", "trailingTypeSpecifier", "typeSpecifierSeq", "trailingTypeSpecifierSeq", 
      "simpleTypeSpecifier", "assertSpecifier", "theTypeName", "decltypeSpecifier", 
      "elaboratedTypeSpecifier", "enumName", "enumSpecifier", "enumHead", 
      "opaqueEnumDeclaration", "enumkey", "enumbase", "enumeratorList", 
      "enumeratorDefinition", "enumerator", "namespaceName", "originalNamespaceName", 
      "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition", 
      "qualifiednamespacespecifier", "balancedTokenSeq", "balancedtoken", 
      "initDeclaratorList", "initDeclarator", "declarator", "declaratorDef", 
      "parametersAndQualifiers", "refqualifier", "declaratorid", "theTypeId", 
      "parameterDeclarationClause", "parameterDeclarationList", "parameterDeclaration", 
      "functionDefinition", "functionBody", "initializer", "braceOrEqualInitializer", 
      "initializerClause", "initializerList", "bracedInitList", "className", 
      "classSpecifier", "classHead", "classHeadName", "classVirtSpecifier", 
      "memberSpecification", "memberdeclaration", "propertyDefinition", 
      "memberDeclaratorList", "memberDeclarator", "postFuncSpecifierSeq", 
      "virtualSpecifier", "baseClause", "baseSpecifierList", "baseSpecifier", 
      "classOrDeclType", "baseTypeSpecifier", "accessSpecifier", "operatorFunctionId", 
      "literalOperatorId", "theOperator", "literal"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "'cast'", "'import'", "'from'", "'out'", "'property'", 
      "'ensure'", "'ensureAlways'", "'check'", "'mixin'", "'int'", "'int8'", 
      "'int16'", "'int32'", "'int64'", "'uint'", "'uint8'", "'uint16'", 
      "'uint32'", "'uint64'", "'float'", "'double'", "'bool'", "'auto'", 
      "'break'", "'case'", "'catch'", "'char'", "'class'", "'const'", "'continue'", 
      "'default'", "'do'", "'else'", "'enum'", "'export'", "'false'", "'final'", 
      "'for'", "'goto'", "'if'", "'namespace'", "'nullptr'", "'operator'", 
      "'override'", "'private'", "'protected'", "'public'", "'return'", 
      "'short'", "'switch'", "'this'", "'true'", "'virtual'", "'void'", 
      "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", 
      "'*'", "'/'", "'%'", "", "'&'", "'|'", "'~'", "'!'", "'='", "'<'", 
      "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", 
      "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", "'&&'", "'||'", 
      "'++'", "'--'", "','", "'\\u003F'", "':'", "'::'", "';'", "'.'"
    },
    std::vector<std::string>{
      "", "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
      "UserDefinedLiteral", "Cast", "Import", "From", "Out", "Property", 
      "Ensure", "EnsureAlways", "Check", "Mixin", "Int", "Int8", "Int16", 
      "Int32", "Int64", "UInt", "UInt8", "UInt16", "UInt32", "UInt64", "Float", 
      "Double", "Bool", "Auto", "Break", "Case", "Catch", "Char", "Class", 
      "Const", "Continue", "Default", "Do", "Else", "Enum", "Export", "False_", 
      "Final", "For", "Goto", "If", "Namespace", "Nullptr", "Operator", 
      "Override", "Private", "Protected", "Public", "Return", "Short", "Switch", 
      "This", "True_", "Virtual", "Void", "While", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", 
      "Minus", "Star", "Div", "Mod", "Xor", "And", "Or", "Tilde", "Not", 
      "Assign", "Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
      "DivAssign", "ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
      "RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
      "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "Question", "Colon", 
      "Doublecolon", "Semi", "Dot", "Identifier", "DecimalLiteral", "OctalLiteral", 
      "HexadecimalLiteral", "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", 
      "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", 
      "Whitespace", "Newline", "BlockComment", "LineComment", "PreprocessorBranchRemoval", 
      "Preprocessor"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,119,1300,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,1,0,3,0,266,8,0,1,0,1,0,1,1,
  	1,1,1,1,1,1,5,1,274,8,1,10,1,12,1,277,9,1,1,1,1,1,1,1,3,1,282,8,1,1,1,
  	1,1,3,1,286,8,1,1,1,1,1,1,1,1,1,3,1,292,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,
  	3,1,3,5,3,302,8,3,10,3,12,3,305,9,3,1,4,1,4,1,5,4,5,310,8,5,11,5,12,5,
  	311,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,321,8,5,1,6,1,6,3,6,325,8,6,1,7,1,
  	7,1,7,1,7,1,7,1,7,3,7,333,8,7,3,7,335,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
  	3,9,344,8,9,1,9,1,9,1,9,1,9,1,9,5,9,351,8,9,10,9,12,9,354,9,9,1,10,1,
  	10,3,10,358,8,10,1,10,1,10,1,11,1,11,3,11,364,8,11,1,11,1,11,1,12,1,12,
  	1,12,1,12,3,12,372,8,12,3,12,374,8,12,1,13,1,13,1,14,1,14,1,14,5,14,381,
  	8,14,10,14,12,14,384,9,14,1,15,1,15,3,15,388,8,15,1,16,3,16,391,8,16,
  	1,16,1,16,3,16,395,8,16,1,17,3,17,398,8,17,1,17,1,17,1,17,1,18,1,18,3,
  	18,405,8,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,414,8,19,1,19,1,19,
  	1,19,1,19,1,19,3,19,421,8,19,1,19,1,19,3,19,425,8,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,438,8,19,1,19,1,19,3,19,442,
  	8,19,1,19,1,19,1,19,1,19,3,19,448,8,19,1,19,1,19,1,19,1,19,1,19,3,19,
  	455,8,19,1,19,1,19,1,19,1,19,1,19,3,19,462,8,19,1,19,1,19,5,19,466,8,
  	19,10,19,12,19,469,9,19,1,20,1,20,1,21,3,21,474,8,21,1,21,1,21,1,21,3,
  	21,479,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,490,8,21,
  	1,22,1,22,1,22,1,22,3,22,496,8,22,1,22,1,22,1,22,1,22,1,22,3,22,503,8,
  	22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,3,25,513,8,25,1,25,1,25,3,
  	25,517,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,528,8,26,
  	1,27,1,27,1,27,5,27,533,8,27,10,27,12,27,536,9,27,1,28,1,28,1,28,5,28,
  	541,8,28,10,28,12,28,544,9,28,1,29,1,29,1,29,1,29,5,29,550,8,29,10,29,
  	12,29,553,9,29,1,30,1,30,1,30,1,30,3,30,559,8,30,1,31,1,31,1,31,5,31,
  	564,8,31,10,31,12,31,567,9,31,1,32,1,32,1,32,5,32,572,8,32,10,32,12,32,
  	575,9,32,1,33,1,33,1,33,5,33,580,8,33,10,33,12,33,583,9,33,1,34,1,34,
  	1,34,5,34,588,8,34,10,34,12,34,591,9,34,1,35,1,35,1,35,5,35,596,8,35,
  	10,35,12,35,599,9,35,1,36,1,36,1,36,5,36,604,8,36,10,36,12,36,607,9,36,
  	1,37,1,37,1,37,5,37,612,8,37,10,37,12,37,615,9,37,1,38,1,38,1,38,1,38,
  	1,38,1,38,3,38,623,8,38,1,39,1,39,1,39,1,39,1,39,3,39,630,8,39,1,40,1,
  	40,1,41,1,41,1,41,5,41,637,8,41,10,41,12,41,640,9,41,1,42,1,42,1,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,3,43,651,8,43,3,43,653,8,43,1,44,1,44,1,44,
  	1,44,3,44,659,8,44,1,44,1,44,1,44,1,45,3,45,665,8,45,1,45,1,45,1,46,1,
  	46,3,46,671,8,46,1,46,1,46,1,47,4,47,676,8,47,11,47,12,47,677,1,48,1,
  	48,1,48,1,48,1,48,1,48,1,48,3,48,687,8,48,1,48,1,48,1,48,1,48,1,48,1,
  	48,3,48,695,8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,703,8,49,3,49,705,
  	8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,3,50,725,8,50,1,50,1,50,3,50,729,8,50,1,50,1,
  	50,1,50,1,50,3,50,735,8,50,1,50,1,50,1,50,3,50,740,8,50,1,51,1,51,3,51,
  	744,8,51,1,52,1,52,1,52,1,53,1,53,3,53,751,8,53,1,54,1,54,1,54,1,54,1,
  	54,3,54,758,8,54,1,54,1,54,3,54,762,8,54,1,54,1,54,1,55,1,55,1,56,4,56,
  	769,8,56,11,56,12,56,770,1,57,1,57,1,57,1,57,1,57,3,57,778,8,57,1,58,
  	1,58,1,58,1,58,3,58,784,8,58,1,59,1,59,1,59,1,59,1,59,1,60,3,60,792,8,
  	60,1,60,1,60,3,60,796,8,60,1,60,1,60,1,61,1,61,1,62,1,62,3,62,804,8,62,
  	1,63,4,63,807,8,63,11,63,12,63,808,1,64,1,64,1,65,1,65,1,66,1,66,1,66,
  	3,66,818,8,66,1,67,1,67,1,67,1,67,1,67,3,67,825,8,67,1,68,4,68,828,8,
  	68,11,68,12,68,829,1,69,4,69,833,8,69,11,69,12,69,834,1,70,3,70,838,8,
  	70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
  	70,1,70,1,70,1,70,1,70,3,70,858,8,70,1,71,1,71,1,72,1,72,1,72,3,72,865,
  	8,72,1,73,1,73,1,73,3,73,870,8,73,1,73,1,73,1,74,1,74,3,74,876,8,74,1,
  	74,1,74,3,74,880,8,74,1,74,1,74,3,74,884,8,74,1,74,3,74,887,8,74,1,75,
  	1,75,1,76,1,76,1,76,1,76,3,76,895,8,76,3,76,897,8,76,1,76,1,76,1,77,1,
  	77,3,77,903,8,77,1,77,3,77,906,8,77,1,77,3,77,909,8,77,1,78,1,78,1,78,
  	3,78,914,8,78,1,78,1,78,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,5,81,
  	926,8,81,10,81,12,81,929,9,81,1,82,1,82,1,82,3,82,934,8,82,1,83,1,83,
  	1,84,1,84,3,84,940,8,84,1,85,1,85,1,86,1,86,1,86,3,86,947,8,86,1,86,1,
  	86,3,86,951,8,86,1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,
  	89,3,89,964,8,89,1,89,1,89,1,90,4,90,969,8,90,11,90,12,90,970,1,91,1,
  	91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,4,91,986,8,
  	91,11,91,12,91,987,3,91,990,8,91,1,92,1,92,1,92,5,92,995,8,92,10,92,12,
  	92,998,9,92,1,93,1,93,3,93,1002,8,93,1,94,1,94,1,94,1,95,1,95,1,95,1,
  	95,1,95,1,95,1,95,3,95,1014,8,95,1,95,3,95,1017,8,95,5,95,1019,8,95,10,
  	95,12,95,1022,9,95,1,96,1,96,3,96,1026,8,96,1,96,1,96,3,96,1030,8,96,
  	1,96,3,96,1033,8,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,
  	101,1,101,5,101,1046,8,101,10,101,12,101,1049,9,101,1,102,1,102,3,102,
  	1053,8,102,1,102,1,102,3,102,1057,8,102,1,103,3,103,1060,8,103,1,103,
  	3,103,1063,8,103,1,103,3,103,1066,8,103,1,103,1,103,3,103,1070,8,103,
  	1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,1079,8,104,1,105,1,105,
  	1,105,1,105,1,105,3,105,1086,8,105,1,106,1,106,1,106,3,106,1091,8,106,
  	1,107,1,107,3,107,1095,8,107,1,108,1,108,1,108,5,108,1100,8,108,10,108,
  	12,108,1103,9,108,1,108,3,108,1106,8,108,1,109,1,109,1,109,3,109,1111,
  	8,109,3,109,1113,8,109,1,109,1,109,1,110,1,110,1,111,1,111,1,111,3,111,
  	1122,8,111,1,111,1,111,1,112,1,112,1,112,3,112,1129,8,112,3,112,1131,
  	8,112,1,112,3,112,1134,8,112,1,113,3,113,1137,8,113,1,113,1,113,1,114,
  	1,114,1,115,1,115,1,115,1,115,4,115,1147,8,115,11,115,12,115,1148,1,116,
  	1,116,1,116,1,116,3,116,1155,8,116,1,117,3,117,1158,8,117,1,117,3,117,
  	1161,8,117,1,117,3,117,1164,8,117,1,117,1,117,3,117,1168,8,117,1,117,
  	1,117,1,118,1,118,1,118,5,118,1175,8,118,10,118,12,118,1178,9,118,1,119,
  	1,119,3,119,1182,8,119,1,119,3,119,1185,8,119,3,119,1187,8,119,1,119,
  	3,119,1190,8,119,1,119,1,119,1,119,3,119,1195,8,119,1,120,4,120,1198,
  	8,120,11,120,12,120,1199,1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,
  	123,5,123,1210,8,123,10,123,12,123,1213,9,123,1,124,1,124,1,124,3,124,
  	1218,8,124,1,124,1,124,1,124,3,124,1223,8,124,1,124,1,124,3,124,1227,
  	8,124,1,125,3,125,1230,8,125,1,125,1,125,3,125,1234,8,125,1,126,1,126,
  	1,127,1,127,1,128,1,128,1,128,1,129,1,129,1,129,1,129,3,129,1247,8,129,
  	1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,3,130,1289,8,130,1,131,1,131,1,131,1,131,1,131,
  	1,131,1,131,3,131,1298,8,131,1,131,1,808,3,18,38,190,132,0,2,4,6,8,10,
  	12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
  	58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
  	104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
  	140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
  	176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
  	212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
  	248,250,252,254,256,258,260,262,0,16,2,0,41,41,57,57,2,0,73,73,77,77,
  	1,0,96,97,2,0,67,69,73,76,1,0,69,71,1,0,67,68,2,0,78,79,92,93,1,0,90,
  	91,2,0,77,77,80,89,1,0,11,13,1,0,61,66,2,0,73,73,94,94,2,0,63,63,65,65,
  	2,0,64,64,66,66,3,0,10,10,42,42,49,49,1,0,50,52,1424,0,265,1,0,0,0,2,
  	291,1,0,0,0,4,293,1,0,0,0,6,298,1,0,0,0,8,306,1,0,0,0,10,320,1,0,0,0,
  	12,324,1,0,0,0,14,334,1,0,0,0,16,336,1,0,0,0,18,339,1,0,0,0,20,355,1,
  	0,0,0,22,361,1,0,0,0,24,373,1,0,0,0,26,375,1,0,0,0,28,377,1,0,0,0,30,
  	387,1,0,0,0,32,394,1,0,0,0,34,397,1,0,0,0,36,402,1,0,0,0,38,441,1,0,0,
  	0,40,470,1,0,0,0,42,489,1,0,0,0,44,502,1,0,0,0,46,504,1,0,0,0,48,506,
  	1,0,0,0,50,516,1,0,0,0,52,527,1,0,0,0,54,529,1,0,0,0,56,537,1,0,0,0,58,
  	545,1,0,0,0,60,558,1,0,0,0,62,560,1,0,0,0,64,568,1,0,0,0,66,576,1,0,0,
  	0,68,584,1,0,0,0,70,592,1,0,0,0,72,600,1,0,0,0,74,608,1,0,0,0,76,616,
  	1,0,0,0,78,629,1,0,0,0,80,631,1,0,0,0,82,633,1,0,0,0,84,641,1,0,0,0,86,
  	652,1,0,0,0,88,658,1,0,0,0,90,664,1,0,0,0,92,668,1,0,0,0,94,675,1,0,0,
  	0,96,694,1,0,0,0,98,704,1,0,0,0,100,739,1,0,0,0,102,743,1,0,0,0,104,745,
  	1,0,0,0,106,750,1,0,0,0,108,761,1,0,0,0,110,765,1,0,0,0,112,768,1,0,0,
  	0,114,777,1,0,0,0,116,783,1,0,0,0,118,785,1,0,0,0,120,791,1,0,0,0,122,
  	799,1,0,0,0,124,803,1,0,0,0,126,806,1,0,0,0,128,810,1,0,0,0,130,812,1,
  	0,0,0,132,817,1,0,0,0,134,824,1,0,0,0,136,827,1,0,0,0,138,832,1,0,0,0,
  	140,857,1,0,0,0,142,859,1,0,0,0,144,864,1,0,0,0,146,866,1,0,0,0,148,886,
  	1,0,0,0,150,888,1,0,0,0,152,890,1,0,0,0,154,900,1,0,0,0,156,910,1,0,0,
  	0,158,917,1,0,0,0,160,919,1,0,0,0,162,922,1,0,0,0,164,930,1,0,0,0,166,
  	935,1,0,0,0,168,939,1,0,0,0,170,941,1,0,0,0,172,943,1,0,0,0,174,954,1,
  	0,0,0,176,956,1,0,0,0,178,963,1,0,0,0,180,968,1,0,0,0,182,989,1,0,0,0,
  	184,991,1,0,0,0,186,999,1,0,0,0,188,1003,1,0,0,0,190,1006,1,0,0,0,192,
  	1023,1,0,0,0,194,1034,1,0,0,0,196,1036,1,0,0,0,198,1038,1,0,0,0,200,1040,
  	1,0,0,0,202,1042,1,0,0,0,204,1050,1,0,0,0,206,1059,1,0,0,0,208,1078,1,
  	0,0,0,210,1085,1,0,0,0,212,1090,1,0,0,0,214,1094,1,0,0,0,216,1096,1,0,
  	0,0,218,1107,1,0,0,0,220,1116,1,0,0,0,222,1118,1,0,0,0,224,1125,1,0,0,
  	0,226,1136,1,0,0,0,228,1140,1,0,0,0,230,1146,1,0,0,0,232,1154,1,0,0,0,
  	234,1157,1,0,0,0,236,1171,1,0,0,0,238,1194,1,0,0,0,240,1197,1,0,0,0,242,
  	1201,1,0,0,0,244,1203,1,0,0,0,246,1206,1,0,0,0,248,1226,1,0,0,0,250,1233,
  	1,0,0,0,252,1235,1,0,0,0,254,1237,1,0,0,0,256,1239,1,0,0,0,258,1242,1,
  	0,0,0,260,1288,1,0,0,0,262,1297,1,0,0,0,264,266,3,112,56,0,265,264,1,
  	0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,0,0,1,268,1,1,0,0,0,269,
  	270,5,7,0,0,270,275,5,104,0,0,271,272,5,103,0,0,272,274,5,104,0,0,273,
  	271,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,
  	0,0,0,277,275,1,0,0,0,278,292,5,102,0,0,279,281,5,7,0,0,280,282,3,126,
  	63,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,285,3,188,94,
  	0,284,286,3,240,120,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,
  	287,288,5,8,0,0,288,289,5,4,0,0,289,290,5,102,0,0,290,292,1,0,0,0,291,
  	269,1,0,0,0,291,279,1,0,0,0,292,3,1,0,0,0,293,294,5,104,0,0,294,295,5,
  	78,0,0,295,296,3,6,3,0,296,297,5,79,0,0,297,5,1,0,0,0,298,303,3,126,63,
  	0,299,300,5,98,0,0,300,302,3,126,63,0,301,299,1,0,0,0,302,305,1,0,0,0,
  	303,301,1,0,0,0,303,304,1,0,0,0,304,7,1,0,0,0,305,303,1,0,0,0,306,307,
  	7,0,0,0,307,9,1,0,0,0,308,310,3,262,131,0,309,308,1,0,0,0,310,311,1,0,
  	0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,321,1,0,0,0,313,321,5,56,0,0,
  	314,315,5,61,0,0,315,316,3,82,41,0,316,317,5,62,0,0,317,321,1,0,0,0,318,
  	321,3,12,6,0,319,321,3,20,10,0,320,309,1,0,0,0,320,313,1,0,0,0,320,314,
  	1,0,0,0,320,318,1,0,0,0,320,319,1,0,0,0,321,11,1,0,0,0,322,325,3,14,7,
  	0,323,325,3,16,8,0,324,322,1,0,0,0,324,323,1,0,0,0,325,13,1,0,0,0,326,
  	335,5,104,0,0,327,335,3,256,128,0,328,335,3,258,129,0,329,332,5,75,0,
  	0,330,333,3,220,110,0,331,333,3,146,73,0,332,330,1,0,0,0,332,331,1,0,
  	0,0,333,335,1,0,0,0,334,326,1,0,0,0,334,327,1,0,0,0,334,328,1,0,0,0,334,
  	329,1,0,0,0,335,15,1,0,0,0,336,337,3,18,9,0,337,338,3,14,7,0,338,17,1,
  	0,0,0,339,343,6,9,-1,0,340,344,3,144,72,0,341,344,3,168,84,0,342,344,
  	3,146,73,0,343,340,1,0,0,0,343,341,1,0,0,0,343,342,1,0,0,0,343,344,1,
  	0,0,0,344,345,1,0,0,0,345,346,5,101,0,0,346,352,1,0,0,0,347,348,10,1,
  	0,0,348,349,5,104,0,0,349,351,5,101,0,0,350,347,1,0,0,0,351,354,1,0,0,
  	0,352,350,1,0,0,0,352,353,1,0,0,0,353,19,1,0,0,0,354,352,1,0,0,0,355,
  	357,3,22,11,0,356,358,3,36,18,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,
  	1,0,0,0,359,360,3,92,46,0,360,21,1,0,0,0,361,363,5,63,0,0,362,364,3,24,
  	12,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,64,0,0,
  	366,23,1,0,0,0,367,374,3,28,14,0,368,371,3,26,13,0,369,370,5,98,0,0,370,
  	372,3,28,14,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,367,
  	1,0,0,0,373,368,1,0,0,0,374,25,1,0,0,0,375,376,7,1,0,0,376,27,1,0,0,0,
  	377,382,3,30,15,0,378,379,5,98,0,0,379,381,3,30,15,0,380,378,1,0,0,0,
  	381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,29,1,0,0,0,384,382,
  	1,0,0,0,385,388,3,32,16,0,386,388,3,34,17,0,387,385,1,0,0,0,387,386,1,
  	0,0,0,388,31,1,0,0,0,389,391,5,73,0,0,390,389,1,0,0,0,390,391,1,0,0,0,
  	391,392,1,0,0,0,392,395,5,104,0,0,393,395,5,56,0,0,394,390,1,0,0,0,394,
  	393,1,0,0,0,395,33,1,0,0,0,396,398,5,73,0,0,397,396,1,0,0,0,397,398,1,
  	0,0,0,398,399,1,0,0,0,399,400,5,104,0,0,400,401,3,210,105,0,401,35,1,
  	0,0,0,402,404,5,61,0,0,403,405,3,200,100,0,404,403,1,0,0,0,404,405,1,
  	0,0,0,405,406,1,0,0,0,406,407,5,62,0,0,407,37,1,0,0,0,408,409,6,19,-1,
  	0,409,442,3,10,5,0,410,411,3,142,71,0,411,413,5,61,0,0,412,414,3,40,20,
  	0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,5,62,0,0,416,
  	442,1,0,0,0,417,424,3,140,70,0,418,420,5,61,0,0,419,421,3,40,20,0,420,
  	419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,425,5,62,0,0,423,425,
  	3,218,109,0,424,418,1,0,0,0,424,423,1,0,0,0,425,442,1,0,0,0,426,427,5,
  	6,0,0,427,428,5,78,0,0,428,429,3,198,99,0,429,430,5,79,0,0,430,431,5,
  	61,0,0,431,432,3,82,41,0,432,433,5,62,0,0,433,442,1,0,0,0,434,437,5,61,
  	0,0,435,438,3,82,41,0,436,438,3,198,99,0,437,435,1,0,0,0,437,436,1,0,
  	0,0,438,439,1,0,0,0,439,440,5,62,0,0,440,442,1,0,0,0,441,408,1,0,0,0,
  	441,410,1,0,0,0,441,417,1,0,0,0,441,426,1,0,0,0,441,434,1,0,0,0,442,467,
  	1,0,0,0,443,444,10,8,0,0,444,447,5,63,0,0,445,448,3,82,41,0,446,448,3,
  	218,109,0,447,445,1,0,0,0,447,446,1,0,0,0,448,449,1,0,0,0,449,450,5,64,
  	0,0,450,466,1,0,0,0,451,452,10,6,0,0,452,454,5,61,0,0,453,455,3,40,20,
  	0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,466,5,62,0,0,457,
  	458,10,4,0,0,458,461,5,103,0,0,459,462,3,12,6,0,460,462,3,42,21,0,461,
  	459,1,0,0,0,461,460,1,0,0,0,462,466,1,0,0,0,463,464,10,3,0,0,464,466,
  	7,2,0,0,465,443,1,0,0,0,465,451,1,0,0,0,465,457,1,0,0,0,465,463,1,0,0,
  	0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,39,1,0,0,0,469,
  	467,1,0,0,0,470,471,3,216,108,0,471,41,1,0,0,0,472,474,3,18,9,0,473,472,
  	1,0,0,0,473,474,1,0,0,0,474,478,1,0,0,0,475,476,3,144,72,0,476,477,5,
  	101,0,0,477,479,1,0,0,0,478,475,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,
  	0,480,481,5,75,0,0,481,490,3,144,72,0,482,483,3,18,9,0,483,484,5,101,
  	0,0,484,485,5,75,0,0,485,486,3,144,72,0,486,490,1,0,0,0,487,488,5,75,
  	0,0,488,490,3,146,73,0,489,473,1,0,0,0,489,482,1,0,0,0,489,487,1,0,0,
  	0,490,43,1,0,0,0,491,503,3,38,19,0,492,496,5,96,0,0,493,496,5,97,0,0,
  	494,496,3,46,23,0,495,492,1,0,0,0,495,493,1,0,0,0,495,494,1,0,0,0,496,
  	497,1,0,0,0,497,503,3,44,22,0,498,499,5,61,0,0,499,500,3,198,99,0,500,
  	501,5,62,0,0,501,503,1,0,0,0,502,491,1,0,0,0,502,495,1,0,0,0,502,498,
  	1,0,0,0,503,45,1,0,0,0,504,505,7,3,0,0,505,47,1,0,0,0,506,507,5,61,0,
  	0,507,508,3,40,20,0,508,509,5,62,0,0,509,49,1,0,0,0,510,512,5,61,0,0,
  	511,513,3,40,20,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,
  	517,5,62,0,0,515,517,3,218,109,0,516,510,1,0,0,0,516,515,1,0,0,0,517,
  	51,1,0,0,0,518,528,3,44,22,0,519,520,5,6,0,0,520,521,5,78,0,0,521,522,
  	3,198,99,0,522,523,5,79,0,0,523,524,5,61,0,0,524,525,3,52,26,0,525,526,
  	5,62,0,0,526,528,1,0,0,0,527,518,1,0,0,0,527,519,1,0,0,0,528,53,1,0,0,
  	0,529,534,3,52,26,0,530,531,7,4,0,0,531,533,3,52,26,0,532,530,1,0,0,0,
  	533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,55,1,0,0,0,536,534,
  	1,0,0,0,537,542,3,54,27,0,538,539,7,5,0,0,539,541,3,54,27,0,540,538,1,
  	0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,57,1,0,0,0,
  	544,542,1,0,0,0,545,551,3,56,28,0,546,547,3,60,30,0,547,548,3,56,28,0,
  	548,550,1,0,0,0,549,546,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,
  	1,0,0,0,552,59,1,0,0,0,553,551,1,0,0,0,554,555,5,79,0,0,555,559,5,79,
  	0,0,556,557,5,78,0,0,557,559,5,78,0,0,558,554,1,0,0,0,558,556,1,0,0,0,
  	559,61,1,0,0,0,560,565,3,58,29,0,561,562,7,6,0,0,562,564,3,58,29,0,563,
  	561,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,63,1,
  	0,0,0,567,565,1,0,0,0,568,573,3,62,31,0,569,570,7,7,0,0,570,572,3,62,
  	31,0,571,569,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,
  	574,65,1,0,0,0,575,573,1,0,0,0,576,581,3,64,32,0,577,578,5,73,0,0,578,
  	580,3,64,32,0,579,577,1,0,0,0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,
  	1,0,0,0,582,67,1,0,0,0,583,581,1,0,0,0,584,589,3,66,33,0,585,586,5,72,
  	0,0,586,588,3,66,33,0,587,585,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,
  	589,590,1,0,0,0,590,69,1,0,0,0,591,589,1,0,0,0,592,597,3,68,34,0,593,
  	594,5,74,0,0,594,596,3,68,34,0,595,593,1,0,0,0,596,599,1,0,0,0,597,595,
  	1,0,0,0,597,598,1,0,0,0,598,71,1,0,0,0,599,597,1,0,0,0,600,605,3,70,35,
  	0,601,602,5,94,0,0,602,604,3,70,35,0,603,601,1,0,0,0,604,607,1,0,0,0,
  	605,603,1,0,0,0,605,606,1,0,0,0,606,73,1,0,0,0,607,605,1,0,0,0,608,613,
  	3,72,36,0,609,610,5,95,0,0,610,612,3,72,36,0,611,609,1,0,0,0,612,615,
  	1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,75,1,0,0,0,615,613,1,0,0,
  	0,616,622,3,74,37,0,617,618,5,99,0,0,618,619,3,82,41,0,619,620,5,100,
  	0,0,620,621,3,78,39,0,621,623,1,0,0,0,622,617,1,0,0,0,622,623,1,0,0,0,
  	623,77,1,0,0,0,624,630,3,76,38,0,625,626,3,74,37,0,626,627,3,80,40,0,
  	627,628,3,214,107,0,628,630,1,0,0,0,629,624,1,0,0,0,629,625,1,0,0,0,630,
  	79,1,0,0,0,631,632,7,8,0,0,632,81,1,0,0,0,633,638,3,78,39,0,634,635,5,
  	98,0,0,635,637,3,78,39,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,1,0,
  	0,0,638,639,1,0,0,0,639,83,1,0,0,0,640,638,1,0,0,0,641,642,3,76,38,0,
  	642,85,1,0,0,0,643,653,3,88,44,0,644,653,3,110,55,0,645,651,3,90,45,0,
  	646,651,3,92,46,0,647,651,3,96,48,0,648,651,3,100,50,0,649,651,3,108,
  	54,0,650,645,1,0,0,0,650,646,1,0,0,0,650,647,1,0,0,0,650,648,1,0,0,0,
  	650,649,1,0,0,0,651,653,1,0,0,0,652,643,1,0,0,0,652,644,1,0,0,0,652,650,
  	1,0,0,0,653,87,1,0,0,0,654,659,5,104,0,0,655,656,5,30,0,0,656,659,3,84,
  	42,0,657,659,5,36,0,0,658,654,1,0,0,0,658,655,1,0,0,0,658,657,1,0,0,0,
  	659,660,1,0,0,0,660,661,5,100,0,0,661,662,3,86,43,0,662,89,1,0,0,0,663,
  	665,3,82,41,0,664,663,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,667,
  	5,102,0,0,667,91,1,0,0,0,668,670,5,65,0,0,669,671,3,94,47,0,670,669,1,
  	0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,673,5,66,0,0,673,93,1,0,0,0,
  	674,676,3,86,43,0,675,674,1,0,0,0,676,677,1,0,0,0,677,675,1,0,0,0,677,
  	678,1,0,0,0,678,95,1,0,0,0,679,680,5,45,0,0,680,681,5,61,0,0,681,682,
  	3,98,49,0,682,683,5,62,0,0,683,686,3,86,43,0,684,685,5,38,0,0,685,687,
  	3,86,43,0,686,684,1,0,0,0,686,687,1,0,0,0,687,695,1,0,0,0,688,689,5,55,
  	0,0,689,690,5,61,0,0,690,691,3,98,49,0,691,692,5,62,0,0,692,693,3,86,
  	43,0,693,695,1,0,0,0,694,679,1,0,0,0,694,688,1,0,0,0,695,97,1,0,0,0,696,
  	705,3,82,41,0,697,698,3,126,63,0,698,702,3,188,94,0,699,700,5,77,0,0,
  	700,703,3,214,107,0,701,703,3,218,109,0,702,699,1,0,0,0,702,701,1,0,0,
  	0,703,705,1,0,0,0,704,696,1,0,0,0,704,697,1,0,0,0,705,99,1,0,0,0,706,
  	707,5,60,0,0,707,708,5,61,0,0,708,709,3,98,49,0,709,710,5,62,0,0,710,
  	711,3,86,43,0,711,740,1,0,0,0,712,713,5,37,0,0,713,714,3,86,43,0,714,
  	715,5,60,0,0,715,716,5,61,0,0,716,717,3,82,41,0,717,718,5,62,0,0,718,
  	719,5,102,0,0,719,740,1,0,0,0,720,721,5,43,0,0,721,734,5,61,0,0,722,724,
  	3,102,51,0,723,725,3,98,49,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,
  	1,0,0,0,726,728,5,102,0,0,727,729,3,82,41,0,728,727,1,0,0,0,728,729,1,
  	0,0,0,729,735,1,0,0,0,730,731,3,104,52,0,731,732,5,100,0,0,732,733,3,
  	106,53,0,733,735,1,0,0,0,734,722,1,0,0,0,734,730,1,0,0,0,735,736,1,0,
  	0,0,736,737,5,62,0,0,737,738,3,86,43,0,738,740,1,0,0,0,739,706,1,0,0,
  	0,739,712,1,0,0,0,739,720,1,0,0,0,740,101,1,0,0,0,741,744,3,90,45,0,742,
  	744,3,120,60,0,743,741,1,0,0,0,743,742,1,0,0,0,744,103,1,0,0,0,745,746,
  	3,126,63,0,746,747,5,104,0,0,747,105,1,0,0,0,748,751,3,82,41,0,749,751,
  	3,218,109,0,750,748,1,0,0,0,750,749,1,0,0,0,751,107,1,0,0,0,752,762,5,
  	29,0,0,753,762,5,35,0,0,754,757,5,53,0,0,755,758,3,82,41,0,756,758,3,
  	218,109,0,757,755,1,0,0,0,757,756,1,0,0,0,757,758,1,0,0,0,758,762,1,0,
  	0,0,759,760,5,44,0,0,760,762,5,104,0,0,761,752,1,0,0,0,761,753,1,0,0,
  	0,761,754,1,0,0,0,761,759,1,0,0,0,762,763,1,0,0,0,763,764,5,102,0,0,764,
  	109,1,0,0,0,765,766,3,116,58,0,766,111,1,0,0,0,767,769,3,114,57,0,768,
  	767,1,0,0,0,769,770,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,113,1,
  	0,0,0,772,778,3,2,1,0,773,778,3,116,58,0,774,778,3,206,103,0,775,778,
  	3,172,86,0,776,778,3,122,61,0,777,772,1,0,0,0,777,773,1,0,0,0,777,774,
  	1,0,0,0,777,775,1,0,0,0,777,776,1,0,0,0,778,115,1,0,0,0,779,784,3,120,
  	60,0,780,784,3,176,88,0,781,784,3,118,59,0,782,784,3,156,78,0,783,779,
  	1,0,0,0,783,780,1,0,0,0,783,781,1,0,0,0,783,782,1,0,0,0,784,117,1,0,0,
  	0,785,786,5,104,0,0,786,787,5,77,0,0,787,788,3,198,99,0,788,789,5,102,
  	0,0,789,119,1,0,0,0,790,792,3,126,63,0,791,790,1,0,0,0,791,792,1,0,0,
  	0,792,795,1,0,0,0,793,796,3,184,92,0,794,796,3,78,39,0,795,793,1,0,0,
  	0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,798,5,102,0,0,798,
  	121,1,0,0,0,799,800,5,102,0,0,800,123,1,0,0,0,801,804,3,132,66,0,802,
  	804,3,128,64,0,803,801,1,0,0,0,803,802,1,0,0,0,804,125,1,0,0,0,805,807,
  	3,124,62,0,806,805,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,808,806,1,
  	0,0,0,809,127,1,0,0,0,810,811,5,58,0,0,811,129,1,0,0,0,812,813,5,104,
  	0,0,813,131,1,0,0,0,814,818,3,134,67,0,815,818,3,222,111,0,816,818,3,
  	152,76,0,817,814,1,0,0,0,817,815,1,0,0,0,817,816,1,0,0,0,818,133,1,0,
  	0,0,819,825,3,140,70,0,820,825,3,148,74,0,821,825,5,34,0,0,822,825,5,
  	73,0,0,823,825,5,9,0,0,824,819,1,0,0,0,824,820,1,0,0,0,824,821,1,0,0,
  	0,824,822,1,0,0,0,824,823,1,0,0,0,825,135,1,0,0,0,826,828,3,132,66,0,
  	827,826,1,0,0,0,828,829,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,137,
  	1,0,0,0,831,833,3,134,67,0,832,831,1,0,0,0,833,834,1,0,0,0,834,832,1,
  	0,0,0,834,835,1,0,0,0,835,139,1,0,0,0,836,838,3,18,9,0,837,836,1,0,0,
  	0,837,838,1,0,0,0,838,839,1,0,0,0,839,858,3,144,72,0,840,858,3,4,2,0,
  	841,858,5,15,0,0,842,858,5,16,0,0,843,858,5,17,0,0,844,858,5,18,0,0,845,
  	858,5,19,0,0,846,858,5,20,0,0,847,858,5,21,0,0,848,858,5,22,0,0,849,858,
  	5,23,0,0,850,858,5,24,0,0,851,858,5,25,0,0,852,858,5,26,0,0,853,858,5,
  	27,0,0,854,858,5,59,0,0,855,858,5,28,0,0,856,858,3,146,73,0,857,837,1,
  	0,0,0,857,840,1,0,0,0,857,841,1,0,0,0,857,842,1,0,0,0,857,843,1,0,0,0,
  	857,844,1,0,0,0,857,845,1,0,0,0,857,846,1,0,0,0,857,847,1,0,0,0,857,848,
  	1,0,0,0,857,849,1,0,0,0,857,850,1,0,0,0,857,851,1,0,0,0,857,852,1,0,0,
  	0,857,853,1,0,0,0,857,854,1,0,0,0,857,855,1,0,0,0,857,856,1,0,0,0,858,
  	141,1,0,0,0,859,860,7,9,0,0,860,143,1,0,0,0,861,865,3,220,110,0,862,865,
  	3,150,75,0,863,865,3,130,65,0,864,861,1,0,0,0,864,862,1,0,0,0,864,863,
  	1,0,0,0,865,145,1,0,0,0,866,869,5,61,0,0,867,870,3,82,41,0,868,870,5,
  	28,0,0,869,867,1,0,0,0,869,868,1,0,0,0,870,871,1,0,0,0,871,872,5,62,0,
  	0,872,147,1,0,0,0,873,879,5,33,0,0,874,876,3,18,9,0,875,874,1,0,0,0,875,
  	876,1,0,0,0,876,877,1,0,0,0,877,880,5,104,0,0,878,880,3,18,9,0,879,875,
  	1,0,0,0,879,878,1,0,0,0,880,887,1,0,0,0,881,883,5,39,0,0,882,884,3,18,
  	9,0,883,882,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,887,5,104,0,0,
  	886,873,1,0,0,0,886,881,1,0,0,0,887,149,1,0,0,0,888,889,5,104,0,0,889,
  	151,1,0,0,0,890,891,3,154,77,0,891,896,5,65,0,0,892,894,3,162,81,0,893,
  	895,5,98,0,0,894,893,1,0,0,0,894,895,1,0,0,0,895,897,1,0,0,0,896,892,
  	1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,899,5,66,0,0,899,153,1,0,
  	0,0,900,905,3,158,79,0,901,903,3,18,9,0,902,901,1,0,0,0,902,903,1,0,0,
  	0,903,904,1,0,0,0,904,906,5,104,0,0,905,902,1,0,0,0,905,906,1,0,0,0,906,
  	908,1,0,0,0,907,909,3,160,80,0,908,907,1,0,0,0,908,909,1,0,0,0,909,155,
  	1,0,0,0,910,911,3,158,79,0,911,913,5,104,0,0,912,914,3,160,80,0,913,912,
  	1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,5,102,0,0,916,157,1,0,
  	0,0,917,918,5,39,0,0,918,159,1,0,0,0,919,920,5,100,0,0,920,921,3,136,
  	68,0,921,161,1,0,0,0,922,927,3,164,82,0,923,924,5,98,0,0,924,926,3,164,
  	82,0,925,923,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,
  	928,163,1,0,0,0,929,927,1,0,0,0,930,933,3,166,83,0,931,932,5,77,0,0,932,
  	934,3,84,42,0,933,931,1,0,0,0,933,934,1,0,0,0,934,165,1,0,0,0,935,936,
  	5,104,0,0,936,167,1,0,0,0,937,940,3,170,85,0,938,940,3,174,87,0,939,937,
  	1,0,0,0,939,938,1,0,0,0,940,169,1,0,0,0,941,942,5,104,0,0,942,171,1,0,
  	0,0,943,946,5,46,0,0,944,947,5,104,0,0,945,947,3,170,85,0,946,944,1,0,
  	0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,950,5,65,0,0,
  	949,951,3,112,56,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,
  	953,5,66,0,0,953,173,1,0,0,0,954,955,5,104,0,0,955,175,1,0,0,0,956,957,
  	5,46,0,0,957,958,5,104,0,0,958,959,5,77,0,0,959,960,3,178,89,0,960,961,
  	5,102,0,0,961,177,1,0,0,0,962,964,3,18,9,0,963,962,1,0,0,0,963,964,1,
  	0,0,0,964,965,1,0,0,0,965,966,3,168,84,0,966,179,1,0,0,0,967,969,3,182,
  	91,0,968,967,1,0,0,0,969,970,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,
  	971,181,1,0,0,0,972,973,5,61,0,0,973,974,3,180,90,0,974,975,5,62,0,0,
  	975,990,1,0,0,0,976,977,5,63,0,0,977,978,3,180,90,0,978,979,5,64,0,0,
  	979,990,1,0,0,0,980,981,5,65,0,0,981,982,3,180,90,0,982,983,5,66,0,0,
  	983,990,1,0,0,0,984,986,8,10,0,0,985,984,1,0,0,0,986,987,1,0,0,0,987,
  	985,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,972,1,0,0,0,989,976,1,
  	0,0,0,989,980,1,0,0,0,989,985,1,0,0,0,990,183,1,0,0,0,991,996,3,186,93,
  	0,992,993,5,98,0,0,993,995,3,186,93,0,994,992,1,0,0,0,995,998,1,0,0,0,
  	996,994,1,0,0,0,996,997,1,0,0,0,997,185,1,0,0,0,998,996,1,0,0,0,999,1001,
  	5,104,0,0,1000,1002,3,210,105,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,
  	187,1,0,0,0,1003,1004,3,190,95,0,1004,1005,3,192,96,0,1005,189,1,0,0,
  	0,1006,1007,6,95,-1,0,1007,1008,3,196,98,0,1008,1020,1,0,0,0,1009,1016,
  	10,1,0,0,1010,1017,3,192,96,0,1011,1013,5,63,0,0,1012,1014,3,84,42,0,
  	1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1017,5,64,
  	0,0,1016,1010,1,0,0,0,1016,1011,1,0,0,0,1017,1019,1,0,0,0,1018,1009,1,
  	0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,191,
  	1,0,0,0,1022,1020,1,0,0,0,1023,1025,5,61,0,0,1024,1026,3,200,100,0,1025,
  	1024,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1029,5,62,0,0,1028,
  	1030,5,34,0,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1032,1,0,0,0,1031,
  	1033,3,194,97,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,193,1,0,0,0,
  	1034,1035,7,11,0,0,1035,195,1,0,0,0,1036,1037,3,12,6,0,1037,197,1,0,0,
  	0,1038,1039,3,136,68,0,1039,199,1,0,0,0,1040,1041,3,202,101,0,1041,201,
  	1,0,0,0,1042,1047,3,204,102,0,1043,1044,5,98,0,0,1044,1046,3,204,102,
  	0,1045,1043,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,0,0,1047,1048,1,0,
  	0,0,1048,203,1,0,0,0,1049,1047,1,0,0,0,1050,1052,3,126,63,0,1051,1053,
  	5,104,0,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1056,1,0,0,0,1054,
  	1055,5,77,0,0,1055,1057,3,214,107,0,1056,1054,1,0,0,0,1056,1057,1,0,0,
  	0,1057,205,1,0,0,0,1058,1060,3,254,127,0,1059,1058,1,0,0,0,1059,1060,
  	1,0,0,0,1060,1062,1,0,0,0,1061,1063,5,14,0,0,1062,1061,1,0,0,0,1062,1063,
  	1,0,0,0,1063,1065,1,0,0,0,1064,1066,3,126,63,0,1065,1064,1,0,0,0,1065,
  	1066,1,0,0,0,1066,1067,1,0,0,0,1067,1069,3,188,94,0,1068,1070,3,240,120,
  	0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1072,3,208,
  	104,0,1072,207,1,0,0,0,1073,1079,3,92,46,0,1074,1075,5,77,0,0,1075,1076,
  	5,36,0,0,1076,1079,5,102,0,0,1077,1079,5,102,0,0,1078,1073,1,0,0,0,1078,
  	1074,1,0,0,0,1078,1077,1,0,0,0,1079,209,1,0,0,0,1080,1086,3,212,106,0,
  	1081,1082,5,61,0,0,1082,1083,3,40,20,0,1083,1084,5,62,0,0,1084,1086,1,
  	0,0,0,1085,1080,1,0,0,0,1085,1081,1,0,0,0,1086,211,1,0,0,0,1087,1088,
  	5,77,0,0,1088,1091,3,214,107,0,1089,1091,3,218,109,0,1090,1087,1,0,0,
  	0,1090,1089,1,0,0,0,1091,213,1,0,0,0,1092,1095,3,78,39,0,1093,1095,3,
  	218,109,0,1094,1092,1,0,0,0,1094,1093,1,0,0,0,1095,215,1,0,0,0,1096,1101,
  	3,214,107,0,1097,1098,5,98,0,0,1098,1100,3,214,107,0,1099,1097,1,0,0,
  	0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1101,1102,1,0,0,0,1102,1105,1,0,
  	0,0,1103,1101,1,0,0,0,1104,1106,5,98,0,0,1105,1104,1,0,0,0,1105,1106,
  	1,0,0,0,1106,217,1,0,0,0,1107,1112,7,12,0,0,1108,1110,3,216,108,0,1109,
  	1111,5,98,0,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,1113,1,0,0,0,1112,
  	1108,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1115,7,13,0,0,1115,
  	219,1,0,0,0,1116,1117,5,104,0,0,1117,221,1,0,0,0,1118,1119,3,224,112,
  	0,1119,1121,5,65,0,0,1120,1122,3,230,115,0,1121,1120,1,0,0,0,1121,1122,
  	1,0,0,0,1122,1123,1,0,0,0,1123,1124,5,66,0,0,1124,223,1,0,0,0,1125,1130,
  	5,33,0,0,1126,1128,3,226,113,0,1127,1129,3,228,114,0,1128,1127,1,0,0,
  	0,1128,1129,1,0,0,0,1129,1131,1,0,0,0,1130,1126,1,0,0,0,1130,1131,1,0,
  	0,0,1131,1133,1,0,0,0,1132,1134,3,244,122,0,1133,1132,1,0,0,0,1133,1134,
  	1,0,0,0,1134,225,1,0,0,0,1135,1137,3,18,9,0,1136,1135,1,0,0,0,1136,1137,
  	1,0,0,0,1137,1138,1,0,0,0,1138,1139,3,220,110,0,1139,227,1,0,0,0,1140,
  	1141,5,42,0,0,1141,229,1,0,0,0,1142,1147,3,232,116,0,1143,1144,3,254,
  	127,0,1144,1145,5,100,0,0,1145,1147,1,0,0,0,1146,1142,1,0,0,0,1146,1143,
  	1,0,0,0,1147,1148,1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,231,
  	1,0,0,0,1150,1155,3,234,117,0,1151,1155,3,206,103,0,1152,1155,3,118,59,
  	0,1153,1155,3,122,61,0,1154,1150,1,0,0,0,1154,1151,1,0,0,0,1154,1152,
  	1,0,0,0,1154,1153,1,0,0,0,1155,233,1,0,0,0,1156,1158,3,254,127,0,1157,
  	1156,1,0,0,0,1157,1158,1,0,0,0,1158,1160,1,0,0,0,1159,1161,5,36,0,0,1160,
  	1159,1,0,0,0,1160,1161,1,0,0,0,1161,1163,1,0,0,0,1162,1164,3,126,63,0,
  	1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1167,1,0,0,0,1165,1168,3,236,
  	118,0,1166,1168,3,78,39,0,1167,1165,1,0,0,0,1167,1166,1,0,0,0,1167,1168,
  	1,0,0,0,1168,1169,1,0,0,0,1169,1170,5,102,0,0,1170,235,1,0,0,0,1171,1176,
  	3,238,119,0,1172,1173,5,98,0,0,1173,1175,3,238,119,0,1174,1172,1,0,0,
  	0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,237,1,0,
  	0,0,1178,1176,1,0,0,0,1179,1186,3,188,94,0,1180,1182,3,240,120,0,1181,
  	1180,1,0,0,0,1181,1182,1,0,0,0,1182,1187,1,0,0,0,1183,1185,3,212,106,
  	0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,1181,1,0,
  	0,0,1186,1184,1,0,0,0,1187,1195,1,0,0,0,1188,1190,5,104,0,0,1189,1188,
  	1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1192,5,100,0,0,1192,
  	1195,3,84,42,0,1193,1195,5,104,0,0,1194,1179,1,0,0,0,1194,1189,1,0,0,
  	0,1194,1193,1,0,0,0,1195,239,1,0,0,0,1196,1198,3,242,121,0,1197,1196,
  	1,0,0,0,1198,1199,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,241,
  	1,0,0,0,1201,1202,7,14,0,0,1202,243,1,0,0,0,1203,1204,5,100,0,0,1204,
  	1205,3,246,123,0,1205,245,1,0,0,0,1206,1211,3,248,124,0,1207,1208,5,98,
  	0,0,1208,1210,3,248,124,0,1209,1207,1,0,0,0,1210,1213,1,0,0,0,1211,1209,
  	1,0,0,0,1211,1212,1,0,0,0,1212,247,1,0,0,0,1213,1211,1,0,0,0,1214,1227,
  	3,252,126,0,1215,1217,5,58,0,0,1216,1218,3,254,127,0,1217,1216,1,0,0,
  	0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,1219,1227,3,252,126,0,1220,1222,
  	3,254,127,0,1221,1223,5,58,0,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,
  	1224,1,0,0,0,1224,1225,3,252,126,0,1225,1227,1,0,0,0,1226,1214,1,0,0,
  	0,1226,1215,1,0,0,0,1226,1220,1,0,0,0,1227,249,1,0,0,0,1228,1230,3,18,
  	9,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1234,3,
  	220,110,0,1232,1234,3,146,73,0,1233,1229,1,0,0,0,1233,1232,1,0,0,0,1234,
  	251,1,0,0,0,1235,1236,3,250,125,0,1236,253,1,0,0,0,1237,1238,7,15,0,0,
  	1238,255,1,0,0,0,1239,1240,5,48,0,0,1240,1241,3,260,130,0,1241,257,1,
  	0,0,0,1242,1246,5,48,0,0,1243,1244,5,4,0,0,1244,1247,5,104,0,0,1245,1247,
  	5,112,0,0,1246,1243,1,0,0,0,1246,1245,1,0,0,0,1247,259,1,0,0,0,1248,1289,
  	1,0,0,0,1249,1289,5,67,0,0,1250,1289,5,68,0,0,1251,1289,5,69,0,0,1252,
  	1289,5,70,0,0,1253,1289,5,71,0,0,1254,1289,5,72,0,0,1255,1289,5,73,0,
  	0,1256,1289,5,74,0,0,1257,1289,5,75,0,0,1258,1289,5,76,0,0,1259,1289,
  	5,77,0,0,1260,1289,5,79,0,0,1261,1289,5,78,0,0,1262,1289,5,93,0,0,1263,
  	1289,5,80,0,0,1264,1289,5,81,0,0,1265,1289,5,82,0,0,1266,1289,5,84,0,
  	0,1267,1289,5,85,0,0,1268,1289,5,86,0,0,1269,1289,5,87,0,0,1270,1271,
  	5,78,0,0,1271,1289,5,78,0,0,1272,1273,5,79,0,0,1273,1289,5,79,0,0,1274,
  	1289,5,89,0,0,1275,1289,5,88,0,0,1276,1289,5,90,0,0,1277,1289,5,91,0,
  	0,1278,1289,5,92,0,0,1279,1289,5,94,0,0,1280,1289,5,95,0,0,1281,1289,
  	5,96,0,0,1282,1289,5,97,0,0,1283,1289,5,98,0,0,1284,1285,5,61,0,0,1285,
  	1289,5,62,0,0,1286,1287,5,63,0,0,1287,1289,5,64,0,0,1288,1248,1,0,0,0,
  	1288,1249,1,0,0,0,1288,1250,1,0,0,0,1288,1251,1,0,0,0,1288,1252,1,0,0,
  	0,1288,1253,1,0,0,0,1288,1254,1,0,0,0,1288,1255,1,0,0,0,1288,1256,1,0,
  	0,0,1288,1257,1,0,0,0,1288,1258,1,0,0,0,1288,1259,1,0,0,0,1288,1260,1,
  	0,0,0,1288,1261,1,0,0,0,1288,1262,1,0,0,0,1288,1263,1,0,0,0,1288,1264,
  	1,0,0,0,1288,1265,1,0,0,0,1288,1266,1,0,0,0,1288,1267,1,0,0,0,1288,1268,
  	1,0,0,0,1288,1269,1,0,0,0,1288,1270,1,0,0,0,1288,1272,1,0,0,0,1288,1274,
  	1,0,0,0,1288,1275,1,0,0,0,1288,1276,1,0,0,0,1288,1277,1,0,0,0,1288,1278,
  	1,0,0,0,1288,1279,1,0,0,0,1288,1280,1,0,0,0,1288,1281,1,0,0,0,1288,1282,
  	1,0,0,0,1288,1283,1,0,0,0,1288,1284,1,0,0,0,1288,1286,1,0,0,0,1289,261,
  	1,0,0,0,1290,1298,5,1,0,0,1291,1298,5,2,0,0,1292,1298,5,3,0,0,1293,1298,
  	5,4,0,0,1294,1298,3,8,4,0,1295,1298,5,5,0,0,1296,1298,5,47,0,0,1297,1290,
  	1,0,0,0,1297,1291,1,0,0,0,1297,1292,1,0,0,0,1297,1293,1,0,0,0,1297,1294,
  	1,0,0,0,1297,1295,1,0,0,0,1297,1296,1,0,0,0,1298,263,1,0,0,0,158,265,
  	275,281,285,291,303,311,320,324,332,334,343,352,357,363,371,373,382,387,
  	390,394,397,404,413,420,424,437,441,447,454,461,465,467,473,478,489,495,
  	502,512,516,527,534,542,551,558,565,573,581,589,597,605,613,622,629,638,
  	650,652,658,664,670,677,686,694,702,704,724,728,734,739,743,750,757,761,
  	770,777,783,791,795,803,808,817,824,829,834,837,857,864,869,875,879,883,
  	886,894,896,902,905,908,913,927,933,939,946,950,963,970,987,989,996,1001,
  	1013,1016,1020,1025,1029,1032,1047,1052,1056,1059,1062,1065,1069,1078,
  	1085,1090,1094,1101,1105,1110,1112,1121,1128,1130,1133,1136,1146,1148,
  	1154,1157,1160,1163,1167,1176,1181,1184,1186,1189,1194,1199,1211,1217,
  	1222,1226,1229,1233,1246,1288,1297
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  angelscriptparserParserStaticData = std::move(staticData);
}

}

AngelscriptParser::AngelscriptParser(TokenStream *input) : AngelscriptParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

AngelscriptParser::AngelscriptParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  AngelscriptParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *angelscriptparserParserStaticData->atn, angelscriptparserParserStaticData->decisionToDFA, angelscriptparserParserStaticData->sharedContextCache, options);
}

AngelscriptParser::~AngelscriptParser() {
  delete _interpreter;
}

const atn::ATN& AngelscriptParser::getATN() const {
  return *angelscriptparserParserStaticData->atn;
}

std::string AngelscriptParser::getGrammarFileName() const {
  return "AngelscriptParser.g4";
}

const std::vector<std::string>& AngelscriptParser::getRuleNames() const {
  return angelscriptparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& AngelscriptParser::getVocabulary() const {
  return angelscriptparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AngelscriptParser::getSerializedATN() const {
  return angelscriptparserParserStaticData->serializedATN;
}


//----------------- ScriptContext ------------------------------------------------------------------

AngelscriptParser::ScriptContext::ScriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ScriptContext::EOF() {
  return getToken(AngelscriptParser::EOF, 0);
}

AngelscriptParser::DeclarationseqContext* AngelscriptParser::ScriptContext::declarationseq() {
  return getRuleContext<AngelscriptParser::DeclarationseqContext>(0);
}


size_t AngelscriptParser::ScriptContext::getRuleIndex() const {
  return AngelscriptParser::RuleScript;
}


std::any AngelscriptParser::ScriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitScript(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ScriptContext* AngelscriptParser::script() {
  ScriptContext *_localctx = _tracker.createInstance<ScriptContext>(_ctx, getState());
  enterRule(_localctx, 0, AngelscriptParser::RuleScript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5828288461429277954) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 190589174727) != 0)) {
      setState(264);
      declarationseq();
    }
    setState(267);
    match(AngelscriptParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleImportContext ------------------------------------------------------------------

AngelscriptParser::ModuleImportContext::ModuleImportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ModuleImportContext::Import() {
  return getToken(AngelscriptParser::Import, 0);
}

std::vector<tree::TerminalNode *> AngelscriptParser::ModuleImportContext::Identifier() {
  return getTokens(AngelscriptParser::Identifier);
}

tree::TerminalNode* AngelscriptParser::ModuleImportContext::Identifier(size_t i) {
  return getToken(AngelscriptParser::Identifier, i);
}

tree::TerminalNode* AngelscriptParser::ModuleImportContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}

std::vector<tree::TerminalNode *> AngelscriptParser::ModuleImportContext::Dot() {
  return getTokens(AngelscriptParser::Dot);
}

tree::TerminalNode* AngelscriptParser::ModuleImportContext::Dot(size_t i) {
  return getToken(AngelscriptParser::Dot, i);
}

AngelscriptParser::DeclaratorContext* AngelscriptParser::ModuleImportContext::declarator() {
  return getRuleContext<AngelscriptParser::DeclaratorContext>(0);
}

tree::TerminalNode* AngelscriptParser::ModuleImportContext::From() {
  return getToken(AngelscriptParser::From, 0);
}

tree::TerminalNode* AngelscriptParser::ModuleImportContext::StringLiteral() {
  return getToken(AngelscriptParser::StringLiteral, 0);
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::ModuleImportContext::declSpecifierSeq() {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(0);
}

AngelscriptParser::PostFuncSpecifierSeqContext* AngelscriptParser::ModuleImportContext::postFuncSpecifierSeq() {
  return getRuleContext<AngelscriptParser::PostFuncSpecifierSeqContext>(0);
}


size_t AngelscriptParser::ModuleImportContext::getRuleIndex() const {
  return AngelscriptParser::RuleModuleImport;
}


std::any AngelscriptParser::ModuleImportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitModuleImport(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ModuleImportContext* AngelscriptParser::moduleImport() {
  ModuleImportContext *_localctx = _tracker.createInstance<ModuleImportContext>(_ctx, getState());
  enterRule(_localctx, 2, AngelscriptParser::RuleModuleImport);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(291);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(269);
      match(AngelscriptParser::Import);
      setState(270);
      match(AngelscriptParser::Identifier);
      setState(275);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AngelscriptParser::Dot) {
        setState(271);
        match(AngelscriptParser::Dot);
        setState(272);
        match(AngelscriptParser::Identifier);
        setState(277);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(278);
      match(AngelscriptParser::Semi);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(279);
      match(AngelscriptParser::Import);
      setState(281);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
      case 1: {
        setState(280);
        declSpecifierSeq();
        break;
      }

      default:
        break;
      }
      setState(283);
      declarator();
      setState(285);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 567347999933440) != 0)) {
        setState(284);
        postFuncSpecifierSeq();
      }
      setState(287);
      match(AngelscriptParser::From);
      setState(288);
      match(AngelscriptParser::StringLiteral);
      setState(289);
      match(AngelscriptParser::Semi);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsGenericContext ------------------------------------------------------------------

AngelscriptParser::AsGenericContext::AsGenericContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::AsGenericContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::AsGenericContext::Less() {
  return getToken(AngelscriptParser::Less, 0);
}

AngelscriptParser::SimpleTypeSpecifierListContext* AngelscriptParser::AsGenericContext::simpleTypeSpecifierList() {
  return getRuleContext<AngelscriptParser::SimpleTypeSpecifierListContext>(0);
}

tree::TerminalNode* AngelscriptParser::AsGenericContext::Greater() {
  return getToken(AngelscriptParser::Greater, 0);
}


size_t AngelscriptParser::AsGenericContext::getRuleIndex() const {
  return AngelscriptParser::RuleAsGeneric;
}


std::any AngelscriptParser::AsGenericContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAsGeneric(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AsGenericContext* AngelscriptParser::asGeneric() {
  AsGenericContext *_localctx = _tracker.createInstance<AsGenericContext>(_ctx, getState());
  enterRule(_localctx, 4, AngelscriptParser::RuleAsGeneric);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(293);
    match(AngelscriptParser::Identifier);
    setState(294);
    match(AngelscriptParser::Less);
    setState(295);
    simpleTypeSpecifierList();
    setState(296);
    match(AngelscriptParser::Greater);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeSpecifierListContext ------------------------------------------------------------------

AngelscriptParser::SimpleTypeSpecifierListContext::SimpleTypeSpecifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::DeclSpecifierSeqContext *> AngelscriptParser::SimpleTypeSpecifierListContext::declSpecifierSeq() {
  return getRuleContexts<AngelscriptParser::DeclSpecifierSeqContext>();
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::SimpleTypeSpecifierListContext::declSpecifierSeq(size_t i) {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::SimpleTypeSpecifierListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::SimpleTypeSpecifierListContext::getRuleIndex() const {
  return AngelscriptParser::RuleSimpleTypeSpecifierList;
}


std::any AngelscriptParser::SimpleTypeSpecifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitSimpleTypeSpecifierList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::SimpleTypeSpecifierListContext* AngelscriptParser::simpleTypeSpecifierList() {
  SimpleTypeSpecifierListContext *_localctx = _tracker.createInstance<SimpleTypeSpecifierListContext>(_ctx, getState());
  enterRule(_localctx, 6, AngelscriptParser::RuleSimpleTypeSpecifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(298);
    declSpecifierSeq();
    setState(303);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Comma) {
      setState(299);
      match(AngelscriptParser::Comma);
      setState(300);
      declSpecifierSeq();
      setState(305);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

AngelscriptParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::BooleanLiteralContext::False_() {
  return getToken(AngelscriptParser::False_, 0);
}

tree::TerminalNode* AngelscriptParser::BooleanLiteralContext::True_() {
  return getToken(AngelscriptParser::True_, 0);
}


size_t AngelscriptParser::BooleanLiteralContext::getRuleIndex() const {
  return AngelscriptParser::RuleBooleanLiteral;
}


std::any AngelscriptParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BooleanLiteralContext* AngelscriptParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 8, AngelscriptParser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(306);
    _la = _input->LA(1);
    if (!(_la == AngelscriptParser::False_

    || _la == AngelscriptParser::True_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

AngelscriptParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::LiteralContext *> AngelscriptParser::PrimaryExpressionContext::literal() {
  return getRuleContexts<AngelscriptParser::LiteralContext>();
}

AngelscriptParser::LiteralContext* AngelscriptParser::PrimaryExpressionContext::literal(size_t i) {
  return getRuleContext<AngelscriptParser::LiteralContext>(i);
}

tree::TerminalNode* AngelscriptParser::PrimaryExpressionContext::This() {
  return getToken(AngelscriptParser::This, 0);
}

tree::TerminalNode* AngelscriptParser::PrimaryExpressionContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::PrimaryExpressionContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::PrimaryExpressionContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

AngelscriptParser::IdExpressionContext* AngelscriptParser::PrimaryExpressionContext::idExpression() {
  return getRuleContext<AngelscriptParser::IdExpressionContext>(0);
}

AngelscriptParser::LambdaExpressionContext* AngelscriptParser::PrimaryExpressionContext::lambdaExpression() {
  return getRuleContext<AngelscriptParser::LambdaExpressionContext>(0);
}


size_t AngelscriptParser::PrimaryExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RulePrimaryExpression;
}


std::any AngelscriptParser::PrimaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::PrimaryExpressionContext* AngelscriptParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 10, AngelscriptParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(320);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(309); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(308);
                literal();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(311); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(313);
      match(AngelscriptParser::This);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(314);
      match(AngelscriptParser::LeftParen);
      setState(315);
      expression();
      setState(316);
      match(AngelscriptParser::RightParen);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(318);
      idExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(319);
      lambdaExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdExpressionContext ------------------------------------------------------------------

AngelscriptParser::IdExpressionContext::IdExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::UnqualifiedIdContext* AngelscriptParser::IdExpressionContext::unqualifiedId() {
  return getRuleContext<AngelscriptParser::UnqualifiedIdContext>(0);
}

AngelscriptParser::QualifiedIdContext* AngelscriptParser::IdExpressionContext::qualifiedId() {
  return getRuleContext<AngelscriptParser::QualifiedIdContext>(0);
}


size_t AngelscriptParser::IdExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleIdExpression;
}


std::any AngelscriptParser::IdExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitIdExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::IdExpressionContext* AngelscriptParser::idExpression() {
  IdExpressionContext *_localctx = _tracker.createInstance<IdExpressionContext>(_ctx, getState());
  enterRule(_localctx, 12, AngelscriptParser::RuleIdExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(324);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(322);
      unqualifiedId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(323);
      qualifiedId();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnqualifiedIdContext ------------------------------------------------------------------

AngelscriptParser::UnqualifiedIdContext::UnqualifiedIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::UnqualifiedIdContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

AngelscriptParser::OperatorFunctionIdContext* AngelscriptParser::UnqualifiedIdContext::operatorFunctionId() {
  return getRuleContext<AngelscriptParser::OperatorFunctionIdContext>(0);
}

AngelscriptParser::LiteralOperatorIdContext* AngelscriptParser::UnqualifiedIdContext::literalOperatorId() {
  return getRuleContext<AngelscriptParser::LiteralOperatorIdContext>(0);
}

tree::TerminalNode* AngelscriptParser::UnqualifiedIdContext::Tilde() {
  return getToken(AngelscriptParser::Tilde, 0);
}

AngelscriptParser::ClassNameContext* AngelscriptParser::UnqualifiedIdContext::className() {
  return getRuleContext<AngelscriptParser::ClassNameContext>(0);
}

AngelscriptParser::DecltypeSpecifierContext* AngelscriptParser::UnqualifiedIdContext::decltypeSpecifier() {
  return getRuleContext<AngelscriptParser::DecltypeSpecifierContext>(0);
}


size_t AngelscriptParser::UnqualifiedIdContext::getRuleIndex() const {
  return AngelscriptParser::RuleUnqualifiedId;
}


std::any AngelscriptParser::UnqualifiedIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitUnqualifiedId(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::UnqualifiedIdContext* AngelscriptParser::unqualifiedId() {
  UnqualifiedIdContext *_localctx = _tracker.createInstance<UnqualifiedIdContext>(_ctx, getState());
  enterRule(_localctx, 14, AngelscriptParser::RuleUnqualifiedId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(334);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(326);
      match(AngelscriptParser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(327);
      operatorFunctionId();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(328);
      literalOperatorId();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(329);
      match(AngelscriptParser::Tilde);
      setState(332);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case AngelscriptParser::Identifier: {
          setState(330);
          className();
          break;
        }

        case AngelscriptParser::LeftParen: {
          setState(331);
          decltypeSpecifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedIdContext ------------------------------------------------------------------

AngelscriptParser::QualifiedIdContext::QualifiedIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::QualifiedIdContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}

AngelscriptParser::UnqualifiedIdContext* AngelscriptParser::QualifiedIdContext::unqualifiedId() {
  return getRuleContext<AngelscriptParser::UnqualifiedIdContext>(0);
}


size_t AngelscriptParser::QualifiedIdContext::getRuleIndex() const {
  return AngelscriptParser::RuleQualifiedId;
}


std::any AngelscriptParser::QualifiedIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedId(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::QualifiedIdContext* AngelscriptParser::qualifiedId() {
  QualifiedIdContext *_localctx = _tracker.createInstance<QualifiedIdContext>(_ctx, getState());
  enterRule(_localctx, 16, AngelscriptParser::RuleQualifiedId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(336);
    nestedNameSpecifier(0);
    setState(337);
    unqualifiedId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedNameSpecifierContext ------------------------------------------------------------------

AngelscriptParser::NestedNameSpecifierContext::NestedNameSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::NestedNameSpecifierContext::Doublecolon() {
  return getToken(AngelscriptParser::Doublecolon, 0);
}

AngelscriptParser::TheTypeNameContext* AngelscriptParser::NestedNameSpecifierContext::theTypeName() {
  return getRuleContext<AngelscriptParser::TheTypeNameContext>(0);
}

AngelscriptParser::NamespaceNameContext* AngelscriptParser::NestedNameSpecifierContext::namespaceName() {
  return getRuleContext<AngelscriptParser::NamespaceNameContext>(0);
}

AngelscriptParser::DecltypeSpecifierContext* AngelscriptParser::NestedNameSpecifierContext::decltypeSpecifier() {
  return getRuleContext<AngelscriptParser::DecltypeSpecifierContext>(0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::NestedNameSpecifierContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::NestedNameSpecifierContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::NestedNameSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleNestedNameSpecifier;
}


std::any AngelscriptParser::NestedNameSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitNestedNameSpecifier(this);
  else
    return visitor->visitChildren(this);
}


AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::nestedNameSpecifier() {
   return nestedNameSpecifier(0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::nestedNameSpecifier(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AngelscriptParser::NestedNameSpecifierContext *_localctx = _tracker.createInstance<NestedNameSpecifierContext>(_ctx, parentState);
  AngelscriptParser::NestedNameSpecifierContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 18;
  enterRecursionRule(_localctx, 18, AngelscriptParser::RuleNestedNameSpecifier, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(343);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(340);
      theTypeName();
      break;
    }

    case 2: {
      setState(341);
      namespaceName();
      break;
    }

    case 3: {
      setState(342);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
    setState(345);
    match(AngelscriptParser::Doublecolon);
    _ctx->stop = _input->LT(-1);
    setState(352);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NestedNameSpecifierContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleNestedNameSpecifier);
        setState(347);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(348);
        match(AngelscriptParser::Identifier);
        setState(349);
        match(AngelscriptParser::Doublecolon); 
      }
      setState(354);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

AngelscriptParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::LambdaIntroducerContext* AngelscriptParser::LambdaExpressionContext::lambdaIntroducer() {
  return getRuleContext<AngelscriptParser::LambdaIntroducerContext>(0);
}

AngelscriptParser::CompoundStatementContext* AngelscriptParser::LambdaExpressionContext::compoundStatement() {
  return getRuleContext<AngelscriptParser::CompoundStatementContext>(0);
}

AngelscriptParser::LambdaDeclaratorContext* AngelscriptParser::LambdaExpressionContext::lambdaDeclarator() {
  return getRuleContext<AngelscriptParser::LambdaDeclaratorContext>(0);
}


size_t AngelscriptParser::LambdaExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleLambdaExpression;
}


std::any AngelscriptParser::LambdaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLambdaExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LambdaExpressionContext* AngelscriptParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 20, AngelscriptParser::RuleLambdaExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(355);
    lambdaIntroducer();
    setState(357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::LeftParen) {
      setState(356);
      lambdaDeclarator();
    }
    setState(359);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaIntroducerContext ------------------------------------------------------------------

AngelscriptParser::LambdaIntroducerContext::LambdaIntroducerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::LambdaIntroducerContext::LeftBracket() {
  return getToken(AngelscriptParser::LeftBracket, 0);
}

tree::TerminalNode* AngelscriptParser::LambdaIntroducerContext::RightBracket() {
  return getToken(AngelscriptParser::RightBracket, 0);
}

AngelscriptParser::LambdaCaptureContext* AngelscriptParser::LambdaIntroducerContext::lambdaCapture() {
  return getRuleContext<AngelscriptParser::LambdaCaptureContext>(0);
}


size_t AngelscriptParser::LambdaIntroducerContext::getRuleIndex() const {
  return AngelscriptParser::RuleLambdaIntroducer;
}


std::any AngelscriptParser::LambdaIntroducerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLambdaIntroducer(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LambdaIntroducerContext* AngelscriptParser::lambdaIntroducer() {
  LambdaIntroducerContext *_localctx = _tracker.createInstance<LambdaIntroducerContext>(_ctx, getState());
  enterRule(_localctx, 22, AngelscriptParser::RuleLambdaIntroducer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(361);
    match(AngelscriptParser::LeftBracket);
    setState(363);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 56) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 56)) & 281474978938881) != 0)) {
      setState(362);
      lambdaCapture();
    }
    setState(365);
    match(AngelscriptParser::RightBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaCaptureContext ------------------------------------------------------------------

AngelscriptParser::LambdaCaptureContext::LambdaCaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::CaptureListContext* AngelscriptParser::LambdaCaptureContext::captureList() {
  return getRuleContext<AngelscriptParser::CaptureListContext>(0);
}

AngelscriptParser::CaptureDefaultContext* AngelscriptParser::LambdaCaptureContext::captureDefault() {
  return getRuleContext<AngelscriptParser::CaptureDefaultContext>(0);
}

tree::TerminalNode* AngelscriptParser::LambdaCaptureContext::Comma() {
  return getToken(AngelscriptParser::Comma, 0);
}


size_t AngelscriptParser::LambdaCaptureContext::getRuleIndex() const {
  return AngelscriptParser::RuleLambdaCapture;
}


std::any AngelscriptParser::LambdaCaptureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLambdaCapture(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LambdaCaptureContext* AngelscriptParser::lambdaCapture() {
  LambdaCaptureContext *_localctx = _tracker.createInstance<LambdaCaptureContext>(_ctx, getState());
  enterRule(_localctx, 24, AngelscriptParser::RuleLambdaCapture);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(373);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(367);
      captureList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(368);
      captureDefault();
      setState(371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AngelscriptParser::Comma) {
        setState(369);
        match(AngelscriptParser::Comma);
        setState(370);
        captureList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaptureDefaultContext ------------------------------------------------------------------

AngelscriptParser::CaptureDefaultContext::CaptureDefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::CaptureDefaultContext::And() {
  return getToken(AngelscriptParser::And, 0);
}

tree::TerminalNode* AngelscriptParser::CaptureDefaultContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}


size_t AngelscriptParser::CaptureDefaultContext::getRuleIndex() const {
  return AngelscriptParser::RuleCaptureDefault;
}


std::any AngelscriptParser::CaptureDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitCaptureDefault(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::CaptureDefaultContext* AngelscriptParser::captureDefault() {
  CaptureDefaultContext *_localctx = _tracker.createInstance<CaptureDefaultContext>(_ctx, getState());
  enterRule(_localctx, 26, AngelscriptParser::RuleCaptureDefault);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(375);
    _la = _input->LA(1);
    if (!(_la == AngelscriptParser::And

    || _la == AngelscriptParser::Assign)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaptureListContext ------------------------------------------------------------------

AngelscriptParser::CaptureListContext::CaptureListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::CaptureContext *> AngelscriptParser::CaptureListContext::capture() {
  return getRuleContexts<AngelscriptParser::CaptureContext>();
}

AngelscriptParser::CaptureContext* AngelscriptParser::CaptureListContext::capture(size_t i) {
  return getRuleContext<AngelscriptParser::CaptureContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::CaptureListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::CaptureListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::CaptureListContext::getRuleIndex() const {
  return AngelscriptParser::RuleCaptureList;
}


std::any AngelscriptParser::CaptureListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitCaptureList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::CaptureListContext* AngelscriptParser::captureList() {
  CaptureListContext *_localctx = _tracker.createInstance<CaptureListContext>(_ctx, getState());
  enterRule(_localctx, 28, AngelscriptParser::RuleCaptureList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(377);
    capture();
    setState(382);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Comma) {
      setState(378);
      match(AngelscriptParser::Comma);
      setState(379);
      capture();
      setState(384);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaptureContext ------------------------------------------------------------------

AngelscriptParser::CaptureContext::CaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::SimpleCaptureContext* AngelscriptParser::CaptureContext::simpleCapture() {
  return getRuleContext<AngelscriptParser::SimpleCaptureContext>(0);
}

AngelscriptParser::InitcaptureContext* AngelscriptParser::CaptureContext::initcapture() {
  return getRuleContext<AngelscriptParser::InitcaptureContext>(0);
}


size_t AngelscriptParser::CaptureContext::getRuleIndex() const {
  return AngelscriptParser::RuleCapture;
}


std::any AngelscriptParser::CaptureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitCapture(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::CaptureContext* AngelscriptParser::capture() {
  CaptureContext *_localctx = _tracker.createInstance<CaptureContext>(_ctx, getState());
  enterRule(_localctx, 30, AngelscriptParser::RuleCapture);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(387);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(385);
      simpleCapture();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(386);
      initcapture();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleCaptureContext ------------------------------------------------------------------

AngelscriptParser::SimpleCaptureContext::SimpleCaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::SimpleCaptureContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleCaptureContext::And() {
  return getToken(AngelscriptParser::And, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleCaptureContext::This() {
  return getToken(AngelscriptParser::This, 0);
}


size_t AngelscriptParser::SimpleCaptureContext::getRuleIndex() const {
  return AngelscriptParser::RuleSimpleCapture;
}


std::any AngelscriptParser::SimpleCaptureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitSimpleCapture(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::SimpleCaptureContext* AngelscriptParser::simpleCapture() {
  SimpleCaptureContext *_localctx = _tracker.createInstance<SimpleCaptureContext>(_ctx, getState());
  enterRule(_localctx, 32, AngelscriptParser::RuleSimpleCapture);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(394);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::And:
      case AngelscriptParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(390);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AngelscriptParser::And) {
          setState(389);
          match(AngelscriptParser::And);
        }
        setState(392);
        match(AngelscriptParser::Identifier);
        break;
      }

      case AngelscriptParser::This: {
        enterOuterAlt(_localctx, 2);
        setState(393);
        match(AngelscriptParser::This);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitcaptureContext ------------------------------------------------------------------

AngelscriptParser::InitcaptureContext::InitcaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::InitcaptureContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

AngelscriptParser::InitializerContext* AngelscriptParser::InitcaptureContext::initializer() {
  return getRuleContext<AngelscriptParser::InitializerContext>(0);
}

tree::TerminalNode* AngelscriptParser::InitcaptureContext::And() {
  return getToken(AngelscriptParser::And, 0);
}


size_t AngelscriptParser::InitcaptureContext::getRuleIndex() const {
  return AngelscriptParser::RuleInitcapture;
}


std::any AngelscriptParser::InitcaptureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitInitcapture(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::InitcaptureContext* AngelscriptParser::initcapture() {
  InitcaptureContext *_localctx = _tracker.createInstance<InitcaptureContext>(_ctx, getState());
  enterRule(_localctx, 34, AngelscriptParser::RuleInitcapture);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::And) {
      setState(396);
      match(AngelscriptParser::And);
    }
    setState(399);
    match(AngelscriptParser::Identifier);
    setState(400);
    initializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaDeclaratorContext ------------------------------------------------------------------

AngelscriptParser::LambdaDeclaratorContext::LambdaDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::LambdaDeclaratorContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

tree::TerminalNode* AngelscriptParser::LambdaDeclaratorContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

AngelscriptParser::ParameterDeclarationClauseContext* AngelscriptParser::LambdaDeclaratorContext::parameterDeclarationClause() {
  return getRuleContext<AngelscriptParser::ParameterDeclarationClauseContext>(0);
}


size_t AngelscriptParser::LambdaDeclaratorContext::getRuleIndex() const {
  return AngelscriptParser::RuleLambdaDeclarator;
}


std::any AngelscriptParser::LambdaDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLambdaDeclarator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LambdaDeclaratorContext* AngelscriptParser::lambdaDeclarator() {
  LambdaDeclaratorContext *_localctx = _tracker.createInstance<LambdaDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 36, AngelscriptParser::RuleLambdaDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(402);
    match(AngelscriptParser::LeftParen);
    setState(404);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3170534713731285504) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 2415919105) != 0)) {
      setState(403);
      parameterDeclarationClause();
    }
    setState(406);
    match(AngelscriptParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

AngelscriptParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::PrimaryExpressionContext* AngelscriptParser::PostfixExpressionContext::primaryExpression() {
  return getRuleContext<AngelscriptParser::PrimaryExpressionContext>(0);
}

AngelscriptParser::AssertSpecifierContext* AngelscriptParser::PostfixExpressionContext::assertSpecifier() {
  return getRuleContext<AngelscriptParser::AssertSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

AngelscriptParser::ExpressionListContext* AngelscriptParser::PostfixExpressionContext::expressionList() {
  return getRuleContext<AngelscriptParser::ExpressionListContext>(0);
}

AngelscriptParser::SimpleTypeSpecifierContext* AngelscriptParser::PostfixExpressionContext::simpleTypeSpecifier() {
  return getRuleContext<AngelscriptParser::SimpleTypeSpecifierContext>(0);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::PostfixExpressionContext::bracedInitList() {
  return getRuleContext<AngelscriptParser::BracedInitListContext>(0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::Cast() {
  return getToken(AngelscriptParser::Cast, 0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::Less() {
  return getToken(AngelscriptParser::Less, 0);
}

AngelscriptParser::TheTypeIdContext* AngelscriptParser::PostfixExpressionContext::theTypeId() {
  return getRuleContext<AngelscriptParser::TheTypeIdContext>(0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::Greater() {
  return getToken(AngelscriptParser::Greater, 0);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::PostfixExpressionContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

AngelscriptParser::PostfixExpressionContext* AngelscriptParser::PostfixExpressionContext::postfixExpression() {
  return getRuleContext<AngelscriptParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::LeftBracket() {
  return getToken(AngelscriptParser::LeftBracket, 0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::RightBracket() {
  return getToken(AngelscriptParser::RightBracket, 0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::Dot() {
  return getToken(AngelscriptParser::Dot, 0);
}

AngelscriptParser::IdExpressionContext* AngelscriptParser::PostfixExpressionContext::idExpression() {
  return getRuleContext<AngelscriptParser::IdExpressionContext>(0);
}

AngelscriptParser::PseudoDestructorNameContext* AngelscriptParser::PostfixExpressionContext::pseudoDestructorName() {
  return getRuleContext<AngelscriptParser::PseudoDestructorNameContext>(0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::PlusPlus() {
  return getToken(AngelscriptParser::PlusPlus, 0);
}

tree::TerminalNode* AngelscriptParser::PostfixExpressionContext::MinusMinus() {
  return getToken(AngelscriptParser::MinusMinus, 0);
}


size_t AngelscriptParser::PostfixExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RulePostfixExpression;
}


std::any AngelscriptParser::PostfixExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitPostfixExpression(this);
  else
    return visitor->visitChildren(this);
}


AngelscriptParser::PostfixExpressionContext* AngelscriptParser::postfixExpression() {
   return postfixExpression(0);
}

AngelscriptParser::PostfixExpressionContext* AngelscriptParser::postfixExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AngelscriptParser::PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, parentState);
  AngelscriptParser::PostfixExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 38;
  enterRecursionRule(_localctx, 38, AngelscriptParser::RulePostfixExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(441);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(409);
      primaryExpression();
      break;
    }

    case 2: {
      setState(410);
      assertSpecifier();
      setState(411);
      match(AngelscriptParser::LeftParen);
      setState(413);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 624917745437) != 0)) {
        setState(412);
        expressionList();
      }
      setState(415);
      match(AngelscriptParser::RightParen);
      break;
    }

    case 3: {
      setState(417);
      simpleTypeSpecifier();
      setState(424);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case AngelscriptParser::LeftParen: {
          setState(418);
          match(AngelscriptParser::LeftParen);
          setState(420);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 624917745437) != 0)) {
            setState(419);
            expressionList();
          }
          setState(422);
          match(AngelscriptParser::RightParen);
          break;
        }

        case AngelscriptParser::LeftBracket:
        case AngelscriptParser::LeftBrace: {
          setState(423);
          bracedInitList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      setState(426);
      match(AngelscriptParser::Cast);
      setState(427);
      match(AngelscriptParser::Less);
      setState(428);
      theTypeId();
      setState(429);
      match(AngelscriptParser::Greater);
      setState(430);
      match(AngelscriptParser::LeftParen);
      setState(431);
      expression();
      setState(432);
      match(AngelscriptParser::RightParen);
      break;
    }

    case 5: {
      setState(434);
      match(AngelscriptParser::LeftParen);
      setState(437);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
      case 1: {
        setState(435);
        expression();
        break;
      }

      case 2: {
        setState(436);
        theTypeId();
        break;
      }

      default:
        break;
      }
      setState(439);
      match(AngelscriptParser::RightParen);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(467);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(465);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(443);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(444);
          match(AngelscriptParser::LeftBracket);
          setState(447);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
          case 1: {
            setState(445);
            expression();
            break;
          }

          case 2: {
            setState(446);
            bracedInitList();
            break;
          }

          default:
            break;
          }
          setState(449);
          match(AngelscriptParser::RightBracket);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(451);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(452);
          match(AngelscriptParser::LeftParen);
          setState(454);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & 624917745437) != 0)) {
            setState(453);
            expressionList();
          }
          setState(456);
          match(AngelscriptParser::RightParen);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(457);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(458);
          match(AngelscriptParser::Dot);
          setState(461);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
          case 1: {
            setState(459);
            idExpression();
            break;
          }

          case 2: {
            setState(460);
            pseudoDestructorName();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(463);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(464);
          _la = _input->LA(1);
          if (!(_la == AngelscriptParser::PlusPlus

          || _la == AngelscriptParser::MinusMinus)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(469);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

AngelscriptParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::InitializerListContext* AngelscriptParser::ExpressionListContext::initializerList() {
  return getRuleContext<AngelscriptParser::InitializerListContext>(0);
}


size_t AngelscriptParser::ExpressionListContext::getRuleIndex() const {
  return AngelscriptParser::RuleExpressionList;
}


std::any AngelscriptParser::ExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitExpressionList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ExpressionListContext* AngelscriptParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 40, AngelscriptParser::RuleExpressionList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    initializerList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PseudoDestructorNameContext ------------------------------------------------------------------

AngelscriptParser::PseudoDestructorNameContext::PseudoDestructorNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::PseudoDestructorNameContext::Tilde() {
  return getToken(AngelscriptParser::Tilde, 0);
}

std::vector<AngelscriptParser::TheTypeNameContext *> AngelscriptParser::PseudoDestructorNameContext::theTypeName() {
  return getRuleContexts<AngelscriptParser::TheTypeNameContext>();
}

AngelscriptParser::TheTypeNameContext* AngelscriptParser::PseudoDestructorNameContext::theTypeName(size_t i) {
  return getRuleContext<AngelscriptParser::TheTypeNameContext>(i);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::PseudoDestructorNameContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::PseudoDestructorNameContext::Doublecolon() {
  return getToken(AngelscriptParser::Doublecolon, 0);
}

AngelscriptParser::DecltypeSpecifierContext* AngelscriptParser::PseudoDestructorNameContext::decltypeSpecifier() {
  return getRuleContext<AngelscriptParser::DecltypeSpecifierContext>(0);
}


size_t AngelscriptParser::PseudoDestructorNameContext::getRuleIndex() const {
  return AngelscriptParser::RulePseudoDestructorName;
}


std::any AngelscriptParser::PseudoDestructorNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitPseudoDestructorName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::PseudoDestructorNameContext* AngelscriptParser::pseudoDestructorName() {
  PseudoDestructorNameContext *_localctx = _tracker.createInstance<PseudoDestructorNameContext>(_ctx, getState());
  enterRule(_localctx, 42, AngelscriptParser::RulePseudoDestructorName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(489);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(473);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
      case 1: {
        setState(472);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(478);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AngelscriptParser::Identifier) {
        setState(475);
        theTypeName();
        setState(476);
        match(AngelscriptParser::Doublecolon);
      }
      setState(480);
      match(AngelscriptParser::Tilde);
      setState(481);
      theTypeName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(482);
      nestedNameSpecifier(0);
      setState(483);
      match(AngelscriptParser::Doublecolon);
      setState(484);
      match(AngelscriptParser::Tilde);
      setState(485);
      theTypeName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(487);
      match(AngelscriptParser::Tilde);
      setState(488);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

AngelscriptParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::PostfixExpressionContext* AngelscriptParser::UnaryExpressionContext::postfixExpression() {
  return getRuleContext<AngelscriptParser::PostfixExpressionContext>(0);
}

AngelscriptParser::UnaryExpressionContext* AngelscriptParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<AngelscriptParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::UnaryExpressionContext::PlusPlus() {
  return getToken(AngelscriptParser::PlusPlus, 0);
}

tree::TerminalNode* AngelscriptParser::UnaryExpressionContext::MinusMinus() {
  return getToken(AngelscriptParser::MinusMinus, 0);
}

AngelscriptParser::UnaryOperatorContext* AngelscriptParser::UnaryExpressionContext::unaryOperator() {
  return getRuleContext<AngelscriptParser::UnaryOperatorContext>(0);
}

tree::TerminalNode* AngelscriptParser::UnaryExpressionContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

AngelscriptParser::TheTypeIdContext* AngelscriptParser::UnaryExpressionContext::theTypeId() {
  return getRuleContext<AngelscriptParser::TheTypeIdContext>(0);
}

tree::TerminalNode* AngelscriptParser::UnaryExpressionContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}


size_t AngelscriptParser::UnaryExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleUnaryExpression;
}


std::any AngelscriptParser::UnaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitUnaryExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::UnaryExpressionContext* AngelscriptParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 44, AngelscriptParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(491);
      postfixExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(495);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case AngelscriptParser::PlusPlus: {
          setState(492);
          match(AngelscriptParser::PlusPlus);
          break;
        }

        case AngelscriptParser::MinusMinus: {
          setState(493);
          match(AngelscriptParser::MinusMinus);
          break;
        }

        case AngelscriptParser::Plus:
        case AngelscriptParser::Minus:
        case AngelscriptParser::Star:
        case AngelscriptParser::And:
        case AngelscriptParser::Or:
        case AngelscriptParser::Tilde:
        case AngelscriptParser::Not: {
          setState(494);
          unaryOperator();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(497);
      unaryExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(498);
      match(AngelscriptParser::LeftParen);
      setState(499);
      theTypeId();
      setState(500);
      match(AngelscriptParser::RightParen);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

AngelscriptParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::UnaryOperatorContext::Or() {
  return getToken(AngelscriptParser::Or, 0);
}

tree::TerminalNode* AngelscriptParser::UnaryOperatorContext::Star() {
  return getToken(AngelscriptParser::Star, 0);
}

tree::TerminalNode* AngelscriptParser::UnaryOperatorContext::And() {
  return getToken(AngelscriptParser::And, 0);
}

tree::TerminalNode* AngelscriptParser::UnaryOperatorContext::Plus() {
  return getToken(AngelscriptParser::Plus, 0);
}

tree::TerminalNode* AngelscriptParser::UnaryOperatorContext::Tilde() {
  return getToken(AngelscriptParser::Tilde, 0);
}

tree::TerminalNode* AngelscriptParser::UnaryOperatorContext::Minus() {
  return getToken(AngelscriptParser::Minus, 0);
}

tree::TerminalNode* AngelscriptParser::UnaryOperatorContext::Not() {
  return getToken(AngelscriptParser::Not, 0);
}


size_t AngelscriptParser::UnaryOperatorContext::getRuleIndex() const {
  return AngelscriptParser::RuleUnaryOperator;
}


std::any AngelscriptParser::UnaryOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitUnaryOperator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::UnaryOperatorContext* AngelscriptParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 46, AngelscriptParser::RuleUnaryOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(504);
    _la = _input->LA(1);
    if (!(((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 967) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewPlacementContext ------------------------------------------------------------------

AngelscriptParser::NewPlacementContext::NewPlacementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::NewPlacementContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

AngelscriptParser::ExpressionListContext* AngelscriptParser::NewPlacementContext::expressionList() {
  return getRuleContext<AngelscriptParser::ExpressionListContext>(0);
}

tree::TerminalNode* AngelscriptParser::NewPlacementContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}


size_t AngelscriptParser::NewPlacementContext::getRuleIndex() const {
  return AngelscriptParser::RuleNewPlacement;
}


std::any AngelscriptParser::NewPlacementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitNewPlacement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::NewPlacementContext* AngelscriptParser::newPlacement() {
  NewPlacementContext *_localctx = _tracker.createInstance<NewPlacementContext>(_ctx, getState());
  enterRule(_localctx, 48, AngelscriptParser::RuleNewPlacement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(AngelscriptParser::LeftParen);
    setState(507);
    expressionList();
    setState(508);
    match(AngelscriptParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewInitializer_Context ------------------------------------------------------------------

AngelscriptParser::NewInitializer_Context::NewInitializer_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::NewInitializer_Context::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

tree::TerminalNode* AngelscriptParser::NewInitializer_Context::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

AngelscriptParser::ExpressionListContext* AngelscriptParser::NewInitializer_Context::expressionList() {
  return getRuleContext<AngelscriptParser::ExpressionListContext>(0);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::NewInitializer_Context::bracedInitList() {
  return getRuleContext<AngelscriptParser::BracedInitListContext>(0);
}


size_t AngelscriptParser::NewInitializer_Context::getRuleIndex() const {
  return AngelscriptParser::RuleNewInitializer_;
}


std::any AngelscriptParser::NewInitializer_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitNewInitializer_(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::NewInitializer_Context* AngelscriptParser::newInitializer_() {
  NewInitializer_Context *_localctx = _tracker.createInstance<NewInitializer_Context>(_ctx, getState());
  enterRule(_localctx, 50, AngelscriptParser::RuleNewInitializer_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(516);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::LeftParen: {
        enterOuterAlt(_localctx, 1);
        setState(510);
        match(AngelscriptParser::LeftParen);
        setState(512);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 624917745437) != 0)) {
          setState(511);
          expressionList();
        }
        setState(514);
        match(AngelscriptParser::RightParen);
        break;
      }

      case AngelscriptParser::LeftBracket:
      case AngelscriptParser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(515);
        bracedInitList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpressionContext ------------------------------------------------------------------

AngelscriptParser::CastExpressionContext::CastExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::UnaryExpressionContext* AngelscriptParser::CastExpressionContext::unaryExpression() {
  return getRuleContext<AngelscriptParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::CastExpressionContext::Cast() {
  return getToken(AngelscriptParser::Cast, 0);
}

tree::TerminalNode* AngelscriptParser::CastExpressionContext::Less() {
  return getToken(AngelscriptParser::Less, 0);
}

AngelscriptParser::TheTypeIdContext* AngelscriptParser::CastExpressionContext::theTypeId() {
  return getRuleContext<AngelscriptParser::TheTypeIdContext>(0);
}

tree::TerminalNode* AngelscriptParser::CastExpressionContext::Greater() {
  return getToken(AngelscriptParser::Greater, 0);
}

tree::TerminalNode* AngelscriptParser::CastExpressionContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

AngelscriptParser::CastExpressionContext* AngelscriptParser::CastExpressionContext::castExpression() {
  return getRuleContext<AngelscriptParser::CastExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::CastExpressionContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}


size_t AngelscriptParser::CastExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleCastExpression;
}


std::any AngelscriptParser::CastExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitCastExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::CastExpressionContext* AngelscriptParser::castExpression() {
  CastExpressionContext *_localctx = _tracker.createInstance<CastExpressionContext>(_ctx, getState());
  enterRule(_localctx, 52, AngelscriptParser::RuleCastExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(527);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(518);
      unaryExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(519);
      match(AngelscriptParser::Cast);
      setState(520);
      match(AngelscriptParser::Less);
      setState(521);
      theTypeId();
      setState(522);
      match(AngelscriptParser::Greater);
      setState(523);
      match(AngelscriptParser::LeftParen);
      setState(524);
      castExpression();
      setState(525);
      match(AngelscriptParser::RightParen);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

AngelscriptParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::CastExpressionContext *> AngelscriptParser::MultiplicativeExpressionContext::castExpression() {
  return getRuleContexts<AngelscriptParser::CastExpressionContext>();
}

AngelscriptParser::CastExpressionContext* AngelscriptParser::MultiplicativeExpressionContext::castExpression(size_t i) {
  return getRuleContext<AngelscriptParser::CastExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::MultiplicativeExpressionContext::Star() {
  return getTokens(AngelscriptParser::Star);
}

tree::TerminalNode* AngelscriptParser::MultiplicativeExpressionContext::Star(size_t i) {
  return getToken(AngelscriptParser::Star, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::MultiplicativeExpressionContext::Div() {
  return getTokens(AngelscriptParser::Div);
}

tree::TerminalNode* AngelscriptParser::MultiplicativeExpressionContext::Div(size_t i) {
  return getToken(AngelscriptParser::Div, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::MultiplicativeExpressionContext::Mod() {
  return getTokens(AngelscriptParser::Mod);
}

tree::TerminalNode* AngelscriptParser::MultiplicativeExpressionContext::Mod(size_t i) {
  return getToken(AngelscriptParser::Mod, i);
}


size_t AngelscriptParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleMultiplicativeExpression;
}


std::any AngelscriptParser::MultiplicativeExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::MultiplicativeExpressionContext* AngelscriptParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 54, AngelscriptParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(529);
    castExpression();
    setState(534);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 7) != 0)) {
      setState(530);
      _la = _input->LA(1);
      if (!(((((_la - 69) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 69)) & 7) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(531);
      castExpression();
      setState(536);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

AngelscriptParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::MultiplicativeExpressionContext *> AngelscriptParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<AngelscriptParser::MultiplicativeExpressionContext>();
}

AngelscriptParser::MultiplicativeExpressionContext* AngelscriptParser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<AngelscriptParser::MultiplicativeExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::AdditiveExpressionContext::Plus() {
  return getTokens(AngelscriptParser::Plus);
}

tree::TerminalNode* AngelscriptParser::AdditiveExpressionContext::Plus(size_t i) {
  return getToken(AngelscriptParser::Plus, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::AdditiveExpressionContext::Minus() {
  return getTokens(AngelscriptParser::Minus);
}

tree::TerminalNode* AngelscriptParser::AdditiveExpressionContext::Minus(size_t i) {
  return getToken(AngelscriptParser::Minus, i);
}


size_t AngelscriptParser::AdditiveExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleAdditiveExpression;
}


std::any AngelscriptParser::AdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AdditiveExpressionContext* AngelscriptParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 56, AngelscriptParser::RuleAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    multiplicativeExpression();
    setState(542);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Plus

    || _la == AngelscriptParser::Minus) {
      setState(538);
      _la = _input->LA(1);
      if (!(_la == AngelscriptParser::Plus

      || _la == AngelscriptParser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(539);
      multiplicativeExpression();
      setState(544);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

AngelscriptParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::AdditiveExpressionContext *> AngelscriptParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<AngelscriptParser::AdditiveExpressionContext>();
}

AngelscriptParser::AdditiveExpressionContext* AngelscriptParser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<AngelscriptParser::AdditiveExpressionContext>(i);
}

std::vector<AngelscriptParser::ShiftOperatorContext *> AngelscriptParser::ShiftExpressionContext::shiftOperator() {
  return getRuleContexts<AngelscriptParser::ShiftOperatorContext>();
}

AngelscriptParser::ShiftOperatorContext* AngelscriptParser::ShiftExpressionContext::shiftOperator(size_t i) {
  return getRuleContext<AngelscriptParser::ShiftOperatorContext>(i);
}


size_t AngelscriptParser::ShiftExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleShiftExpression;
}


std::any AngelscriptParser::ShiftExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitShiftExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ShiftExpressionContext* AngelscriptParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 58, AngelscriptParser::RuleShiftExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(545);
    additiveExpression();
    setState(551);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(546);
        shiftOperator();
        setState(547);
        additiveExpression(); 
      }
      setState(553);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftOperatorContext ------------------------------------------------------------------

AngelscriptParser::ShiftOperatorContext::ShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AngelscriptParser::ShiftOperatorContext::Greater() {
  return getTokens(AngelscriptParser::Greater);
}

tree::TerminalNode* AngelscriptParser::ShiftOperatorContext::Greater(size_t i) {
  return getToken(AngelscriptParser::Greater, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::ShiftOperatorContext::Less() {
  return getTokens(AngelscriptParser::Less);
}

tree::TerminalNode* AngelscriptParser::ShiftOperatorContext::Less(size_t i) {
  return getToken(AngelscriptParser::Less, i);
}


size_t AngelscriptParser::ShiftOperatorContext::getRuleIndex() const {
  return AngelscriptParser::RuleShiftOperator;
}


std::any AngelscriptParser::ShiftOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitShiftOperator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ShiftOperatorContext* AngelscriptParser::shiftOperator() {
  ShiftOperatorContext *_localctx = _tracker.createInstance<ShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 60, AngelscriptParser::RuleShiftOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(558);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::Greater: {
        enterOuterAlt(_localctx, 1);
        setState(554);
        match(AngelscriptParser::Greater);
        setState(555);
        match(AngelscriptParser::Greater);
        break;
      }

      case AngelscriptParser::Less: {
        enterOuterAlt(_localctx, 2);
        setState(556);
        match(AngelscriptParser::Less);
        setState(557);
        match(AngelscriptParser::Less);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

AngelscriptParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::ShiftExpressionContext *> AngelscriptParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<AngelscriptParser::ShiftExpressionContext>();
}

AngelscriptParser::ShiftExpressionContext* AngelscriptParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<AngelscriptParser::ShiftExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::RelationalExpressionContext::Less() {
  return getTokens(AngelscriptParser::Less);
}

tree::TerminalNode* AngelscriptParser::RelationalExpressionContext::Less(size_t i) {
  return getToken(AngelscriptParser::Less, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::RelationalExpressionContext::Greater() {
  return getTokens(AngelscriptParser::Greater);
}

tree::TerminalNode* AngelscriptParser::RelationalExpressionContext::Greater(size_t i) {
  return getToken(AngelscriptParser::Greater, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::RelationalExpressionContext::LessEqual() {
  return getTokens(AngelscriptParser::LessEqual);
}

tree::TerminalNode* AngelscriptParser::RelationalExpressionContext::LessEqual(size_t i) {
  return getToken(AngelscriptParser::LessEqual, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::RelationalExpressionContext::GreaterEqual() {
  return getTokens(AngelscriptParser::GreaterEqual);
}

tree::TerminalNode* AngelscriptParser::RelationalExpressionContext::GreaterEqual(size_t i) {
  return getToken(AngelscriptParser::GreaterEqual, i);
}


size_t AngelscriptParser::RelationalExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleRelationalExpression;
}


std::any AngelscriptParser::RelationalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitRelationalExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::RelationalExpressionContext* AngelscriptParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 62, AngelscriptParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(560);
    shiftExpression();
    setState(565);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 49155) != 0)) {
      setState(561);
      _la = _input->LA(1);
      if (!(((((_la - 78) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 78)) & 49155) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(562);
      shiftExpression();
      setState(567);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

AngelscriptParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::RelationalExpressionContext *> AngelscriptParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<AngelscriptParser::RelationalExpressionContext>();
}

AngelscriptParser::RelationalExpressionContext* AngelscriptParser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<AngelscriptParser::RelationalExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::EqualityExpressionContext::Equal() {
  return getTokens(AngelscriptParser::Equal);
}

tree::TerminalNode* AngelscriptParser::EqualityExpressionContext::Equal(size_t i) {
  return getToken(AngelscriptParser::Equal, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::EqualityExpressionContext::NotEqual() {
  return getTokens(AngelscriptParser::NotEqual);
}

tree::TerminalNode* AngelscriptParser::EqualityExpressionContext::NotEqual(size_t i) {
  return getToken(AngelscriptParser::NotEqual, i);
}


size_t AngelscriptParser::EqualityExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleEqualityExpression;
}


std::any AngelscriptParser::EqualityExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEqualityExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EqualityExpressionContext* AngelscriptParser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 64, AngelscriptParser::RuleEqualityExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(568);
    relationalExpression();
    setState(573);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Equal

    || _la == AngelscriptParser::NotEqual) {
      setState(569);
      _la = _input->LA(1);
      if (!(_la == AngelscriptParser::Equal

      || _la == AngelscriptParser::NotEqual)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(570);
      relationalExpression();
      setState(575);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndExpressionContext ------------------------------------------------------------------

AngelscriptParser::AndExpressionContext::AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::EqualityExpressionContext *> AngelscriptParser::AndExpressionContext::equalityExpression() {
  return getRuleContexts<AngelscriptParser::EqualityExpressionContext>();
}

AngelscriptParser::EqualityExpressionContext* AngelscriptParser::AndExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<AngelscriptParser::EqualityExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::AndExpressionContext::And() {
  return getTokens(AngelscriptParser::And);
}

tree::TerminalNode* AngelscriptParser::AndExpressionContext::And(size_t i) {
  return getToken(AngelscriptParser::And, i);
}


size_t AngelscriptParser::AndExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleAndExpression;
}


std::any AngelscriptParser::AndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAndExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AndExpressionContext* AngelscriptParser::andExpression() {
  AndExpressionContext *_localctx = _tracker.createInstance<AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 66, AngelscriptParser::RuleAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(576);
    equalityExpression();
    setState(581);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::And) {
      setState(577);
      match(AngelscriptParser::And);
      setState(578);
      equalityExpression();
      setState(583);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExclusiveOrExpressionContext ------------------------------------------------------------------

AngelscriptParser::ExclusiveOrExpressionContext::ExclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::AndExpressionContext *> AngelscriptParser::ExclusiveOrExpressionContext::andExpression() {
  return getRuleContexts<AngelscriptParser::AndExpressionContext>();
}

AngelscriptParser::AndExpressionContext* AngelscriptParser::ExclusiveOrExpressionContext::andExpression(size_t i) {
  return getRuleContext<AngelscriptParser::AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::ExclusiveOrExpressionContext::Xor() {
  return getTokens(AngelscriptParser::Xor);
}

tree::TerminalNode* AngelscriptParser::ExclusiveOrExpressionContext::Xor(size_t i) {
  return getToken(AngelscriptParser::Xor, i);
}


size_t AngelscriptParser::ExclusiveOrExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleExclusiveOrExpression;
}


std::any AngelscriptParser::ExclusiveOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitExclusiveOrExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ExclusiveOrExpressionContext* AngelscriptParser::exclusiveOrExpression() {
  ExclusiveOrExpressionContext *_localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 68, AngelscriptParser::RuleExclusiveOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(584);
    andExpression();
    setState(589);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Xor) {
      setState(585);
      match(AngelscriptParser::Xor);
      setState(586);
      andExpression();
      setState(591);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InclusiveOrExpressionContext ------------------------------------------------------------------

AngelscriptParser::InclusiveOrExpressionContext::InclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::ExclusiveOrExpressionContext *> AngelscriptParser::InclusiveOrExpressionContext::exclusiveOrExpression() {
  return getRuleContexts<AngelscriptParser::ExclusiveOrExpressionContext>();
}

AngelscriptParser::ExclusiveOrExpressionContext* AngelscriptParser::InclusiveOrExpressionContext::exclusiveOrExpression(size_t i) {
  return getRuleContext<AngelscriptParser::ExclusiveOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::InclusiveOrExpressionContext::Or() {
  return getTokens(AngelscriptParser::Or);
}

tree::TerminalNode* AngelscriptParser::InclusiveOrExpressionContext::Or(size_t i) {
  return getToken(AngelscriptParser::Or, i);
}


size_t AngelscriptParser::InclusiveOrExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleInclusiveOrExpression;
}


std::any AngelscriptParser::InclusiveOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitInclusiveOrExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::InclusiveOrExpressionContext* AngelscriptParser::inclusiveOrExpression() {
  InclusiveOrExpressionContext *_localctx = _tracker.createInstance<InclusiveOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 70, AngelscriptParser::RuleInclusiveOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    exclusiveOrExpression();
    setState(597);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Or) {
      setState(593);
      match(AngelscriptParser::Or);
      setState(594);
      exclusiveOrExpression();
      setState(599);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

AngelscriptParser::LogicalAndExpressionContext::LogicalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::InclusiveOrExpressionContext *> AngelscriptParser::LogicalAndExpressionContext::inclusiveOrExpression() {
  return getRuleContexts<AngelscriptParser::InclusiveOrExpressionContext>();
}

AngelscriptParser::InclusiveOrExpressionContext* AngelscriptParser::LogicalAndExpressionContext::inclusiveOrExpression(size_t i) {
  return getRuleContext<AngelscriptParser::InclusiveOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::LogicalAndExpressionContext::AndAnd() {
  return getTokens(AngelscriptParser::AndAnd);
}

tree::TerminalNode* AngelscriptParser::LogicalAndExpressionContext::AndAnd(size_t i) {
  return getToken(AngelscriptParser::AndAnd, i);
}


size_t AngelscriptParser::LogicalAndExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleLogicalAndExpression;
}


std::any AngelscriptParser::LogicalAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLogicalAndExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LogicalAndExpressionContext* AngelscriptParser::logicalAndExpression() {
  LogicalAndExpressionContext *_localctx = _tracker.createInstance<LogicalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, AngelscriptParser::RuleLogicalAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(600);
    inclusiveOrExpression();
    setState(605);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::AndAnd) {
      setState(601);
      match(AngelscriptParser::AndAnd);
      setState(602);
      inclusiveOrExpression();
      setState(607);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOrExpressionContext ------------------------------------------------------------------

AngelscriptParser::LogicalOrExpressionContext::LogicalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::LogicalAndExpressionContext *> AngelscriptParser::LogicalOrExpressionContext::logicalAndExpression() {
  return getRuleContexts<AngelscriptParser::LogicalAndExpressionContext>();
}

AngelscriptParser::LogicalAndExpressionContext* AngelscriptParser::LogicalOrExpressionContext::logicalAndExpression(size_t i) {
  return getRuleContext<AngelscriptParser::LogicalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::LogicalOrExpressionContext::OrOr() {
  return getTokens(AngelscriptParser::OrOr);
}

tree::TerminalNode* AngelscriptParser::LogicalOrExpressionContext::OrOr(size_t i) {
  return getToken(AngelscriptParser::OrOr, i);
}


size_t AngelscriptParser::LogicalOrExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleLogicalOrExpression;
}


std::any AngelscriptParser::LogicalOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLogicalOrExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LogicalOrExpressionContext* AngelscriptParser::logicalOrExpression() {
  LogicalOrExpressionContext *_localctx = _tracker.createInstance<LogicalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 74, AngelscriptParser::RuleLogicalOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    logicalAndExpression();
    setState(613);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::OrOr) {
      setState(609);
      match(AngelscriptParser::OrOr);
      setState(610);
      logicalAndExpression();
      setState(615);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

AngelscriptParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::LogicalOrExpressionContext* AngelscriptParser::ConditionalExpressionContext::logicalOrExpression() {
  return getRuleContext<AngelscriptParser::LogicalOrExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::ConditionalExpressionContext::Question() {
  return getToken(AngelscriptParser::Question, 0);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::ConditionalExpressionContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::ConditionalExpressionContext::Colon() {
  return getToken(AngelscriptParser::Colon, 0);
}

AngelscriptParser::AssignmentExpressionContext* AngelscriptParser::ConditionalExpressionContext::assignmentExpression() {
  return getRuleContext<AngelscriptParser::AssignmentExpressionContext>(0);
}


size_t AngelscriptParser::ConditionalExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleConditionalExpression;
}


std::any AngelscriptParser::ConditionalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitConditionalExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ConditionalExpressionContext* AngelscriptParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 76, AngelscriptParser::RuleConditionalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    logicalOrExpression();
    setState(622);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Question) {
      setState(617);
      match(AngelscriptParser::Question);
      setState(618);
      expression();
      setState(619);
      match(AngelscriptParser::Colon);
      setState(620);
      assignmentExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

AngelscriptParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ConditionalExpressionContext* AngelscriptParser::AssignmentExpressionContext::conditionalExpression() {
  return getRuleContext<AngelscriptParser::ConditionalExpressionContext>(0);
}

AngelscriptParser::LogicalOrExpressionContext* AngelscriptParser::AssignmentExpressionContext::logicalOrExpression() {
  return getRuleContext<AngelscriptParser::LogicalOrExpressionContext>(0);
}

AngelscriptParser::AssignmentOperatorContext* AngelscriptParser::AssignmentExpressionContext::assignmentOperator() {
  return getRuleContext<AngelscriptParser::AssignmentOperatorContext>(0);
}

AngelscriptParser::InitializerClauseContext* AngelscriptParser::AssignmentExpressionContext::initializerClause() {
  return getRuleContext<AngelscriptParser::InitializerClauseContext>(0);
}


size_t AngelscriptParser::AssignmentExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleAssignmentExpression;
}


std::any AngelscriptParser::AssignmentExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AssignmentExpressionContext* AngelscriptParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 78, AngelscriptParser::RuleAssignmentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(629);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(624);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(625);
      logicalOrExpression();
      setState(626);
      assignmentOperator();
      setState(627);
      initializerClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

AngelscriptParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::StarAssign() {
  return getToken(AngelscriptParser::StarAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::DivAssign() {
  return getToken(AngelscriptParser::DivAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::ModAssign() {
  return getToken(AngelscriptParser::ModAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::PlusAssign() {
  return getToken(AngelscriptParser::PlusAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::MinusAssign() {
  return getToken(AngelscriptParser::MinusAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::RightShiftAssign() {
  return getToken(AngelscriptParser::RightShiftAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::LeftShiftAssign() {
  return getToken(AngelscriptParser::LeftShiftAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::AndAssign() {
  return getToken(AngelscriptParser::AndAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::XorAssign() {
  return getToken(AngelscriptParser::XorAssign, 0);
}

tree::TerminalNode* AngelscriptParser::AssignmentOperatorContext::OrAssign() {
  return getToken(AngelscriptParser::OrAssign, 0);
}


size_t AngelscriptParser::AssignmentOperatorContext::getRuleIndex() const {
  return AngelscriptParser::RuleAssignmentOperator;
}


std::any AngelscriptParser::AssignmentOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentOperator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AssignmentOperatorContext* AngelscriptParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 80, AngelscriptParser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(631);
    _la = _input->LA(1);
    if (!(((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 8185) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

AngelscriptParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::AssignmentExpressionContext *> AngelscriptParser::ExpressionContext::assignmentExpression() {
  return getRuleContexts<AngelscriptParser::AssignmentExpressionContext>();
}

AngelscriptParser::AssignmentExpressionContext* AngelscriptParser::ExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<AngelscriptParser::AssignmentExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::ExpressionContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::ExpressionContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::ExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleExpression;
}


std::any AngelscriptParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, AngelscriptParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(633);
    assignmentExpression();
    setState(638);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Comma) {
      setState(634);
      match(AngelscriptParser::Comma);
      setState(635);
      assignmentExpression();
      setState(640);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpressionContext ------------------------------------------------------------------

AngelscriptParser::ConstantExpressionContext::ConstantExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ConditionalExpressionContext* AngelscriptParser::ConstantExpressionContext::conditionalExpression() {
  return getRuleContext<AngelscriptParser::ConditionalExpressionContext>(0);
}


size_t AngelscriptParser::ConstantExpressionContext::getRuleIndex() const {
  return AngelscriptParser::RuleConstantExpression;
}


std::any AngelscriptParser::ConstantExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitConstantExpression(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ConstantExpressionContext* AngelscriptParser::constantExpression() {
  ConstantExpressionContext *_localctx = _tracker.createInstance<ConstantExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, AngelscriptParser::RuleConstantExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(641);
    conditionalExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

AngelscriptParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::LabeledStatementContext* AngelscriptParser::StatementContext::labeledStatement() {
  return getRuleContext<AngelscriptParser::LabeledStatementContext>(0);
}

AngelscriptParser::DeclarationStatementContext* AngelscriptParser::StatementContext::declarationStatement() {
  return getRuleContext<AngelscriptParser::DeclarationStatementContext>(0);
}

AngelscriptParser::ExpressionStatementContext* AngelscriptParser::StatementContext::expressionStatement() {
  return getRuleContext<AngelscriptParser::ExpressionStatementContext>(0);
}

AngelscriptParser::CompoundStatementContext* AngelscriptParser::StatementContext::compoundStatement() {
  return getRuleContext<AngelscriptParser::CompoundStatementContext>(0);
}

AngelscriptParser::SelectionStatementContext* AngelscriptParser::StatementContext::selectionStatement() {
  return getRuleContext<AngelscriptParser::SelectionStatementContext>(0);
}

AngelscriptParser::IterationStatementContext* AngelscriptParser::StatementContext::iterationStatement() {
  return getRuleContext<AngelscriptParser::IterationStatementContext>(0);
}

AngelscriptParser::JumpStatementContext* AngelscriptParser::StatementContext::jumpStatement() {
  return getRuleContext<AngelscriptParser::JumpStatementContext>(0);
}


size_t AngelscriptParser::StatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleStatement;
}


std::any AngelscriptParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::StatementContext* AngelscriptParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 86, AngelscriptParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(652);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(643);
      labeledStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(644);
      declarationStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(650);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case AngelscriptParser::IntegerLiteral:
        case AngelscriptParser::CharacterLiteral:
        case AngelscriptParser::FloatingLiteral:
        case AngelscriptParser::StringLiteral:
        case AngelscriptParser::UserDefinedLiteral:
        case AngelscriptParser::Cast:
        case AngelscriptParser::Ensure:
        case AngelscriptParser::EnsureAlways:
        case AngelscriptParser::Check:
        case AngelscriptParser::Int:
        case AngelscriptParser::Int8:
        case AngelscriptParser::Int16:
        case AngelscriptParser::Int32:
        case AngelscriptParser::Int64:
        case AngelscriptParser::UInt:
        case AngelscriptParser::UInt8:
        case AngelscriptParser::UInt16:
        case AngelscriptParser::UInt32:
        case AngelscriptParser::UInt64:
        case AngelscriptParser::Float:
        case AngelscriptParser::Double:
        case AngelscriptParser::Bool:
        case AngelscriptParser::Auto:
        case AngelscriptParser::False_:
        case AngelscriptParser::Nullptr:
        case AngelscriptParser::Operator:
        case AngelscriptParser::This:
        case AngelscriptParser::True_:
        case AngelscriptParser::Void:
        case AngelscriptParser::LeftParen:
        case AngelscriptParser::LeftBracket:
        case AngelscriptParser::Plus:
        case AngelscriptParser::Minus:
        case AngelscriptParser::Star:
        case AngelscriptParser::And:
        case AngelscriptParser::Or:
        case AngelscriptParser::Tilde:
        case AngelscriptParser::Not:
        case AngelscriptParser::PlusPlus:
        case AngelscriptParser::MinusMinus:
        case AngelscriptParser::Doublecolon:
        case AngelscriptParser::Semi:
        case AngelscriptParser::Identifier: {
          setState(645);
          expressionStatement();
          break;
        }

        case AngelscriptParser::LeftBrace: {
          setState(646);
          compoundStatement();
          break;
        }

        case AngelscriptParser::If:
        case AngelscriptParser::Switch: {
          setState(647);
          selectionStatement();
          break;
        }

        case AngelscriptParser::Do:
        case AngelscriptParser::For:
        case AngelscriptParser::While: {
          setState(648);
          iterationStatement();
          break;
        }

        case AngelscriptParser::Break:
        case AngelscriptParser::Continue:
        case AngelscriptParser::Goto:
        case AngelscriptParser::Return: {
          setState(649);
          jumpStatement();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementContext ------------------------------------------------------------------

AngelscriptParser::LabeledStatementContext::LabeledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::LabeledStatementContext::Colon() {
  return getToken(AngelscriptParser::Colon, 0);
}

AngelscriptParser::StatementContext* AngelscriptParser::LabeledStatementContext::statement() {
  return getRuleContext<AngelscriptParser::StatementContext>(0);
}

tree::TerminalNode* AngelscriptParser::LabeledStatementContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::LabeledStatementContext::Case() {
  return getToken(AngelscriptParser::Case, 0);
}

AngelscriptParser::ConstantExpressionContext* AngelscriptParser::LabeledStatementContext::constantExpression() {
  return getRuleContext<AngelscriptParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::LabeledStatementContext::Default() {
  return getToken(AngelscriptParser::Default, 0);
}


size_t AngelscriptParser::LabeledStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleLabeledStatement;
}


std::any AngelscriptParser::LabeledStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLabeledStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LabeledStatementContext* AngelscriptParser::labeledStatement() {
  LabeledStatementContext *_localctx = _tracker.createInstance<LabeledStatementContext>(_ctx, getState());
  enterRule(_localctx, 88, AngelscriptParser::RuleLabeledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(658);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::Identifier: {
        setState(654);
        match(AngelscriptParser::Identifier);
        break;
      }

      case AngelscriptParser::Case: {
        setState(655);
        match(AngelscriptParser::Case);
        setState(656);
        constantExpression();
        break;
      }

      case AngelscriptParser::Default: {
        setState(657);
        match(AngelscriptParser::Default);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(660);
    match(AngelscriptParser::Colon);
    setState(661);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

AngelscriptParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ExpressionStatementContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::ExpressionStatementContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}


size_t AngelscriptParser::ExpressionStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleExpressionStatement;
}


std::any AngelscriptParser::ExpressionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitExpressionStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ExpressionStatementContext* AngelscriptParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 90, AngelscriptParser::RuleExpressionStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(664);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 156229436359) != 0)) {
      setState(663);
      expression();
    }
    setState(666);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStatementContext ------------------------------------------------------------------

AngelscriptParser::CompoundStatementContext::CompoundStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::CompoundStatementContext::LeftBrace() {
  return getToken(AngelscriptParser::LeftBrace, 0);
}

tree::TerminalNode* AngelscriptParser::CompoundStatementContext::RightBrace() {
  return getToken(AngelscriptParser::RightBrace, 0);
}

AngelscriptParser::StatementSeqContext* AngelscriptParser::CompoundStatementContext::statementSeq() {
  return getRuleContext<AngelscriptParser::StatementSeqContext>(0);
}


size_t AngelscriptParser::CompoundStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleCompoundStatement;
}


std::any AngelscriptParser::CompoundStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitCompoundStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::CompoundStatementContext* AngelscriptParser::compoundStatement() {
  CompoundStatementContext *_localctx = _tracker.createInstance<CompoundStatementContext>(_ctx, getState());
  enterRule(_localctx, 92, AngelscriptParser::RuleCompoundStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(668);
    match(AngelscriptParser::LeftBrace);
    setState(670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4638150445116704130) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 762356698909) != 0)) {
      setState(669);
      statementSeq();
    }
    setState(672);
    match(AngelscriptParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementSeqContext ------------------------------------------------------------------

AngelscriptParser::StatementSeqContext::StatementSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::StatementContext *> AngelscriptParser::StatementSeqContext::statement() {
  return getRuleContexts<AngelscriptParser::StatementContext>();
}

AngelscriptParser::StatementContext* AngelscriptParser::StatementSeqContext::statement(size_t i) {
  return getRuleContext<AngelscriptParser::StatementContext>(i);
}


size_t AngelscriptParser::StatementSeqContext::getRuleIndex() const {
  return AngelscriptParser::RuleStatementSeq;
}


std::any AngelscriptParser::StatementSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitStatementSeq(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::StatementSeqContext* AngelscriptParser::statementSeq() {
  StatementSeqContext *_localctx = _tracker.createInstance<StatementSeqContext>(_ctx, getState());
  enterRule(_localctx, 94, AngelscriptParser::RuleStatementSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(675); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(674);
      statement();
      setState(677); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4638150445116704130) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 762356698909) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectionStatementContext ------------------------------------------------------------------

AngelscriptParser::SelectionStatementContext::SelectionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::SelectionStatementContext::If() {
  return getToken(AngelscriptParser::If, 0);
}

tree::TerminalNode* AngelscriptParser::SelectionStatementContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

AngelscriptParser::ConditionContext* AngelscriptParser::SelectionStatementContext::condition() {
  return getRuleContext<AngelscriptParser::ConditionContext>(0);
}

tree::TerminalNode* AngelscriptParser::SelectionStatementContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

std::vector<AngelscriptParser::StatementContext *> AngelscriptParser::SelectionStatementContext::statement() {
  return getRuleContexts<AngelscriptParser::StatementContext>();
}

AngelscriptParser::StatementContext* AngelscriptParser::SelectionStatementContext::statement(size_t i) {
  return getRuleContext<AngelscriptParser::StatementContext>(i);
}

tree::TerminalNode* AngelscriptParser::SelectionStatementContext::Else() {
  return getToken(AngelscriptParser::Else, 0);
}

tree::TerminalNode* AngelscriptParser::SelectionStatementContext::Switch() {
  return getToken(AngelscriptParser::Switch, 0);
}


size_t AngelscriptParser::SelectionStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleSelectionStatement;
}


std::any AngelscriptParser::SelectionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitSelectionStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::SelectionStatementContext* AngelscriptParser::selectionStatement() {
  SelectionStatementContext *_localctx = _tracker.createInstance<SelectionStatementContext>(_ctx, getState());
  enterRule(_localctx, 96, AngelscriptParser::RuleSelectionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(694);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::If: {
        enterOuterAlt(_localctx, 1);
        setState(679);
        match(AngelscriptParser::If);
        setState(680);
        match(AngelscriptParser::LeftParen);
        setState(681);
        condition();
        setState(682);
        match(AngelscriptParser::RightParen);
        setState(683);
        statement();
        setState(686);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
        case 1: {
          setState(684);
          match(AngelscriptParser::Else);
          setState(685);
          statement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case AngelscriptParser::Switch: {
        enterOuterAlt(_localctx, 2);
        setState(688);
        match(AngelscriptParser::Switch);
        setState(689);
        match(AngelscriptParser::LeftParen);
        setState(690);
        condition();
        setState(691);
        match(AngelscriptParser::RightParen);
        setState(692);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionContext ------------------------------------------------------------------

AngelscriptParser::ConditionContext::ConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ExpressionContext* AngelscriptParser::ConditionContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::ConditionContext::declSpecifierSeq() {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(0);
}

AngelscriptParser::DeclaratorContext* AngelscriptParser::ConditionContext::declarator() {
  return getRuleContext<AngelscriptParser::DeclaratorContext>(0);
}

tree::TerminalNode* AngelscriptParser::ConditionContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

AngelscriptParser::InitializerClauseContext* AngelscriptParser::ConditionContext::initializerClause() {
  return getRuleContext<AngelscriptParser::InitializerClauseContext>(0);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::ConditionContext::bracedInitList() {
  return getRuleContext<AngelscriptParser::BracedInitListContext>(0);
}


size_t AngelscriptParser::ConditionContext::getRuleIndex() const {
  return AngelscriptParser::RuleCondition;
}


std::any AngelscriptParser::ConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitCondition(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ConditionContext* AngelscriptParser::condition() {
  ConditionContext *_localctx = _tracker.createInstance<ConditionContext>(_ctx, getState());
  enterRule(_localctx, 98, AngelscriptParser::RuleCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(704);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(696);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(697);
      declSpecifierSeq();
      setState(698);
      declarator();
      setState(702);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case AngelscriptParser::Assign: {
          setState(699);
          match(AngelscriptParser::Assign);
          setState(700);
          initializerClause();
          break;
        }

        case AngelscriptParser::LeftBracket:
        case AngelscriptParser::LeftBrace: {
          setState(701);
          bracedInitList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationStatementContext ------------------------------------------------------------------

AngelscriptParser::IterationStatementContext::IterationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::IterationStatementContext::While() {
  return getToken(AngelscriptParser::While, 0);
}

tree::TerminalNode* AngelscriptParser::IterationStatementContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

AngelscriptParser::ConditionContext* AngelscriptParser::IterationStatementContext::condition() {
  return getRuleContext<AngelscriptParser::ConditionContext>(0);
}

tree::TerminalNode* AngelscriptParser::IterationStatementContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

AngelscriptParser::StatementContext* AngelscriptParser::IterationStatementContext::statement() {
  return getRuleContext<AngelscriptParser::StatementContext>(0);
}

tree::TerminalNode* AngelscriptParser::IterationStatementContext::Do() {
  return getToken(AngelscriptParser::Do, 0);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::IterationStatementContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::IterationStatementContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}

tree::TerminalNode* AngelscriptParser::IterationStatementContext::For() {
  return getToken(AngelscriptParser::For, 0);
}

AngelscriptParser::ForInitStatementContext* AngelscriptParser::IterationStatementContext::forInitStatement() {
  return getRuleContext<AngelscriptParser::ForInitStatementContext>(0);
}

AngelscriptParser::ForRangeDeclarationContext* AngelscriptParser::IterationStatementContext::forRangeDeclaration() {
  return getRuleContext<AngelscriptParser::ForRangeDeclarationContext>(0);
}

tree::TerminalNode* AngelscriptParser::IterationStatementContext::Colon() {
  return getToken(AngelscriptParser::Colon, 0);
}

AngelscriptParser::ForRangeInitializerContext* AngelscriptParser::IterationStatementContext::forRangeInitializer() {
  return getRuleContext<AngelscriptParser::ForRangeInitializerContext>(0);
}


size_t AngelscriptParser::IterationStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleIterationStatement;
}


std::any AngelscriptParser::IterationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitIterationStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::IterationStatementContext* AngelscriptParser::iterationStatement() {
  IterationStatementContext *_localctx = _tracker.createInstance<IterationStatementContext>(_ctx, getState());
  enterRule(_localctx, 100, AngelscriptParser::RuleIterationStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(739);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::While: {
        enterOuterAlt(_localctx, 1);
        setState(706);
        match(AngelscriptParser::While);
        setState(707);
        match(AngelscriptParser::LeftParen);
        setState(708);
        condition();
        setState(709);
        match(AngelscriptParser::RightParen);
        setState(710);
        statement();
        break;
      }

      case AngelscriptParser::Do: {
        enterOuterAlt(_localctx, 2);
        setState(712);
        match(AngelscriptParser::Do);
        setState(713);
        statement();
        setState(714);
        match(AngelscriptParser::While);
        setState(715);
        match(AngelscriptParser::LeftParen);
        setState(716);
        expression();
        setState(717);
        match(AngelscriptParser::RightParen);
        setState(718);
        match(AngelscriptParser::Semi);
        break;
      }

      case AngelscriptParser::For: {
        enterOuterAlt(_localctx, 3);
        setState(720);
        match(AngelscriptParser::For);
        setState(721);
        match(AngelscriptParser::LeftParen);
        setState(734);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
        case 1: {
          setState(722);
          forInitStatement();
          setState(724);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -5836240129521370498) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 67)) & 156229436359) != 0)) {
            setState(723);
            condition();
          }
          setState(726);
          match(AngelscriptParser::Semi);
          setState(728);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 67)) & 156229436359) != 0)) {
            setState(727);
            expression();
          }
          break;
        }

        case 2: {
          setState(730);
          forRangeDeclaration();
          setState(731);
          match(AngelscriptParser::Colon);
          setState(732);
          forRangeInitializer();
          break;
        }

        default:
          break;
        }
        setState(736);
        match(AngelscriptParser::RightParen);
        setState(737);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitStatementContext ------------------------------------------------------------------

AngelscriptParser::ForInitStatementContext::ForInitStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ExpressionStatementContext* AngelscriptParser::ForInitStatementContext::expressionStatement() {
  return getRuleContext<AngelscriptParser::ExpressionStatementContext>(0);
}

AngelscriptParser::SimpleDeclarationContext* AngelscriptParser::ForInitStatementContext::simpleDeclaration() {
  return getRuleContext<AngelscriptParser::SimpleDeclarationContext>(0);
}


size_t AngelscriptParser::ForInitStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleForInitStatement;
}


std::any AngelscriptParser::ForInitStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitForInitStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ForInitStatementContext* AngelscriptParser::forInitStatement() {
  ForInitStatementContext *_localctx = _tracker.createInstance<ForInitStatementContext>(_ctx, getState());
  enterRule(_localctx, 102, AngelscriptParser::RuleForInitStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(743);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(741);
      expressionStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(742);
      simpleDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeDeclarationContext ------------------------------------------------------------------

AngelscriptParser::ForRangeDeclarationContext::ForRangeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::ForRangeDeclarationContext::declSpecifierSeq() {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(0);
}

tree::TerminalNode* AngelscriptParser::ForRangeDeclarationContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::ForRangeDeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleForRangeDeclaration;
}


std::any AngelscriptParser::ForRangeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitForRangeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ForRangeDeclarationContext* AngelscriptParser::forRangeDeclaration() {
  ForRangeDeclarationContext *_localctx = _tracker.createInstance<ForRangeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 104, AngelscriptParser::RuleForRangeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(745);
    declSpecifierSeq();
    setState(746);
    match(AngelscriptParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeInitializerContext ------------------------------------------------------------------

AngelscriptParser::ForRangeInitializerContext::ForRangeInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ExpressionContext* AngelscriptParser::ForRangeInitializerContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::ForRangeInitializerContext::bracedInitList() {
  return getRuleContext<AngelscriptParser::BracedInitListContext>(0);
}


size_t AngelscriptParser::ForRangeInitializerContext::getRuleIndex() const {
  return AngelscriptParser::RuleForRangeInitializer;
}


std::any AngelscriptParser::ForRangeInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitForRangeInitializer(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ForRangeInitializerContext* AngelscriptParser::forRangeInitializer() {
  ForRangeInitializerContext *_localctx = _tracker.createInstance<ForRangeInitializerContext>(_ctx, getState());
  enterRule(_localctx, 106, AngelscriptParser::RuleForRangeInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(750);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(748);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(749);
      bracedInitList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JumpStatementContext ------------------------------------------------------------------

AngelscriptParser::JumpStatementContext::JumpStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::JumpStatementContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}

tree::TerminalNode* AngelscriptParser::JumpStatementContext::Break() {
  return getToken(AngelscriptParser::Break, 0);
}

tree::TerminalNode* AngelscriptParser::JumpStatementContext::Continue() {
  return getToken(AngelscriptParser::Continue, 0);
}

tree::TerminalNode* AngelscriptParser::JumpStatementContext::Return() {
  return getToken(AngelscriptParser::Return, 0);
}

tree::TerminalNode* AngelscriptParser::JumpStatementContext::Goto() {
  return getToken(AngelscriptParser::Goto, 0);
}

tree::TerminalNode* AngelscriptParser::JumpStatementContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::JumpStatementContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::JumpStatementContext::bracedInitList() {
  return getRuleContext<AngelscriptParser::BracedInitListContext>(0);
}


size_t AngelscriptParser::JumpStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleJumpStatement;
}


std::any AngelscriptParser::JumpStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitJumpStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::JumpStatementContext* AngelscriptParser::jumpStatement() {
  JumpStatementContext *_localctx = _tracker.createInstance<JumpStatementContext>(_ctx, getState());
  enterRule(_localctx, 108, AngelscriptParser::RuleJumpStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(761);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::Break: {
        setState(752);
        match(AngelscriptParser::Break);
        break;
      }

      case AngelscriptParser::Continue: {
        setState(753);
        match(AngelscriptParser::Continue);
        break;
      }

      case AngelscriptParser::Return: {
        setState(754);
        match(AngelscriptParser::Return);
        setState(757);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
        case 1: {
          setState(755);
          expression();
          break;
        }

        case 2: {
          setState(756);
          bracedInitList();
          break;
        }

        default:
          break;
        }
        break;
      }

      case AngelscriptParser::Goto: {
        setState(759);
        match(AngelscriptParser::Goto);
        setState(760);
        match(AngelscriptParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(763);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationStatementContext ------------------------------------------------------------------

AngelscriptParser::DeclarationStatementContext::DeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::BlockDeclarationContext* AngelscriptParser::DeclarationStatementContext::blockDeclaration() {
  return getRuleContext<AngelscriptParser::BlockDeclarationContext>(0);
}


size_t AngelscriptParser::DeclarationStatementContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclarationStatement;
}


std::any AngelscriptParser::DeclarationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclarationStatement(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DeclarationStatementContext* AngelscriptParser::declarationStatement() {
  DeclarationStatementContext *_localctx = _tracker.createInstance<DeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 110, AngelscriptParser::RuleDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(765);
    blockDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationseqContext ------------------------------------------------------------------

AngelscriptParser::DeclarationseqContext::DeclarationseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::DeclarationContext *> AngelscriptParser::DeclarationseqContext::declaration() {
  return getRuleContexts<AngelscriptParser::DeclarationContext>();
}

AngelscriptParser::DeclarationContext* AngelscriptParser::DeclarationseqContext::declaration(size_t i) {
  return getRuleContext<AngelscriptParser::DeclarationContext>(i);
}


size_t AngelscriptParser::DeclarationseqContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclarationseq;
}


std::any AngelscriptParser::DeclarationseqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclarationseq(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DeclarationseqContext* AngelscriptParser::declarationseq() {
  DeclarationseqContext *_localctx = _tracker.createInstance<DeclarationseqContext>(_ctx, getState());
  enterRule(_localctx, 112, AngelscriptParser::RuleDeclarationseq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(768); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(767);
      declaration();
      setState(770); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5828288461429277954) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 190589174727) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

AngelscriptParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ModuleImportContext* AngelscriptParser::DeclarationContext::moduleImport() {
  return getRuleContext<AngelscriptParser::ModuleImportContext>(0);
}

AngelscriptParser::BlockDeclarationContext* AngelscriptParser::DeclarationContext::blockDeclaration() {
  return getRuleContext<AngelscriptParser::BlockDeclarationContext>(0);
}

AngelscriptParser::FunctionDefinitionContext* AngelscriptParser::DeclarationContext::functionDefinition() {
  return getRuleContext<AngelscriptParser::FunctionDefinitionContext>(0);
}

AngelscriptParser::NamespaceDefinitionContext* AngelscriptParser::DeclarationContext::namespaceDefinition() {
  return getRuleContext<AngelscriptParser::NamespaceDefinitionContext>(0);
}

AngelscriptParser::EmptyDeclaration_Context* AngelscriptParser::DeclarationContext::emptyDeclaration_() {
  return getRuleContext<AngelscriptParser::EmptyDeclaration_Context>(0);
}


size_t AngelscriptParser::DeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclaration;
}


std::any AngelscriptParser::DeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DeclarationContext* AngelscriptParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 114, AngelscriptParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(777);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(772);
      moduleImport();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(773);
      blockDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(774);
      functionDefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(775);
      namespaceDefinition();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(776);
      emptyDeclaration_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockDeclarationContext ------------------------------------------------------------------

AngelscriptParser::BlockDeclarationContext::BlockDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::SimpleDeclarationContext* AngelscriptParser::BlockDeclarationContext::simpleDeclaration() {
  return getRuleContext<AngelscriptParser::SimpleDeclarationContext>(0);
}

AngelscriptParser::NamespaceAliasDefinitionContext* AngelscriptParser::BlockDeclarationContext::namespaceAliasDefinition() {
  return getRuleContext<AngelscriptParser::NamespaceAliasDefinitionContext>(0);
}

AngelscriptParser::AliasDeclarationContext* AngelscriptParser::BlockDeclarationContext::aliasDeclaration() {
  return getRuleContext<AngelscriptParser::AliasDeclarationContext>(0);
}

AngelscriptParser::OpaqueEnumDeclarationContext* AngelscriptParser::BlockDeclarationContext::opaqueEnumDeclaration() {
  return getRuleContext<AngelscriptParser::OpaqueEnumDeclarationContext>(0);
}


size_t AngelscriptParser::BlockDeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleBlockDeclaration;
}


std::any AngelscriptParser::BlockDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBlockDeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BlockDeclarationContext* AngelscriptParser::blockDeclaration() {
  BlockDeclarationContext *_localctx = _tracker.createInstance<BlockDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 116, AngelscriptParser::RuleBlockDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(783);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(779);
      simpleDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(780);
      namespaceAliasDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(781);
      aliasDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(782);
      opaqueEnumDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasDeclarationContext ------------------------------------------------------------------

AngelscriptParser::AliasDeclarationContext::AliasDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::AliasDeclarationContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::AliasDeclarationContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

AngelscriptParser::TheTypeIdContext* AngelscriptParser::AliasDeclarationContext::theTypeId() {
  return getRuleContext<AngelscriptParser::TheTypeIdContext>(0);
}

tree::TerminalNode* AngelscriptParser::AliasDeclarationContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}


size_t AngelscriptParser::AliasDeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleAliasDeclaration;
}


std::any AngelscriptParser::AliasDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAliasDeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AliasDeclarationContext* AngelscriptParser::aliasDeclaration() {
  AliasDeclarationContext *_localctx = _tracker.createInstance<AliasDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 118, AngelscriptParser::RuleAliasDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(785);
    match(AngelscriptParser::Identifier);
    setState(786);
    match(AngelscriptParser::Assign);
    setState(787);
    theTypeId();
    setState(788);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDeclarationContext ------------------------------------------------------------------

AngelscriptParser::SimpleDeclarationContext::SimpleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::SimpleDeclarationContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::SimpleDeclarationContext::declSpecifierSeq() {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(0);
}

AngelscriptParser::InitDeclaratorListContext* AngelscriptParser::SimpleDeclarationContext::initDeclaratorList() {
  return getRuleContext<AngelscriptParser::InitDeclaratorListContext>(0);
}

AngelscriptParser::AssignmentExpressionContext* AngelscriptParser::SimpleDeclarationContext::assignmentExpression() {
  return getRuleContext<AngelscriptParser::AssignmentExpressionContext>(0);
}


size_t AngelscriptParser::SimpleDeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleSimpleDeclaration;
}


std::any AngelscriptParser::SimpleDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitSimpleDeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::SimpleDeclarationContext* AngelscriptParser::simpleDeclaration() {
  SimpleDeclarationContext *_localctx = _tracker.createInstance<SimpleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 120, AngelscriptParser::RuleSimpleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(791);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(790);
      declSpecifierSeq();
      break;
    }

    default:
      break;
    }
    setState(795);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      setState(793);
      initDeclaratorList();
      break;
    }

    case 2: {
      setState(794);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
    setState(797);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyDeclaration_Context ------------------------------------------------------------------

AngelscriptParser::EmptyDeclaration_Context::EmptyDeclaration_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::EmptyDeclaration_Context::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}


size_t AngelscriptParser::EmptyDeclaration_Context::getRuleIndex() const {
  return AngelscriptParser::RuleEmptyDeclaration_;
}


std::any AngelscriptParser::EmptyDeclaration_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEmptyDeclaration_(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EmptyDeclaration_Context* AngelscriptParser::emptyDeclaration_() {
  EmptyDeclaration_Context *_localctx = _tracker.createInstance<EmptyDeclaration_Context>(_ctx, getState());
  enterRule(_localctx, 122, AngelscriptParser::RuleEmptyDeclaration_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(799);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSpecifierContext ------------------------------------------------------------------

AngelscriptParser::DeclSpecifierContext::DeclSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::TypeSpecifierContext* AngelscriptParser::DeclSpecifierContext::typeSpecifier() {
  return getRuleContext<AngelscriptParser::TypeSpecifierContext>(0);
}

AngelscriptParser::FunctionSpecifierContext* AngelscriptParser::DeclSpecifierContext::functionSpecifier() {
  return getRuleContext<AngelscriptParser::FunctionSpecifierContext>(0);
}


size_t AngelscriptParser::DeclSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclSpecifier;
}


std::any AngelscriptParser::DeclSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DeclSpecifierContext* AngelscriptParser::declSpecifier() {
  DeclSpecifierContext *_localctx = _tracker.createInstance<DeclSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 124, AngelscriptParser::RuleDeclSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(803);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::Out:
      case AngelscriptParser::Int:
      case AngelscriptParser::Int8:
      case AngelscriptParser::Int16:
      case AngelscriptParser::Int32:
      case AngelscriptParser::Int64:
      case AngelscriptParser::UInt:
      case AngelscriptParser::UInt8:
      case AngelscriptParser::UInt16:
      case AngelscriptParser::UInt32:
      case AngelscriptParser::UInt64:
      case AngelscriptParser::Float:
      case AngelscriptParser::Double:
      case AngelscriptParser::Bool:
      case AngelscriptParser::Auto:
      case AngelscriptParser::Class:
      case AngelscriptParser::Const:
      case AngelscriptParser::Enum:
      case AngelscriptParser::Void:
      case AngelscriptParser::LeftParen:
      case AngelscriptParser::And:
      case AngelscriptParser::Doublecolon:
      case AngelscriptParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(801);
        typeSpecifier();
        break;
      }

      case AngelscriptParser::Virtual: {
        enterOuterAlt(_localctx, 2);
        setState(802);
        functionSpecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSpecifierSeqContext ------------------------------------------------------------------

AngelscriptParser::DeclSpecifierSeqContext::DeclSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::DeclSpecifierContext *> AngelscriptParser::DeclSpecifierSeqContext::declSpecifier() {
  return getRuleContexts<AngelscriptParser::DeclSpecifierContext>();
}

AngelscriptParser::DeclSpecifierContext* AngelscriptParser::DeclSpecifierSeqContext::declSpecifier(size_t i) {
  return getRuleContext<AngelscriptParser::DeclSpecifierContext>(i);
}


size_t AngelscriptParser::DeclSpecifierSeqContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclSpecifierSeq;
}


std::any AngelscriptParser::DeclSpecifierSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclSpecifierSeq(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::declSpecifierSeq() {
  DeclSpecifierSeqContext *_localctx = _tracker.createInstance<DeclSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 126, AngelscriptParser::RuleDeclSpecifierSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(806); 
    _errHandler->sync(this);
    alt = 1 + 1;
    do {
      switch (alt) {
        case 1 + 1: {
              setState(805);
              declSpecifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(808); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx);
    } while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionSpecifierContext ------------------------------------------------------------------

AngelscriptParser::FunctionSpecifierContext::FunctionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::FunctionSpecifierContext::Virtual() {
  return getToken(AngelscriptParser::Virtual, 0);
}


size_t AngelscriptParser::FunctionSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleFunctionSpecifier;
}


std::any AngelscriptParser::FunctionSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitFunctionSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::FunctionSpecifierContext* AngelscriptParser::functionSpecifier() {
  FunctionSpecifierContext *_localctx = _tracker.createInstance<FunctionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 128, AngelscriptParser::RuleFunctionSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(810);
    match(AngelscriptParser::Virtual);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedefNameContext ------------------------------------------------------------------

AngelscriptParser::TypedefNameContext::TypedefNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::TypedefNameContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::TypedefNameContext::getRuleIndex() const {
  return AngelscriptParser::RuleTypedefName;
}


std::any AngelscriptParser::TypedefNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTypedefName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TypedefNameContext* AngelscriptParser::typedefName() {
  TypedefNameContext *_localctx = _tracker.createInstance<TypedefNameContext>(_ctx, getState());
  enterRule(_localctx, 130, AngelscriptParser::RuleTypedefName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(812);
    match(AngelscriptParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecifierContext ------------------------------------------------------------------

AngelscriptParser::TypeSpecifierContext::TypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::TrailingTypeSpecifierContext* AngelscriptParser::TypeSpecifierContext::trailingTypeSpecifier() {
  return getRuleContext<AngelscriptParser::TrailingTypeSpecifierContext>(0);
}

AngelscriptParser::ClassSpecifierContext* AngelscriptParser::TypeSpecifierContext::classSpecifier() {
  return getRuleContext<AngelscriptParser::ClassSpecifierContext>(0);
}

AngelscriptParser::EnumSpecifierContext* AngelscriptParser::TypeSpecifierContext::enumSpecifier() {
  return getRuleContext<AngelscriptParser::EnumSpecifierContext>(0);
}


size_t AngelscriptParser::TypeSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleTypeSpecifier;
}


std::any AngelscriptParser::TypeSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTypeSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TypeSpecifierContext* AngelscriptParser::typeSpecifier() {
  TypeSpecifierContext *_localctx = _tracker.createInstance<TypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 132, AngelscriptParser::RuleTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(817);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(814);
      trailingTypeSpecifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(815);
      classSpecifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(816);
      enumSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingTypeSpecifierContext ------------------------------------------------------------------

AngelscriptParser::TrailingTypeSpecifierContext::TrailingTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::SimpleTypeSpecifierContext* AngelscriptParser::TrailingTypeSpecifierContext::simpleTypeSpecifier() {
  return getRuleContext<AngelscriptParser::SimpleTypeSpecifierContext>(0);
}

AngelscriptParser::ElaboratedTypeSpecifierContext* AngelscriptParser::TrailingTypeSpecifierContext::elaboratedTypeSpecifier() {
  return getRuleContext<AngelscriptParser::ElaboratedTypeSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::TrailingTypeSpecifierContext::Const() {
  return getToken(AngelscriptParser::Const, 0);
}

tree::TerminalNode* AngelscriptParser::TrailingTypeSpecifierContext::And() {
  return getToken(AngelscriptParser::And, 0);
}

tree::TerminalNode* AngelscriptParser::TrailingTypeSpecifierContext::Out() {
  return getToken(AngelscriptParser::Out, 0);
}


size_t AngelscriptParser::TrailingTypeSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleTrailingTypeSpecifier;
}


std::any AngelscriptParser::TrailingTypeSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTrailingTypeSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TrailingTypeSpecifierContext* AngelscriptParser::trailingTypeSpecifier() {
  TrailingTypeSpecifierContext *_localctx = _tracker.createInstance<TrailingTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 134, AngelscriptParser::RuleTrailingTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(824);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::Int:
      case AngelscriptParser::Int8:
      case AngelscriptParser::Int16:
      case AngelscriptParser::Int32:
      case AngelscriptParser::Int64:
      case AngelscriptParser::UInt:
      case AngelscriptParser::UInt8:
      case AngelscriptParser::UInt16:
      case AngelscriptParser::UInt32:
      case AngelscriptParser::UInt64:
      case AngelscriptParser::Float:
      case AngelscriptParser::Double:
      case AngelscriptParser::Bool:
      case AngelscriptParser::Auto:
      case AngelscriptParser::Void:
      case AngelscriptParser::LeftParen:
      case AngelscriptParser::Doublecolon:
      case AngelscriptParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(819);
        simpleTypeSpecifier();
        break;
      }

      case AngelscriptParser::Class:
      case AngelscriptParser::Enum: {
        enterOuterAlt(_localctx, 2);
        setState(820);
        elaboratedTypeSpecifier();
        break;
      }

      case AngelscriptParser::Const: {
        enterOuterAlt(_localctx, 3);
        setState(821);
        match(AngelscriptParser::Const);
        break;
      }

      case AngelscriptParser::And: {
        enterOuterAlt(_localctx, 4);
        setState(822);
        match(AngelscriptParser::And);
        break;
      }

      case AngelscriptParser::Out: {
        enterOuterAlt(_localctx, 5);
        setState(823);
        match(AngelscriptParser::Out);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecifierSeqContext ------------------------------------------------------------------

AngelscriptParser::TypeSpecifierSeqContext::TypeSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::TypeSpecifierContext *> AngelscriptParser::TypeSpecifierSeqContext::typeSpecifier() {
  return getRuleContexts<AngelscriptParser::TypeSpecifierContext>();
}

AngelscriptParser::TypeSpecifierContext* AngelscriptParser::TypeSpecifierSeqContext::typeSpecifier(size_t i) {
  return getRuleContext<AngelscriptParser::TypeSpecifierContext>(i);
}


size_t AngelscriptParser::TypeSpecifierSeqContext::getRuleIndex() const {
  return AngelscriptParser::RuleTypeSpecifierSeq;
}


std::any AngelscriptParser::TypeSpecifierSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTypeSpecifierSeq(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TypeSpecifierSeqContext* AngelscriptParser::typeSpecifierSeq() {
  TypeSpecifierSeqContext *_localctx = _tracker.createInstance<TypeSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 136, AngelscriptParser::RuleTypeSpecifierSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(827); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(826);
      typeSpecifier();
      setState(829); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2882304337579573760) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 2415919105) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingTypeSpecifierSeqContext ------------------------------------------------------------------

AngelscriptParser::TrailingTypeSpecifierSeqContext::TrailingTypeSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::TrailingTypeSpecifierContext *> AngelscriptParser::TrailingTypeSpecifierSeqContext::trailingTypeSpecifier() {
  return getRuleContexts<AngelscriptParser::TrailingTypeSpecifierContext>();
}

AngelscriptParser::TrailingTypeSpecifierContext* AngelscriptParser::TrailingTypeSpecifierSeqContext::trailingTypeSpecifier(size_t i) {
  return getRuleContext<AngelscriptParser::TrailingTypeSpecifierContext>(i);
}


size_t AngelscriptParser::TrailingTypeSpecifierSeqContext::getRuleIndex() const {
  return AngelscriptParser::RuleTrailingTypeSpecifierSeq;
}


std::any AngelscriptParser::TrailingTypeSpecifierSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTrailingTypeSpecifierSeq(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TrailingTypeSpecifierSeqContext* AngelscriptParser::trailingTypeSpecifierSeq() {
  TrailingTypeSpecifierSeqContext *_localctx = _tracker.createInstance<TrailingTypeSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 138, AngelscriptParser::RuleTrailingTypeSpecifierSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(832); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(831);
      trailingTypeSpecifier();
      setState(834); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2882304337579573760) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 2415919105) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeSpecifierContext ------------------------------------------------------------------

AngelscriptParser::SimpleTypeSpecifierContext::SimpleTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::TheTypeNameContext* AngelscriptParser::SimpleTypeSpecifierContext::theTypeName() {
  return getRuleContext<AngelscriptParser::TheTypeNameContext>(0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::SimpleTypeSpecifierContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}

AngelscriptParser::AsGenericContext* AngelscriptParser::SimpleTypeSpecifierContext::asGeneric() {
  return getRuleContext<AngelscriptParser::AsGenericContext>(0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Int() {
  return getToken(AngelscriptParser::Int, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Int8() {
  return getToken(AngelscriptParser::Int8, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Int16() {
  return getToken(AngelscriptParser::Int16, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Int32() {
  return getToken(AngelscriptParser::Int32, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Int64() {
  return getToken(AngelscriptParser::Int64, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::UInt() {
  return getToken(AngelscriptParser::UInt, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::UInt8() {
  return getToken(AngelscriptParser::UInt8, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::UInt16() {
  return getToken(AngelscriptParser::UInt16, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::UInt32() {
  return getToken(AngelscriptParser::UInt32, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::UInt64() {
  return getToken(AngelscriptParser::UInt64, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Float() {
  return getToken(AngelscriptParser::Float, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Double() {
  return getToken(AngelscriptParser::Double, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Bool() {
  return getToken(AngelscriptParser::Bool, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Void() {
  return getToken(AngelscriptParser::Void, 0);
}

tree::TerminalNode* AngelscriptParser::SimpleTypeSpecifierContext::Auto() {
  return getToken(AngelscriptParser::Auto, 0);
}

AngelscriptParser::DecltypeSpecifierContext* AngelscriptParser::SimpleTypeSpecifierContext::decltypeSpecifier() {
  return getRuleContext<AngelscriptParser::DecltypeSpecifierContext>(0);
}


size_t AngelscriptParser::SimpleTypeSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleSimpleTypeSpecifier;
}


std::any AngelscriptParser::SimpleTypeSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitSimpleTypeSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::SimpleTypeSpecifierContext* AngelscriptParser::simpleTypeSpecifier() {
  SimpleTypeSpecifierContext *_localctx = _tracker.createInstance<SimpleTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 140, AngelscriptParser::RuleSimpleTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(857);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(837);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(836);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(839);
      theTypeName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(840);
      asGeneric();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(841);
      match(AngelscriptParser::Int);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(842);
      match(AngelscriptParser::Int8);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(843);
      match(AngelscriptParser::Int16);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(844);
      match(AngelscriptParser::Int32);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(845);
      match(AngelscriptParser::Int64);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(846);
      match(AngelscriptParser::UInt);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(847);
      match(AngelscriptParser::UInt8);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(848);
      match(AngelscriptParser::UInt16);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(849);
      match(AngelscriptParser::UInt32);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(850);
      match(AngelscriptParser::UInt64);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(851);
      match(AngelscriptParser::Float);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(852);
      match(AngelscriptParser::Double);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(853);
      match(AngelscriptParser::Bool);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(854);
      match(AngelscriptParser::Void);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(855);
      match(AngelscriptParser::Auto);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(856);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertSpecifierContext ------------------------------------------------------------------

AngelscriptParser::AssertSpecifierContext::AssertSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::AssertSpecifierContext::Ensure() {
  return getToken(AngelscriptParser::Ensure, 0);
}

tree::TerminalNode* AngelscriptParser::AssertSpecifierContext::EnsureAlways() {
  return getToken(AngelscriptParser::EnsureAlways, 0);
}

tree::TerminalNode* AngelscriptParser::AssertSpecifierContext::Check() {
  return getToken(AngelscriptParser::Check, 0);
}


size_t AngelscriptParser::AssertSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleAssertSpecifier;
}


std::any AngelscriptParser::AssertSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAssertSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AssertSpecifierContext* AngelscriptParser::assertSpecifier() {
  AssertSpecifierContext *_localctx = _tracker.createInstance<AssertSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 142, AngelscriptParser::RuleAssertSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(859);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 14336) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TheTypeNameContext ------------------------------------------------------------------

AngelscriptParser::TheTypeNameContext::TheTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ClassNameContext* AngelscriptParser::TheTypeNameContext::className() {
  return getRuleContext<AngelscriptParser::ClassNameContext>(0);
}

AngelscriptParser::EnumNameContext* AngelscriptParser::TheTypeNameContext::enumName() {
  return getRuleContext<AngelscriptParser::EnumNameContext>(0);
}

AngelscriptParser::TypedefNameContext* AngelscriptParser::TheTypeNameContext::typedefName() {
  return getRuleContext<AngelscriptParser::TypedefNameContext>(0);
}


size_t AngelscriptParser::TheTypeNameContext::getRuleIndex() const {
  return AngelscriptParser::RuleTheTypeName;
}


std::any AngelscriptParser::TheTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTheTypeName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TheTypeNameContext* AngelscriptParser::theTypeName() {
  TheTypeNameContext *_localctx = _tracker.createInstance<TheTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 144, AngelscriptParser::RuleTheTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(864);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(861);
      className();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(862);
      enumName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(863);
      typedefName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecltypeSpecifierContext ------------------------------------------------------------------

AngelscriptParser::DecltypeSpecifierContext::DecltypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::DecltypeSpecifierContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

tree::TerminalNode* AngelscriptParser::DecltypeSpecifierContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

AngelscriptParser::ExpressionContext* AngelscriptParser::DecltypeSpecifierContext::expression() {
  return getRuleContext<AngelscriptParser::ExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::DecltypeSpecifierContext::Auto() {
  return getToken(AngelscriptParser::Auto, 0);
}


size_t AngelscriptParser::DecltypeSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleDecltypeSpecifier;
}


std::any AngelscriptParser::DecltypeSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDecltypeSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DecltypeSpecifierContext* AngelscriptParser::decltypeSpecifier() {
  DecltypeSpecifierContext *_localctx = _tracker.createInstance<DecltypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 146, AngelscriptParser::RuleDecltypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    match(AngelscriptParser::LeftParen);
    setState(869);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(867);
      expression();
      break;
    }

    case 2: {
      setState(868);
      match(AngelscriptParser::Auto);
      break;
    }

    default:
      break;
    }
    setState(871);
    match(AngelscriptParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElaboratedTypeSpecifierContext ------------------------------------------------------------------

AngelscriptParser::ElaboratedTypeSpecifierContext::ElaboratedTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ElaboratedTypeSpecifierContext::Class() {
  return getToken(AngelscriptParser::Class, 0);
}

tree::TerminalNode* AngelscriptParser::ElaboratedTypeSpecifierContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::ElaboratedTypeSpecifierContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::ElaboratedTypeSpecifierContext::Enum() {
  return getToken(AngelscriptParser::Enum, 0);
}


size_t AngelscriptParser::ElaboratedTypeSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleElaboratedTypeSpecifier;
}


std::any AngelscriptParser::ElaboratedTypeSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitElaboratedTypeSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ElaboratedTypeSpecifierContext* AngelscriptParser::elaboratedTypeSpecifier() {
  ElaboratedTypeSpecifierContext *_localctx = _tracker.createInstance<ElaboratedTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 148, AngelscriptParser::RuleElaboratedTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(886);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::Class: {
        enterOuterAlt(_localctx, 1);
        setState(873);
        match(AngelscriptParser::Class);
        setState(879);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
        case 1: {
          setState(875);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
          case 1: {
            setState(874);
            nestedNameSpecifier(0);
            break;
          }

          default:
            break;
          }
          setState(877);
          match(AngelscriptParser::Identifier);
          break;
        }

        case 2: {
          setState(878);
          nestedNameSpecifier(0);
          break;
        }

        default:
          break;
        }
        break;
      }

      case AngelscriptParser::Enum: {
        enterOuterAlt(_localctx, 2);
        setState(881);
        match(AngelscriptParser::Enum);
        setState(883);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          setState(882);
          nestedNameSpecifier(0);
          break;
        }

        default:
          break;
        }
        setState(885);
        match(AngelscriptParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumNameContext ------------------------------------------------------------------

AngelscriptParser::EnumNameContext::EnumNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::EnumNameContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::EnumNameContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumName;
}


std::any AngelscriptParser::EnumNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumNameContext* AngelscriptParser::enumName() {
  EnumNameContext *_localctx = _tracker.createInstance<EnumNameContext>(_ctx, getState());
  enterRule(_localctx, 150, AngelscriptParser::RuleEnumName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(888);
    match(AngelscriptParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumSpecifierContext ------------------------------------------------------------------

AngelscriptParser::EnumSpecifierContext::EnumSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::EnumHeadContext* AngelscriptParser::EnumSpecifierContext::enumHead() {
  return getRuleContext<AngelscriptParser::EnumHeadContext>(0);
}

tree::TerminalNode* AngelscriptParser::EnumSpecifierContext::LeftBrace() {
  return getToken(AngelscriptParser::LeftBrace, 0);
}

tree::TerminalNode* AngelscriptParser::EnumSpecifierContext::RightBrace() {
  return getToken(AngelscriptParser::RightBrace, 0);
}

AngelscriptParser::EnumeratorListContext* AngelscriptParser::EnumSpecifierContext::enumeratorList() {
  return getRuleContext<AngelscriptParser::EnumeratorListContext>(0);
}

tree::TerminalNode* AngelscriptParser::EnumSpecifierContext::Comma() {
  return getToken(AngelscriptParser::Comma, 0);
}


size_t AngelscriptParser::EnumSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumSpecifier;
}


std::any AngelscriptParser::EnumSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumSpecifierContext* AngelscriptParser::enumSpecifier() {
  EnumSpecifierContext *_localctx = _tracker.createInstance<EnumSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 152, AngelscriptParser::RuleEnumSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(890);
    enumHead();
    setState(891);
    match(AngelscriptParser::LeftBrace);
    setState(896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Identifier) {
      setState(892);
      enumeratorList();
      setState(894);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AngelscriptParser::Comma) {
        setState(893);
        match(AngelscriptParser::Comma);
      }
    }
    setState(898);
    match(AngelscriptParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumHeadContext ------------------------------------------------------------------

AngelscriptParser::EnumHeadContext::EnumHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::EnumkeyContext* AngelscriptParser::EnumHeadContext::enumkey() {
  return getRuleContext<AngelscriptParser::EnumkeyContext>(0);
}

tree::TerminalNode* AngelscriptParser::EnumHeadContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

AngelscriptParser::EnumbaseContext* AngelscriptParser::EnumHeadContext::enumbase() {
  return getRuleContext<AngelscriptParser::EnumbaseContext>(0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::EnumHeadContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}


size_t AngelscriptParser::EnumHeadContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumHead;
}


std::any AngelscriptParser::EnumHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumHead(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumHeadContext* AngelscriptParser::enumHead() {
  EnumHeadContext *_localctx = _tracker.createInstance<EnumHeadContext>(_ctx, getState());
  enterRule(_localctx, 154, AngelscriptParser::RuleEnumHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(900);
    enumkey();
    setState(905);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 61) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 61)) & 9895604649985) != 0)) {
      setState(902);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
      case 1: {
        setState(901);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(904);
      match(AngelscriptParser::Identifier);
    }
    setState(908);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Colon) {
      setState(907);
      enumbase();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpaqueEnumDeclarationContext ------------------------------------------------------------------

AngelscriptParser::OpaqueEnumDeclarationContext::OpaqueEnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::EnumkeyContext* AngelscriptParser::OpaqueEnumDeclarationContext::enumkey() {
  return getRuleContext<AngelscriptParser::EnumkeyContext>(0);
}

tree::TerminalNode* AngelscriptParser::OpaqueEnumDeclarationContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::OpaqueEnumDeclarationContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}

AngelscriptParser::EnumbaseContext* AngelscriptParser::OpaqueEnumDeclarationContext::enumbase() {
  return getRuleContext<AngelscriptParser::EnumbaseContext>(0);
}


size_t AngelscriptParser::OpaqueEnumDeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleOpaqueEnumDeclaration;
}


std::any AngelscriptParser::OpaqueEnumDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitOpaqueEnumDeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::OpaqueEnumDeclarationContext* AngelscriptParser::opaqueEnumDeclaration() {
  OpaqueEnumDeclarationContext *_localctx = _tracker.createInstance<OpaqueEnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 156, AngelscriptParser::RuleOpaqueEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    enumkey();
    setState(911);
    match(AngelscriptParser::Identifier);
    setState(913);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Colon) {
      setState(912);
      enumbase();
    }
    setState(915);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumkeyContext ------------------------------------------------------------------

AngelscriptParser::EnumkeyContext::EnumkeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::EnumkeyContext::Enum() {
  return getToken(AngelscriptParser::Enum, 0);
}


size_t AngelscriptParser::EnumkeyContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumkey;
}


std::any AngelscriptParser::EnumkeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumkey(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumkeyContext* AngelscriptParser::enumkey() {
  EnumkeyContext *_localctx = _tracker.createInstance<EnumkeyContext>(_ctx, getState());
  enterRule(_localctx, 158, AngelscriptParser::RuleEnumkey);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(917);
    match(AngelscriptParser::Enum);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumbaseContext ------------------------------------------------------------------

AngelscriptParser::EnumbaseContext::EnumbaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::EnumbaseContext::Colon() {
  return getToken(AngelscriptParser::Colon, 0);
}

AngelscriptParser::TypeSpecifierSeqContext* AngelscriptParser::EnumbaseContext::typeSpecifierSeq() {
  return getRuleContext<AngelscriptParser::TypeSpecifierSeqContext>(0);
}


size_t AngelscriptParser::EnumbaseContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumbase;
}


std::any AngelscriptParser::EnumbaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumbase(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumbaseContext* AngelscriptParser::enumbase() {
  EnumbaseContext *_localctx = _tracker.createInstance<EnumbaseContext>(_ctx, getState());
  enterRule(_localctx, 160, AngelscriptParser::RuleEnumbase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(919);
    match(AngelscriptParser::Colon);
    setState(920);
    typeSpecifierSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorListContext ------------------------------------------------------------------

AngelscriptParser::EnumeratorListContext::EnumeratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::EnumeratorDefinitionContext *> AngelscriptParser::EnumeratorListContext::enumeratorDefinition() {
  return getRuleContexts<AngelscriptParser::EnumeratorDefinitionContext>();
}

AngelscriptParser::EnumeratorDefinitionContext* AngelscriptParser::EnumeratorListContext::enumeratorDefinition(size_t i) {
  return getRuleContext<AngelscriptParser::EnumeratorDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::EnumeratorListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::EnumeratorListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::EnumeratorListContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumeratorList;
}


std::any AngelscriptParser::EnumeratorListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratorList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumeratorListContext* AngelscriptParser::enumeratorList() {
  EnumeratorListContext *_localctx = _tracker.createInstance<EnumeratorListContext>(_ctx, getState());
  enterRule(_localctx, 162, AngelscriptParser::RuleEnumeratorList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(922);
    enumeratorDefinition();
    setState(927);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(923);
        match(AngelscriptParser::Comma);
        setState(924);
        enumeratorDefinition(); 
      }
      setState(929);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorDefinitionContext ------------------------------------------------------------------

AngelscriptParser::EnumeratorDefinitionContext::EnumeratorDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::EnumeratorContext* AngelscriptParser::EnumeratorDefinitionContext::enumerator() {
  return getRuleContext<AngelscriptParser::EnumeratorContext>(0);
}

tree::TerminalNode* AngelscriptParser::EnumeratorDefinitionContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

AngelscriptParser::ConstantExpressionContext* AngelscriptParser::EnumeratorDefinitionContext::constantExpression() {
  return getRuleContext<AngelscriptParser::ConstantExpressionContext>(0);
}


size_t AngelscriptParser::EnumeratorDefinitionContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumeratorDefinition;
}


std::any AngelscriptParser::EnumeratorDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratorDefinition(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumeratorDefinitionContext* AngelscriptParser::enumeratorDefinition() {
  EnumeratorDefinitionContext *_localctx = _tracker.createInstance<EnumeratorDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 164, AngelscriptParser::RuleEnumeratorDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(930);
    enumerator();
    setState(933);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Assign) {
      setState(931);
      match(AngelscriptParser::Assign);
      setState(932);
      constantExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorContext ------------------------------------------------------------------

AngelscriptParser::EnumeratorContext::EnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::EnumeratorContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::EnumeratorContext::getRuleIndex() const {
  return AngelscriptParser::RuleEnumerator;
}


std::any AngelscriptParser::EnumeratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitEnumerator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::EnumeratorContext* AngelscriptParser::enumerator() {
  EnumeratorContext *_localctx = _tracker.createInstance<EnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 166, AngelscriptParser::RuleEnumerator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(935);
    match(AngelscriptParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceNameContext ------------------------------------------------------------------

AngelscriptParser::NamespaceNameContext::NamespaceNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::OriginalNamespaceNameContext* AngelscriptParser::NamespaceNameContext::originalNamespaceName() {
  return getRuleContext<AngelscriptParser::OriginalNamespaceNameContext>(0);
}

AngelscriptParser::NamespaceAliasContext* AngelscriptParser::NamespaceNameContext::namespaceAlias() {
  return getRuleContext<AngelscriptParser::NamespaceAliasContext>(0);
}


size_t AngelscriptParser::NamespaceNameContext::getRuleIndex() const {
  return AngelscriptParser::RuleNamespaceName;
}


std::any AngelscriptParser::NamespaceNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitNamespaceName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::NamespaceNameContext* AngelscriptParser::namespaceName() {
  NamespaceNameContext *_localctx = _tracker.createInstance<NamespaceNameContext>(_ctx, getState());
  enterRule(_localctx, 168, AngelscriptParser::RuleNamespaceName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(939);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(937);
      originalNamespaceName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(938);
      namespaceAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OriginalNamespaceNameContext ------------------------------------------------------------------

AngelscriptParser::OriginalNamespaceNameContext::OriginalNamespaceNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::OriginalNamespaceNameContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::OriginalNamespaceNameContext::getRuleIndex() const {
  return AngelscriptParser::RuleOriginalNamespaceName;
}


std::any AngelscriptParser::OriginalNamespaceNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitOriginalNamespaceName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::OriginalNamespaceNameContext* AngelscriptParser::originalNamespaceName() {
  OriginalNamespaceNameContext *_localctx = _tracker.createInstance<OriginalNamespaceNameContext>(_ctx, getState());
  enterRule(_localctx, 170, AngelscriptParser::RuleOriginalNamespaceName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(941);
    match(AngelscriptParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceDefinitionContext ------------------------------------------------------------------

AngelscriptParser::NamespaceDefinitionContext::NamespaceDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::NamespaceDefinitionContext::Namespace() {
  return getToken(AngelscriptParser::Namespace, 0);
}

tree::TerminalNode* AngelscriptParser::NamespaceDefinitionContext::LeftBrace() {
  return getToken(AngelscriptParser::LeftBrace, 0);
}

tree::TerminalNode* AngelscriptParser::NamespaceDefinitionContext::RightBrace() {
  return getToken(AngelscriptParser::RightBrace, 0);
}

tree::TerminalNode* AngelscriptParser::NamespaceDefinitionContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

AngelscriptParser::OriginalNamespaceNameContext* AngelscriptParser::NamespaceDefinitionContext::originalNamespaceName() {
  return getRuleContext<AngelscriptParser::OriginalNamespaceNameContext>(0);
}

AngelscriptParser::DeclarationseqContext* AngelscriptParser::NamespaceDefinitionContext::declarationseq() {
  return getRuleContext<AngelscriptParser::DeclarationseqContext>(0);
}


size_t AngelscriptParser::NamespaceDefinitionContext::getRuleIndex() const {
  return AngelscriptParser::RuleNamespaceDefinition;
}


std::any AngelscriptParser::NamespaceDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitNamespaceDefinition(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::NamespaceDefinitionContext* AngelscriptParser::namespaceDefinition() {
  NamespaceDefinitionContext *_localctx = _tracker.createInstance<NamespaceDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 172, AngelscriptParser::RuleNamespaceDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(943);
    match(AngelscriptParser::Namespace);
    setState(946);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      setState(944);
      match(AngelscriptParser::Identifier);
      break;
    }

    case 2: {
      setState(945);
      originalNamespaceName();
      break;
    }

    default:
      break;
    }
    setState(948);
    match(AngelscriptParser::LeftBrace);
    setState(950);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5828288461429277954) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 190589174727) != 0)) {
      setState(949);
      antlrcpp::downCast<NamespaceDefinitionContext *>(_localctx)->namespaceBody = declarationseq();
    }
    setState(952);
    match(AngelscriptParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceAliasContext ------------------------------------------------------------------

AngelscriptParser::NamespaceAliasContext::NamespaceAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::NamespaceAliasContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::NamespaceAliasContext::getRuleIndex() const {
  return AngelscriptParser::RuleNamespaceAlias;
}


std::any AngelscriptParser::NamespaceAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitNamespaceAlias(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::NamespaceAliasContext* AngelscriptParser::namespaceAlias() {
  NamespaceAliasContext *_localctx = _tracker.createInstance<NamespaceAliasContext>(_ctx, getState());
  enterRule(_localctx, 174, AngelscriptParser::RuleNamespaceAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(954);
    match(AngelscriptParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceAliasDefinitionContext ------------------------------------------------------------------

AngelscriptParser::NamespaceAliasDefinitionContext::NamespaceAliasDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::NamespaceAliasDefinitionContext::Namespace() {
  return getToken(AngelscriptParser::Namespace, 0);
}

tree::TerminalNode* AngelscriptParser::NamespaceAliasDefinitionContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::NamespaceAliasDefinitionContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

AngelscriptParser::QualifiednamespacespecifierContext* AngelscriptParser::NamespaceAliasDefinitionContext::qualifiednamespacespecifier() {
  return getRuleContext<AngelscriptParser::QualifiednamespacespecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::NamespaceAliasDefinitionContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}


size_t AngelscriptParser::NamespaceAliasDefinitionContext::getRuleIndex() const {
  return AngelscriptParser::RuleNamespaceAliasDefinition;
}


std::any AngelscriptParser::NamespaceAliasDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitNamespaceAliasDefinition(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::NamespaceAliasDefinitionContext* AngelscriptParser::namespaceAliasDefinition() {
  NamespaceAliasDefinitionContext *_localctx = _tracker.createInstance<NamespaceAliasDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 176, AngelscriptParser::RuleNamespaceAliasDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(956);
    match(AngelscriptParser::Namespace);
    setState(957);
    match(AngelscriptParser::Identifier);
    setState(958);
    match(AngelscriptParser::Assign);
    setState(959);
    qualifiednamespacespecifier();
    setState(960);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiednamespacespecifierContext ------------------------------------------------------------------

AngelscriptParser::QualifiednamespacespecifierContext::QualifiednamespacespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::NamespaceNameContext* AngelscriptParser::QualifiednamespacespecifierContext::namespaceName() {
  return getRuleContext<AngelscriptParser::NamespaceNameContext>(0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::QualifiednamespacespecifierContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}


size_t AngelscriptParser::QualifiednamespacespecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleQualifiednamespacespecifier;
}


std::any AngelscriptParser::QualifiednamespacespecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitQualifiednamespacespecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::QualifiednamespacespecifierContext* AngelscriptParser::qualifiednamespacespecifier() {
  QualifiednamespacespecifierContext *_localctx = _tracker.createInstance<QualifiednamespacespecifierContext>(_ctx, getState());
  enterRule(_localctx, 178, AngelscriptParser::RuleQualifiednamespacespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(963);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(962);
      nestedNameSpecifier(0);
      break;
    }

    default:
      break;
    }
    setState(965);
    namespaceName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BalancedTokenSeqContext ------------------------------------------------------------------

AngelscriptParser::BalancedTokenSeqContext::BalancedTokenSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::BalancedtokenContext *> AngelscriptParser::BalancedTokenSeqContext::balancedtoken() {
  return getRuleContexts<AngelscriptParser::BalancedtokenContext>();
}

AngelscriptParser::BalancedtokenContext* AngelscriptParser::BalancedTokenSeqContext::balancedtoken(size_t i) {
  return getRuleContext<AngelscriptParser::BalancedtokenContext>(i);
}


size_t AngelscriptParser::BalancedTokenSeqContext::getRuleIndex() const {
  return AngelscriptParser::RuleBalancedTokenSeq;
}


std::any AngelscriptParser::BalancedTokenSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBalancedTokenSeq(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BalancedTokenSeqContext* AngelscriptParser::balancedTokenSeq() {
  BalancedTokenSeqContext *_localctx = _tracker.createInstance<BalancedTokenSeqContext>(_ctx, getState());
  enterRule(_localctx, 180, AngelscriptParser::RuleBalancedTokenSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(967);
      balancedtoken();
      setState(970); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4611686018427387906) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 36028797018963965) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BalancedtokenContext ------------------------------------------------------------------

AngelscriptParser::BalancedtokenContext::BalancedtokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AngelscriptParser::BalancedtokenContext::LeftParen() {
  return getTokens(AngelscriptParser::LeftParen);
}

tree::TerminalNode* AngelscriptParser::BalancedtokenContext::LeftParen(size_t i) {
  return getToken(AngelscriptParser::LeftParen, i);
}

AngelscriptParser::BalancedTokenSeqContext* AngelscriptParser::BalancedtokenContext::balancedTokenSeq() {
  return getRuleContext<AngelscriptParser::BalancedTokenSeqContext>(0);
}

std::vector<tree::TerminalNode *> AngelscriptParser::BalancedtokenContext::RightParen() {
  return getTokens(AngelscriptParser::RightParen);
}

tree::TerminalNode* AngelscriptParser::BalancedtokenContext::RightParen(size_t i) {
  return getToken(AngelscriptParser::RightParen, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::BalancedtokenContext::LeftBracket() {
  return getTokens(AngelscriptParser::LeftBracket);
}

tree::TerminalNode* AngelscriptParser::BalancedtokenContext::LeftBracket(size_t i) {
  return getToken(AngelscriptParser::LeftBracket, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::BalancedtokenContext::RightBracket() {
  return getTokens(AngelscriptParser::RightBracket);
}

tree::TerminalNode* AngelscriptParser::BalancedtokenContext::RightBracket(size_t i) {
  return getToken(AngelscriptParser::RightBracket, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::BalancedtokenContext::LeftBrace() {
  return getTokens(AngelscriptParser::LeftBrace);
}

tree::TerminalNode* AngelscriptParser::BalancedtokenContext::LeftBrace(size_t i) {
  return getToken(AngelscriptParser::LeftBrace, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::BalancedtokenContext::RightBrace() {
  return getTokens(AngelscriptParser::RightBrace);
}

tree::TerminalNode* AngelscriptParser::BalancedtokenContext::RightBrace(size_t i) {
  return getToken(AngelscriptParser::RightBrace, i);
}


size_t AngelscriptParser::BalancedtokenContext::getRuleIndex() const {
  return AngelscriptParser::RuleBalancedtoken;
}


std::any AngelscriptParser::BalancedtokenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBalancedtoken(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BalancedtokenContext* AngelscriptParser::balancedtoken() {
  BalancedtokenContext *_localctx = _tracker.createInstance<BalancedtokenContext>(_ctx, getState());
  enterRule(_localctx, 182, AngelscriptParser::RuleBalancedtoken);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(989);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::LeftParen: {
        enterOuterAlt(_localctx, 1);
        setState(972);
        match(AngelscriptParser::LeftParen);
        setState(973);
        balancedTokenSeq();
        setState(974);
        match(AngelscriptParser::RightParen);
        break;
      }

      case AngelscriptParser::LeftBracket: {
        enterOuterAlt(_localctx, 2);
        setState(976);
        match(AngelscriptParser::LeftBracket);
        setState(977);
        balancedTokenSeq();
        setState(978);
        match(AngelscriptParser::RightBracket);
        break;
      }

      case AngelscriptParser::LeftBrace: {
        enterOuterAlt(_localctx, 3);
        setState(980);
        match(AngelscriptParser::LeftBrace);
        setState(981);
        balancedTokenSeq();
        setState(982);
        match(AngelscriptParser::RightBrace);
        break;
      }

      case AngelscriptParser::IntegerLiteral:
      case AngelscriptParser::CharacterLiteral:
      case AngelscriptParser::FloatingLiteral:
      case AngelscriptParser::StringLiteral:
      case AngelscriptParser::UserDefinedLiteral:
      case AngelscriptParser::Cast:
      case AngelscriptParser::Import:
      case AngelscriptParser::From:
      case AngelscriptParser::Out:
      case AngelscriptParser::Property:
      case AngelscriptParser::Ensure:
      case AngelscriptParser::EnsureAlways:
      case AngelscriptParser::Check:
      case AngelscriptParser::Mixin:
      case AngelscriptParser::Int:
      case AngelscriptParser::Int8:
      case AngelscriptParser::Int16:
      case AngelscriptParser::Int32:
      case AngelscriptParser::Int64:
      case AngelscriptParser::UInt:
      case AngelscriptParser::UInt8:
      case AngelscriptParser::UInt16:
      case AngelscriptParser::UInt32:
      case AngelscriptParser::UInt64:
      case AngelscriptParser::Float:
      case AngelscriptParser::Double:
      case AngelscriptParser::Bool:
      case AngelscriptParser::Auto:
      case AngelscriptParser::Break:
      case AngelscriptParser::Case:
      case AngelscriptParser::Catch:
      case AngelscriptParser::Char:
      case AngelscriptParser::Class:
      case AngelscriptParser::Const:
      case AngelscriptParser::Continue:
      case AngelscriptParser::Default:
      case AngelscriptParser::Do:
      case AngelscriptParser::Else:
      case AngelscriptParser::Enum:
      case AngelscriptParser::Export:
      case AngelscriptParser::False_:
      case AngelscriptParser::Final:
      case AngelscriptParser::For:
      case AngelscriptParser::Goto:
      case AngelscriptParser::If:
      case AngelscriptParser::Namespace:
      case AngelscriptParser::Nullptr:
      case AngelscriptParser::Operator:
      case AngelscriptParser::Override:
      case AngelscriptParser::Private:
      case AngelscriptParser::Protected:
      case AngelscriptParser::Public:
      case AngelscriptParser::Return:
      case AngelscriptParser::Short:
      case AngelscriptParser::Switch:
      case AngelscriptParser::This:
      case AngelscriptParser::True_:
      case AngelscriptParser::Virtual:
      case AngelscriptParser::Void:
      case AngelscriptParser::While:
      case AngelscriptParser::Plus:
      case AngelscriptParser::Minus:
      case AngelscriptParser::Star:
      case AngelscriptParser::Div:
      case AngelscriptParser::Mod:
      case AngelscriptParser::Xor:
      case AngelscriptParser::And:
      case AngelscriptParser::Or:
      case AngelscriptParser::Tilde:
      case AngelscriptParser::Not:
      case AngelscriptParser::Assign:
      case AngelscriptParser::Less:
      case AngelscriptParser::Greater:
      case AngelscriptParser::PlusAssign:
      case AngelscriptParser::MinusAssign:
      case AngelscriptParser::StarAssign:
      case AngelscriptParser::DivAssign:
      case AngelscriptParser::ModAssign:
      case AngelscriptParser::XorAssign:
      case AngelscriptParser::AndAssign:
      case AngelscriptParser::OrAssign:
      case AngelscriptParser::LeftShiftAssign:
      case AngelscriptParser::RightShiftAssign:
      case AngelscriptParser::Equal:
      case AngelscriptParser::NotEqual:
      case AngelscriptParser::LessEqual:
      case AngelscriptParser::GreaterEqual:
      case AngelscriptParser::AndAnd:
      case AngelscriptParser::OrOr:
      case AngelscriptParser::PlusPlus:
      case AngelscriptParser::MinusMinus:
      case AngelscriptParser::Comma:
      case AngelscriptParser::Question:
      case AngelscriptParser::Colon:
      case AngelscriptParser::Doublecolon:
      case AngelscriptParser::Semi:
      case AngelscriptParser::Dot:
      case AngelscriptParser::Identifier:
      case AngelscriptParser::DecimalLiteral:
      case AngelscriptParser::OctalLiteral:
      case AngelscriptParser::HexadecimalLiteral:
      case AngelscriptParser::BinaryLiteral:
      case AngelscriptParser::Integersuffix:
      case AngelscriptParser::UserDefinedIntegerLiteral:
      case AngelscriptParser::UserDefinedFloatingLiteral:
      case AngelscriptParser::UserDefinedStringLiteral:
      case AngelscriptParser::UserDefinedCharacterLiteral:
      case AngelscriptParser::Whitespace:
      case AngelscriptParser::Newline:
      case AngelscriptParser::BlockComment:
      case AngelscriptParser::LineComment:
      case AngelscriptParser::PreprocessorBranchRemoval:
      case AngelscriptParser::Preprocessor: {
        enterOuterAlt(_localctx, 4);
        setState(985); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(984);
                  _la = _input->LA(1);
                  if (_la == 0 || _la == Token::EOF || (((((_la - 61) & ~ 0x3fULL) == 0) &&
                    ((1ULL << (_la - 61)) & 63) != 0))) {
                  _errHandler->recoverInline(this);
                  }
                  else {
                    _errHandler->reportMatch(this);
                    consume();
                  }
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(987); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorListContext ------------------------------------------------------------------

AngelscriptParser::InitDeclaratorListContext::InitDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::InitDeclaratorContext *> AngelscriptParser::InitDeclaratorListContext::initDeclarator() {
  return getRuleContexts<AngelscriptParser::InitDeclaratorContext>();
}

AngelscriptParser::InitDeclaratorContext* AngelscriptParser::InitDeclaratorListContext::initDeclarator(size_t i) {
  return getRuleContext<AngelscriptParser::InitDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::InitDeclaratorListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::InitDeclaratorListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::InitDeclaratorListContext::getRuleIndex() const {
  return AngelscriptParser::RuleInitDeclaratorList;
}


std::any AngelscriptParser::InitDeclaratorListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitInitDeclaratorList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::InitDeclaratorListContext* AngelscriptParser::initDeclaratorList() {
  InitDeclaratorListContext *_localctx = _tracker.createInstance<InitDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 184, AngelscriptParser::RuleInitDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(991);
    initDeclarator();
    setState(996);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Comma) {
      setState(992);
      match(AngelscriptParser::Comma);
      setState(993);
      initDeclarator();
      setState(998);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorContext ------------------------------------------------------------------

AngelscriptParser::InitDeclaratorContext::InitDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::InitDeclaratorContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

AngelscriptParser::InitializerContext* AngelscriptParser::InitDeclaratorContext::initializer() {
  return getRuleContext<AngelscriptParser::InitializerContext>(0);
}


size_t AngelscriptParser::InitDeclaratorContext::getRuleIndex() const {
  return AngelscriptParser::RuleInitDeclarator;
}


std::any AngelscriptParser::InitDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitInitDeclarator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::InitDeclaratorContext* AngelscriptParser::initDeclarator() {
  InitDeclaratorContext *_localctx = _tracker.createInstance<InitDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 186, AngelscriptParser::RuleInitDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(999);
    match(AngelscriptParser::Identifier);
    setState(1001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 61) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 61)) & 65557) != 0)) {
      setState(1000);
      initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorContext ------------------------------------------------------------------

AngelscriptParser::DeclaratorContext::DeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::DeclaratorDefContext* AngelscriptParser::DeclaratorContext::declaratorDef() {
  return getRuleContext<AngelscriptParser::DeclaratorDefContext>(0);
}

AngelscriptParser::ParametersAndQualifiersContext* AngelscriptParser::DeclaratorContext::parametersAndQualifiers() {
  return getRuleContext<AngelscriptParser::ParametersAndQualifiersContext>(0);
}


size_t AngelscriptParser::DeclaratorContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclarator;
}


std::any AngelscriptParser::DeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclarator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DeclaratorContext* AngelscriptParser::declarator() {
  DeclaratorContext *_localctx = _tracker.createInstance<DeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 188, AngelscriptParser::RuleDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1003);
    declaratorDef(0);
    setState(1004);
    parametersAndQualifiers();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorDefContext ------------------------------------------------------------------

AngelscriptParser::DeclaratorDefContext::DeclaratorDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::DeclaratoridContext* AngelscriptParser::DeclaratorDefContext::declaratorid() {
  return getRuleContext<AngelscriptParser::DeclaratoridContext>(0);
}

AngelscriptParser::DeclaratorDefContext* AngelscriptParser::DeclaratorDefContext::declaratorDef() {
  return getRuleContext<AngelscriptParser::DeclaratorDefContext>(0);
}

AngelscriptParser::ParametersAndQualifiersContext* AngelscriptParser::DeclaratorDefContext::parametersAndQualifiers() {
  return getRuleContext<AngelscriptParser::ParametersAndQualifiersContext>(0);
}

tree::TerminalNode* AngelscriptParser::DeclaratorDefContext::LeftBracket() {
  return getToken(AngelscriptParser::LeftBracket, 0);
}

tree::TerminalNode* AngelscriptParser::DeclaratorDefContext::RightBracket() {
  return getToken(AngelscriptParser::RightBracket, 0);
}

AngelscriptParser::ConstantExpressionContext* AngelscriptParser::DeclaratorDefContext::constantExpression() {
  return getRuleContext<AngelscriptParser::ConstantExpressionContext>(0);
}


size_t AngelscriptParser::DeclaratorDefContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclaratorDef;
}


std::any AngelscriptParser::DeclaratorDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclaratorDef(this);
  else
    return visitor->visitChildren(this);
}


AngelscriptParser::DeclaratorDefContext* AngelscriptParser::declaratorDef() {
   return declaratorDef(0);
}

AngelscriptParser::DeclaratorDefContext* AngelscriptParser::declaratorDef(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AngelscriptParser::DeclaratorDefContext *_localctx = _tracker.createInstance<DeclaratorDefContext>(_ctx, parentState);
  AngelscriptParser::DeclaratorDefContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 190;
  enterRecursionRule(_localctx, 190, AngelscriptParser::RuleDeclaratorDef, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1007);
    declaratorid();
    _ctx->stop = _input->LT(-1);
    setState(1020);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<DeclaratorDefContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDeclaratorDef);
        setState(1009);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1016);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case AngelscriptParser::LeftParen: {
            setState(1010);
            parametersAndQualifiers();
            break;
          }

          case AngelscriptParser::LeftBracket: {
            setState(1011);
            match(AngelscriptParser::LeftBracket);
            setState(1013);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 67)) & 156229436359) != 0)) {
              setState(1012);
              constantExpression();
            }
            setState(1015);
            match(AngelscriptParser::RightBracket);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(1022);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParametersAndQualifiersContext ------------------------------------------------------------------

AngelscriptParser::ParametersAndQualifiersContext::ParametersAndQualifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ParametersAndQualifiersContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

tree::TerminalNode* AngelscriptParser::ParametersAndQualifiersContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

AngelscriptParser::ParameterDeclarationClauseContext* AngelscriptParser::ParametersAndQualifiersContext::parameterDeclarationClause() {
  return getRuleContext<AngelscriptParser::ParameterDeclarationClauseContext>(0);
}

tree::TerminalNode* AngelscriptParser::ParametersAndQualifiersContext::Const() {
  return getToken(AngelscriptParser::Const, 0);
}

AngelscriptParser::RefqualifierContext* AngelscriptParser::ParametersAndQualifiersContext::refqualifier() {
  return getRuleContext<AngelscriptParser::RefqualifierContext>(0);
}


size_t AngelscriptParser::ParametersAndQualifiersContext::getRuleIndex() const {
  return AngelscriptParser::RuleParametersAndQualifiers;
}


std::any AngelscriptParser::ParametersAndQualifiersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitParametersAndQualifiers(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ParametersAndQualifiersContext* AngelscriptParser::parametersAndQualifiers() {
  ParametersAndQualifiersContext *_localctx = _tracker.createInstance<ParametersAndQualifiersContext>(_ctx, getState());
  enterRule(_localctx, 192, AngelscriptParser::RuleParametersAndQualifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1023);
    match(AngelscriptParser::LeftParen);
    setState(1025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3170534713731285504) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 2415919105) != 0)) {
      setState(1024);
      parameterDeclarationClause();
    }
    setState(1027);
    match(AngelscriptParser::RightParen);
    setState(1029);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      setState(1028);
      match(AngelscriptParser::Const);
      break;
    }

    default:
      break;
    }
    setState(1032);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1031);
      refqualifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RefqualifierContext ------------------------------------------------------------------

AngelscriptParser::RefqualifierContext::RefqualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::RefqualifierContext::And() {
  return getToken(AngelscriptParser::And, 0);
}

tree::TerminalNode* AngelscriptParser::RefqualifierContext::AndAnd() {
  return getToken(AngelscriptParser::AndAnd, 0);
}


size_t AngelscriptParser::RefqualifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleRefqualifier;
}


std::any AngelscriptParser::RefqualifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitRefqualifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::RefqualifierContext* AngelscriptParser::refqualifier() {
  RefqualifierContext *_localctx = _tracker.createInstance<RefqualifierContext>(_ctx, getState());
  enterRule(_localctx, 194, AngelscriptParser::RuleRefqualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1034);
    _la = _input->LA(1);
    if (!(_la == AngelscriptParser::And

    || _la == AngelscriptParser::AndAnd)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratoridContext ------------------------------------------------------------------

AngelscriptParser::DeclaratoridContext::DeclaratoridContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::IdExpressionContext* AngelscriptParser::DeclaratoridContext::idExpression() {
  return getRuleContext<AngelscriptParser::IdExpressionContext>(0);
}


size_t AngelscriptParser::DeclaratoridContext::getRuleIndex() const {
  return AngelscriptParser::RuleDeclaratorid;
}


std::any AngelscriptParser::DeclaratoridContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitDeclaratorid(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::DeclaratoridContext* AngelscriptParser::declaratorid() {
  DeclaratoridContext *_localctx = _tracker.createInstance<DeclaratoridContext>(_ctx, getState());
  enterRule(_localctx, 196, AngelscriptParser::RuleDeclaratorid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1036);
    idExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TheTypeIdContext ------------------------------------------------------------------

AngelscriptParser::TheTypeIdContext::TheTypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::TypeSpecifierSeqContext* AngelscriptParser::TheTypeIdContext::typeSpecifierSeq() {
  return getRuleContext<AngelscriptParser::TypeSpecifierSeqContext>(0);
}


size_t AngelscriptParser::TheTypeIdContext::getRuleIndex() const {
  return AngelscriptParser::RuleTheTypeId;
}


std::any AngelscriptParser::TheTypeIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTheTypeId(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TheTypeIdContext* AngelscriptParser::theTypeId() {
  TheTypeIdContext *_localctx = _tracker.createInstance<TheTypeIdContext>(_ctx, getState());
  enterRule(_localctx, 198, AngelscriptParser::RuleTheTypeId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    typeSpecifierSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationClauseContext ------------------------------------------------------------------

AngelscriptParser::ParameterDeclarationClauseContext::ParameterDeclarationClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ParameterDeclarationListContext* AngelscriptParser::ParameterDeclarationClauseContext::parameterDeclarationList() {
  return getRuleContext<AngelscriptParser::ParameterDeclarationListContext>(0);
}


size_t AngelscriptParser::ParameterDeclarationClauseContext::getRuleIndex() const {
  return AngelscriptParser::RuleParameterDeclarationClause;
}


std::any AngelscriptParser::ParameterDeclarationClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitParameterDeclarationClause(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ParameterDeclarationClauseContext* AngelscriptParser::parameterDeclarationClause() {
  ParameterDeclarationClauseContext *_localctx = _tracker.createInstance<ParameterDeclarationClauseContext>(_ctx, getState());
  enterRule(_localctx, 200, AngelscriptParser::RuleParameterDeclarationClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1040);
    parameterDeclarationList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationListContext ------------------------------------------------------------------

AngelscriptParser::ParameterDeclarationListContext::ParameterDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::ParameterDeclarationContext *> AngelscriptParser::ParameterDeclarationListContext::parameterDeclaration() {
  return getRuleContexts<AngelscriptParser::ParameterDeclarationContext>();
}

AngelscriptParser::ParameterDeclarationContext* AngelscriptParser::ParameterDeclarationListContext::parameterDeclaration(size_t i) {
  return getRuleContext<AngelscriptParser::ParameterDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::ParameterDeclarationListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::ParameterDeclarationListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::ParameterDeclarationListContext::getRuleIndex() const {
  return AngelscriptParser::RuleParameterDeclarationList;
}


std::any AngelscriptParser::ParameterDeclarationListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitParameterDeclarationList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ParameterDeclarationListContext* AngelscriptParser::parameterDeclarationList() {
  ParameterDeclarationListContext *_localctx = _tracker.createInstance<ParameterDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 202, AngelscriptParser::RuleParameterDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1042);
    parameterDeclaration();
    setState(1047);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Comma) {
      setState(1043);
      match(AngelscriptParser::Comma);
      setState(1044);
      parameterDeclaration();
      setState(1049);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationContext ------------------------------------------------------------------

AngelscriptParser::ParameterDeclarationContext::ParameterDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::ParameterDeclarationContext::declSpecifierSeq() {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(0);
}

tree::TerminalNode* AngelscriptParser::ParameterDeclarationContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::ParameterDeclarationContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

AngelscriptParser::InitializerClauseContext* AngelscriptParser::ParameterDeclarationContext::initializerClause() {
  return getRuleContext<AngelscriptParser::InitializerClauseContext>(0);
}


size_t AngelscriptParser::ParameterDeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleParameterDeclaration;
}


std::any AngelscriptParser::ParameterDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitParameterDeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ParameterDeclarationContext* AngelscriptParser::parameterDeclaration() {
  ParameterDeclarationContext *_localctx = _tracker.createInstance<ParameterDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 204, AngelscriptParser::RuleParameterDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1050);
    declSpecifierSeq();
    setState(1052);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Identifier) {
      setState(1051);
      match(AngelscriptParser::Identifier);
    }
    setState(1056);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Assign) {
      setState(1054);
      match(AngelscriptParser::Assign);
      setState(1055);
      initializerClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDefinitionContext ------------------------------------------------------------------

AngelscriptParser::FunctionDefinitionContext::FunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::DeclaratorContext* AngelscriptParser::FunctionDefinitionContext::declarator() {
  return getRuleContext<AngelscriptParser::DeclaratorContext>(0);
}

AngelscriptParser::FunctionBodyContext* AngelscriptParser::FunctionDefinitionContext::functionBody() {
  return getRuleContext<AngelscriptParser::FunctionBodyContext>(0);
}

AngelscriptParser::AccessSpecifierContext* AngelscriptParser::FunctionDefinitionContext::accessSpecifier() {
  return getRuleContext<AngelscriptParser::AccessSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::FunctionDefinitionContext::Mixin() {
  return getToken(AngelscriptParser::Mixin, 0);
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::FunctionDefinitionContext::declSpecifierSeq() {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(0);
}

AngelscriptParser::PostFuncSpecifierSeqContext* AngelscriptParser::FunctionDefinitionContext::postFuncSpecifierSeq() {
  return getRuleContext<AngelscriptParser::PostFuncSpecifierSeqContext>(0);
}


size_t AngelscriptParser::FunctionDefinitionContext::getRuleIndex() const {
  return AngelscriptParser::RuleFunctionDefinition;
}


std::any AngelscriptParser::FunctionDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitFunctionDefinition(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::FunctionDefinitionContext* AngelscriptParser::functionDefinition() {
  FunctionDefinitionContext *_localctx = _tracker.createInstance<FunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 206, AngelscriptParser::RuleFunctionDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1059);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 7881299347898368) != 0)) {
      setState(1058);
      accessSpecifier();
    }
    setState(1062);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Mixin) {
      setState(1061);
      match(AngelscriptParser::Mixin);
    }
    setState(1065);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      setState(1064);
      declSpecifierSeq();
      break;
    }

    default:
      break;
    }
    setState(1067);
    declarator();
    setState(1069);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 567347999933440) != 0)) {
      setState(1068);
      postFuncSpecifierSeq();
    }
    setState(1071);
    functionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionBodyContext ------------------------------------------------------------------

AngelscriptParser::FunctionBodyContext::FunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::CompoundStatementContext* AngelscriptParser::FunctionBodyContext::compoundStatement() {
  return getRuleContext<AngelscriptParser::CompoundStatementContext>(0);
}

tree::TerminalNode* AngelscriptParser::FunctionBodyContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

tree::TerminalNode* AngelscriptParser::FunctionBodyContext::Default() {
  return getToken(AngelscriptParser::Default, 0);
}

tree::TerminalNode* AngelscriptParser::FunctionBodyContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}


size_t AngelscriptParser::FunctionBodyContext::getRuleIndex() const {
  return AngelscriptParser::RuleFunctionBody;
}


std::any AngelscriptParser::FunctionBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitFunctionBody(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::FunctionBodyContext* AngelscriptParser::functionBody() {
  FunctionBodyContext *_localctx = _tracker.createInstance<FunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 208, AngelscriptParser::RuleFunctionBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1078);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::LeftBrace: {
        enterOuterAlt(_localctx, 1);
        setState(1073);
        compoundStatement();
        break;
      }

      case AngelscriptParser::Assign: {
        enterOuterAlt(_localctx, 2);
        setState(1074);
        match(AngelscriptParser::Assign);
        setState(1075);
        match(AngelscriptParser::Default);
        setState(1076);
        match(AngelscriptParser::Semi);
        break;
      }

      case AngelscriptParser::Semi: {
        enterOuterAlt(_localctx, 3);
        setState(1077);
        match(AngelscriptParser::Semi);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

AngelscriptParser::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::BraceOrEqualInitializerContext* AngelscriptParser::InitializerContext::braceOrEqualInitializer() {
  return getRuleContext<AngelscriptParser::BraceOrEqualInitializerContext>(0);
}

tree::TerminalNode* AngelscriptParser::InitializerContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

AngelscriptParser::ExpressionListContext* AngelscriptParser::InitializerContext::expressionList() {
  return getRuleContext<AngelscriptParser::ExpressionListContext>(0);
}

tree::TerminalNode* AngelscriptParser::InitializerContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}


size_t AngelscriptParser::InitializerContext::getRuleIndex() const {
  return AngelscriptParser::RuleInitializer;
}


std::any AngelscriptParser::InitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitInitializer(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::InitializerContext* AngelscriptParser::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 210, AngelscriptParser::RuleInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1085);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::LeftBracket:
      case AngelscriptParser::LeftBrace:
      case AngelscriptParser::Assign: {
        enterOuterAlt(_localctx, 1);
        setState(1080);
        braceOrEqualInitializer();
        break;
      }

      case AngelscriptParser::LeftParen: {
        enterOuterAlt(_localctx, 2);
        setState(1081);
        match(AngelscriptParser::LeftParen);
        setState(1082);
        expressionList();
        setState(1083);
        match(AngelscriptParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BraceOrEqualInitializerContext ------------------------------------------------------------------

AngelscriptParser::BraceOrEqualInitializerContext::BraceOrEqualInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::BraceOrEqualInitializerContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

AngelscriptParser::InitializerClauseContext* AngelscriptParser::BraceOrEqualInitializerContext::initializerClause() {
  return getRuleContext<AngelscriptParser::InitializerClauseContext>(0);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::BraceOrEqualInitializerContext::bracedInitList() {
  return getRuleContext<AngelscriptParser::BracedInitListContext>(0);
}


size_t AngelscriptParser::BraceOrEqualInitializerContext::getRuleIndex() const {
  return AngelscriptParser::RuleBraceOrEqualInitializer;
}


std::any AngelscriptParser::BraceOrEqualInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBraceOrEqualInitializer(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BraceOrEqualInitializerContext* AngelscriptParser::braceOrEqualInitializer() {
  BraceOrEqualInitializerContext *_localctx = _tracker.createInstance<BraceOrEqualInitializerContext>(_ctx, getState());
  enterRule(_localctx, 212, AngelscriptParser::RuleBraceOrEqualInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1090);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::Assign: {
        enterOuterAlt(_localctx, 1);
        setState(1087);
        match(AngelscriptParser::Assign);
        setState(1088);
        initializerClause();
        break;
      }

      case AngelscriptParser::LeftBracket:
      case AngelscriptParser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(1089);
        bracedInitList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerClauseContext ------------------------------------------------------------------

AngelscriptParser::InitializerClauseContext::InitializerClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::AssignmentExpressionContext* AngelscriptParser::InitializerClauseContext::assignmentExpression() {
  return getRuleContext<AngelscriptParser::AssignmentExpressionContext>(0);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::InitializerClauseContext::bracedInitList() {
  return getRuleContext<AngelscriptParser::BracedInitListContext>(0);
}


size_t AngelscriptParser::InitializerClauseContext::getRuleIndex() const {
  return AngelscriptParser::RuleInitializerClause;
}


std::any AngelscriptParser::InitializerClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitInitializerClause(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::InitializerClauseContext* AngelscriptParser::initializerClause() {
  InitializerClauseContext *_localctx = _tracker.createInstance<InitializerClauseContext>(_ctx, getState());
  enterRule(_localctx, 214, AngelscriptParser::RuleInitializerClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1094);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1092);
      assignmentExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1093);
      bracedInitList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerListContext ------------------------------------------------------------------

AngelscriptParser::InitializerListContext::InitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::InitializerClauseContext *> AngelscriptParser::InitializerListContext::initializerClause() {
  return getRuleContexts<AngelscriptParser::InitializerClauseContext>();
}

AngelscriptParser::InitializerClauseContext* AngelscriptParser::InitializerListContext::initializerClause(size_t i) {
  return getRuleContext<AngelscriptParser::InitializerClauseContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::InitializerListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::InitializerListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::InitializerListContext::getRuleIndex() const {
  return AngelscriptParser::RuleInitializerList;
}


std::any AngelscriptParser::InitializerListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitInitializerList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::InitializerListContext* AngelscriptParser::initializerList() {
  InitializerListContext *_localctx = _tracker.createInstance<InitializerListContext>(_ctx, getState());
  enterRule(_localctx, 216, AngelscriptParser::RuleInitializerList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1096);
    initializerClause();
    setState(1101);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1097);
        match(AngelscriptParser::Comma);
        setState(1098);
        initializerClause(); 
      }
      setState(1103);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    }
    setState(1105);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      setState(1104);
      match(AngelscriptParser::Comma);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BracedInitListContext ------------------------------------------------------------------

AngelscriptParser::BracedInitListContext::BracedInitListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::BracedInitListContext::LeftBrace() {
  return getToken(AngelscriptParser::LeftBrace, 0);
}

tree::TerminalNode* AngelscriptParser::BracedInitListContext::LeftBracket() {
  return getToken(AngelscriptParser::LeftBracket, 0);
}

tree::TerminalNode* AngelscriptParser::BracedInitListContext::RightBrace() {
  return getToken(AngelscriptParser::RightBrace, 0);
}

tree::TerminalNode* AngelscriptParser::BracedInitListContext::RightBracket() {
  return getToken(AngelscriptParser::RightBracket, 0);
}

AngelscriptParser::InitializerListContext* AngelscriptParser::BracedInitListContext::initializerList() {
  return getRuleContext<AngelscriptParser::InitializerListContext>(0);
}

tree::TerminalNode* AngelscriptParser::BracedInitListContext::Comma() {
  return getToken(AngelscriptParser::Comma, 0);
}


size_t AngelscriptParser::BracedInitListContext::getRuleIndex() const {
  return AngelscriptParser::RuleBracedInitList;
}


std::any AngelscriptParser::BracedInitListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBracedInitList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BracedInitListContext* AngelscriptParser::bracedInitList() {
  BracedInitListContext *_localctx = _tracker.createInstance<BracedInitListContext>(_ctx, getState());
  enterRule(_localctx, 218, AngelscriptParser::RuleBracedInitList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    _la = _input->LA(1);
    if (!(_la == AngelscriptParser::LeftBracket

    || _la == AngelscriptParser::LeftBrace)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1112);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6124471081198700418) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 624917745437) != 0)) {
      setState(1108);
      initializerList();
      setState(1110);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AngelscriptParser::Comma) {
        setState(1109);
        match(AngelscriptParser::Comma);
      }
    }
    setState(1114);
    _la = _input->LA(1);
    if (!(_la == AngelscriptParser::RightBracket

    || _la == AngelscriptParser::RightBrace)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassNameContext ------------------------------------------------------------------

AngelscriptParser::ClassNameContext::ClassNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ClassNameContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::ClassNameContext::getRuleIndex() const {
  return AngelscriptParser::RuleClassName;
}


std::any AngelscriptParser::ClassNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitClassName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ClassNameContext* AngelscriptParser::className() {
  ClassNameContext *_localctx = _tracker.createInstance<ClassNameContext>(_ctx, getState());
  enterRule(_localctx, 220, AngelscriptParser::RuleClassName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1116);
    match(AngelscriptParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassSpecifierContext ------------------------------------------------------------------

AngelscriptParser::ClassSpecifierContext::ClassSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ClassHeadContext* AngelscriptParser::ClassSpecifierContext::classHead() {
  return getRuleContext<AngelscriptParser::ClassHeadContext>(0);
}

tree::TerminalNode* AngelscriptParser::ClassSpecifierContext::LeftBrace() {
  return getToken(AngelscriptParser::LeftBrace, 0);
}

tree::TerminalNode* AngelscriptParser::ClassSpecifierContext::RightBrace() {
  return getToken(AngelscriptParser::RightBrace, 0);
}

AngelscriptParser::MemberSpecificationContext* AngelscriptParser::ClassSpecifierContext::memberSpecification() {
  return getRuleContext<AngelscriptParser::MemberSpecificationContext>(0);
}


size_t AngelscriptParser::ClassSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleClassSpecifier;
}


std::any AngelscriptParser::ClassSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitClassSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ClassSpecifierContext* AngelscriptParser::classSpecifier() {
  ClassSpecifierContext *_localctx = _tracker.createInstance<ClassSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 222, AngelscriptParser::RuleClassSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1118);
    classHead();
    setState(1119);
    match(AngelscriptParser::LeftBrace);
    setState(1121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5828358761453979010) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 199179109319) != 0)) {
      setState(1120);
      memberSpecification();
    }
    setState(1123);
    match(AngelscriptParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeadContext ------------------------------------------------------------------

AngelscriptParser::ClassHeadContext::ClassHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ClassHeadContext::Class() {
  return getToken(AngelscriptParser::Class, 0);
}

AngelscriptParser::ClassHeadNameContext* AngelscriptParser::ClassHeadContext::classHeadName() {
  return getRuleContext<AngelscriptParser::ClassHeadNameContext>(0);
}

AngelscriptParser::BaseClauseContext* AngelscriptParser::ClassHeadContext::baseClause() {
  return getRuleContext<AngelscriptParser::BaseClauseContext>(0);
}

AngelscriptParser::ClassVirtSpecifierContext* AngelscriptParser::ClassHeadContext::classVirtSpecifier() {
  return getRuleContext<AngelscriptParser::ClassVirtSpecifierContext>(0);
}


size_t AngelscriptParser::ClassHeadContext::getRuleIndex() const {
  return AngelscriptParser::RuleClassHead;
}


std::any AngelscriptParser::ClassHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitClassHead(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ClassHeadContext* AngelscriptParser::classHead() {
  ClassHeadContext *_localctx = _tracker.createInstance<ClassHeadContext>(_ctx, getState());
  enterRule(_localctx, 224, AngelscriptParser::RuleClassHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1125);
    match(AngelscriptParser::Class);
    setState(1130);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 61) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 61)) & 9895604649985) != 0)) {
      setState(1126);
      classHeadName();
      setState(1128);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AngelscriptParser::Final) {
        setState(1127);
        classVirtSpecifier();
      }
    }
    setState(1133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Colon) {
      setState(1132);
      baseClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeadNameContext ------------------------------------------------------------------

AngelscriptParser::ClassHeadNameContext::ClassHeadNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ClassNameContext* AngelscriptParser::ClassHeadNameContext::className() {
  return getRuleContext<AngelscriptParser::ClassNameContext>(0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::ClassHeadNameContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}


size_t AngelscriptParser::ClassHeadNameContext::getRuleIndex() const {
  return AngelscriptParser::RuleClassHeadName;
}


std::any AngelscriptParser::ClassHeadNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitClassHeadName(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ClassHeadNameContext* AngelscriptParser::classHeadName() {
  ClassHeadNameContext *_localctx = _tracker.createInstance<ClassHeadNameContext>(_ctx, getState());
  enterRule(_localctx, 226, AngelscriptParser::RuleClassHeadName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1136);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      setState(1135);
      nestedNameSpecifier(0);
      break;
    }

    default:
      break;
    }
    setState(1138);
    className();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassVirtSpecifierContext ------------------------------------------------------------------

AngelscriptParser::ClassVirtSpecifierContext::ClassVirtSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::ClassVirtSpecifierContext::Final() {
  return getToken(AngelscriptParser::Final, 0);
}


size_t AngelscriptParser::ClassVirtSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleClassVirtSpecifier;
}


std::any AngelscriptParser::ClassVirtSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitClassVirtSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ClassVirtSpecifierContext* AngelscriptParser::classVirtSpecifier() {
  ClassVirtSpecifierContext *_localctx = _tracker.createInstance<ClassVirtSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 228, AngelscriptParser::RuleClassVirtSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1140);
    match(AngelscriptParser::Final);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberSpecificationContext ------------------------------------------------------------------

AngelscriptParser::MemberSpecificationContext::MemberSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::MemberdeclarationContext *> AngelscriptParser::MemberSpecificationContext::memberdeclaration() {
  return getRuleContexts<AngelscriptParser::MemberdeclarationContext>();
}

AngelscriptParser::MemberdeclarationContext* AngelscriptParser::MemberSpecificationContext::memberdeclaration(size_t i) {
  return getRuleContext<AngelscriptParser::MemberdeclarationContext>(i);
}

std::vector<AngelscriptParser::AccessSpecifierContext *> AngelscriptParser::MemberSpecificationContext::accessSpecifier() {
  return getRuleContexts<AngelscriptParser::AccessSpecifierContext>();
}

AngelscriptParser::AccessSpecifierContext* AngelscriptParser::MemberSpecificationContext::accessSpecifier(size_t i) {
  return getRuleContext<AngelscriptParser::AccessSpecifierContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::MemberSpecificationContext::Colon() {
  return getTokens(AngelscriptParser::Colon);
}

tree::TerminalNode* AngelscriptParser::MemberSpecificationContext::Colon(size_t i) {
  return getToken(AngelscriptParser::Colon, i);
}


size_t AngelscriptParser::MemberSpecificationContext::getRuleIndex() const {
  return AngelscriptParser::RuleMemberSpecification;
}


std::any AngelscriptParser::MemberSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitMemberSpecification(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::MemberSpecificationContext* AngelscriptParser::memberSpecification() {
  MemberSpecificationContext *_localctx = _tracker.createInstance<MemberSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 230, AngelscriptParser::RuleMemberSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1146); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1146);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
      case 1: {
        setState(1142);
        memberdeclaration();
        break;
      }

      case 2: {
        setState(1143);
        accessSpecifier();
        setState(1144);
        match(AngelscriptParser::Colon);
        break;
      }

      default:
        break;
      }
      setState(1148); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5828358761453979010) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 199179109319) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberdeclarationContext ------------------------------------------------------------------

AngelscriptParser::MemberdeclarationContext::MemberdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::PropertyDefinitionContext* AngelscriptParser::MemberdeclarationContext::propertyDefinition() {
  return getRuleContext<AngelscriptParser::PropertyDefinitionContext>(0);
}

AngelscriptParser::FunctionDefinitionContext* AngelscriptParser::MemberdeclarationContext::functionDefinition() {
  return getRuleContext<AngelscriptParser::FunctionDefinitionContext>(0);
}

AngelscriptParser::AliasDeclarationContext* AngelscriptParser::MemberdeclarationContext::aliasDeclaration() {
  return getRuleContext<AngelscriptParser::AliasDeclarationContext>(0);
}

AngelscriptParser::EmptyDeclaration_Context* AngelscriptParser::MemberdeclarationContext::emptyDeclaration_() {
  return getRuleContext<AngelscriptParser::EmptyDeclaration_Context>(0);
}


size_t AngelscriptParser::MemberdeclarationContext::getRuleIndex() const {
  return AngelscriptParser::RuleMemberdeclaration;
}


std::any AngelscriptParser::MemberdeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitMemberdeclaration(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::MemberdeclarationContext* AngelscriptParser::memberdeclaration() {
  MemberdeclarationContext *_localctx = _tracker.createInstance<MemberdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 232, AngelscriptParser::RuleMemberdeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1154);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1150);
      propertyDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1151);
      functionDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1152);
      aliasDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1153);
      emptyDeclaration_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyDefinitionContext ------------------------------------------------------------------

AngelscriptParser::PropertyDefinitionContext::PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::PropertyDefinitionContext::Semi() {
  return getToken(AngelscriptParser::Semi, 0);
}

AngelscriptParser::AccessSpecifierContext* AngelscriptParser::PropertyDefinitionContext::accessSpecifier() {
  return getRuleContext<AngelscriptParser::AccessSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::PropertyDefinitionContext::Default() {
  return getToken(AngelscriptParser::Default, 0);
}

AngelscriptParser::DeclSpecifierSeqContext* AngelscriptParser::PropertyDefinitionContext::declSpecifierSeq() {
  return getRuleContext<AngelscriptParser::DeclSpecifierSeqContext>(0);
}

AngelscriptParser::MemberDeclaratorListContext* AngelscriptParser::PropertyDefinitionContext::memberDeclaratorList() {
  return getRuleContext<AngelscriptParser::MemberDeclaratorListContext>(0);
}

AngelscriptParser::AssignmentExpressionContext* AngelscriptParser::PropertyDefinitionContext::assignmentExpression() {
  return getRuleContext<AngelscriptParser::AssignmentExpressionContext>(0);
}


size_t AngelscriptParser::PropertyDefinitionContext::getRuleIndex() const {
  return AngelscriptParser::RulePropertyDefinition;
}


std::any AngelscriptParser::PropertyDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitPropertyDefinition(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::PropertyDefinitionContext* AngelscriptParser::propertyDefinition() {
  PropertyDefinitionContext *_localctx = _tracker.createInstance<PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 234, AngelscriptParser::RulePropertyDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 7881299347898368) != 0)) {
      setState(1156);
      accessSpecifier();
    }
    setState(1160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AngelscriptParser::Default) {
      setState(1159);
      match(AngelscriptParser::Default);
    }
    setState(1163);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      setState(1162);
      declSpecifierSeq();
      break;
    }

    default:
      break;
    }
    setState(1167);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      setState(1165);
      memberDeclaratorList();
      break;
    }

    case 2: {
      setState(1166);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
    setState(1169);
    match(AngelscriptParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberDeclaratorListContext ------------------------------------------------------------------

AngelscriptParser::MemberDeclaratorListContext::MemberDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::MemberDeclaratorContext *> AngelscriptParser::MemberDeclaratorListContext::memberDeclarator() {
  return getRuleContexts<AngelscriptParser::MemberDeclaratorContext>();
}

AngelscriptParser::MemberDeclaratorContext* AngelscriptParser::MemberDeclaratorListContext::memberDeclarator(size_t i) {
  return getRuleContext<AngelscriptParser::MemberDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::MemberDeclaratorListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::MemberDeclaratorListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::MemberDeclaratorListContext::getRuleIndex() const {
  return AngelscriptParser::RuleMemberDeclaratorList;
}


std::any AngelscriptParser::MemberDeclaratorListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitMemberDeclaratorList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::MemberDeclaratorListContext* AngelscriptParser::memberDeclaratorList() {
  MemberDeclaratorListContext *_localctx = _tracker.createInstance<MemberDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 236, AngelscriptParser::RuleMemberDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1171);
    memberDeclarator();
    setState(1176);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Comma) {
      setState(1172);
      match(AngelscriptParser::Comma);
      setState(1173);
      memberDeclarator();
      setState(1178);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberDeclaratorContext ------------------------------------------------------------------

AngelscriptParser::MemberDeclaratorContext::MemberDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::DeclaratorContext* AngelscriptParser::MemberDeclaratorContext::declarator() {
  return getRuleContext<AngelscriptParser::DeclaratorContext>(0);
}

AngelscriptParser::PostFuncSpecifierSeqContext* AngelscriptParser::MemberDeclaratorContext::postFuncSpecifierSeq() {
  return getRuleContext<AngelscriptParser::PostFuncSpecifierSeqContext>(0);
}

AngelscriptParser::BraceOrEqualInitializerContext* AngelscriptParser::MemberDeclaratorContext::braceOrEqualInitializer() {
  return getRuleContext<AngelscriptParser::BraceOrEqualInitializerContext>(0);
}

tree::TerminalNode* AngelscriptParser::MemberDeclaratorContext::Colon() {
  return getToken(AngelscriptParser::Colon, 0);
}

AngelscriptParser::ConstantExpressionContext* AngelscriptParser::MemberDeclaratorContext::constantExpression() {
  return getRuleContext<AngelscriptParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* AngelscriptParser::MemberDeclaratorContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}


size_t AngelscriptParser::MemberDeclaratorContext::getRuleIndex() const {
  return AngelscriptParser::RuleMemberDeclarator;
}


std::any AngelscriptParser::MemberDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitMemberDeclarator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::MemberDeclaratorContext* AngelscriptParser::memberDeclarator() {
  MemberDeclaratorContext *_localctx = _tracker.createInstance<MemberDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 238, AngelscriptParser::RuleMemberDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1194);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1179);
      declarator();
      setState(1186);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
      case 1: {
        setState(1181);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 567347999933440) != 0)) {
          setState(1180);
          postFuncSpecifierSeq();
        }
        break;
      }

      case 2: {
        setState(1184);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 63) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 63)) & 16389) != 0)) {
          setState(1183);
          braceOrEqualInitializer();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1189);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AngelscriptParser::Identifier) {
        setState(1188);
        match(AngelscriptParser::Identifier);
      }
      setState(1191);
      match(AngelscriptParser::Colon);
      setState(1192);
      constantExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1193);
      match(AngelscriptParser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostFuncSpecifierSeqContext ------------------------------------------------------------------

AngelscriptParser::PostFuncSpecifierSeqContext::PostFuncSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::VirtualSpecifierContext *> AngelscriptParser::PostFuncSpecifierSeqContext::virtualSpecifier() {
  return getRuleContexts<AngelscriptParser::VirtualSpecifierContext>();
}

AngelscriptParser::VirtualSpecifierContext* AngelscriptParser::PostFuncSpecifierSeqContext::virtualSpecifier(size_t i) {
  return getRuleContext<AngelscriptParser::VirtualSpecifierContext>(i);
}


size_t AngelscriptParser::PostFuncSpecifierSeqContext::getRuleIndex() const {
  return AngelscriptParser::RulePostFuncSpecifierSeq;
}


std::any AngelscriptParser::PostFuncSpecifierSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitPostFuncSpecifierSeq(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::PostFuncSpecifierSeqContext* AngelscriptParser::postFuncSpecifierSeq() {
  PostFuncSpecifierSeqContext *_localctx = _tracker.createInstance<PostFuncSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 240, AngelscriptParser::RulePostFuncSpecifierSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1197); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1196);
      virtualSpecifier();
      setState(1199); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 567347999933440) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VirtualSpecifierContext ------------------------------------------------------------------

AngelscriptParser::VirtualSpecifierContext::VirtualSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::VirtualSpecifierContext::Override() {
  return getToken(AngelscriptParser::Override, 0);
}

tree::TerminalNode* AngelscriptParser::VirtualSpecifierContext::Final() {
  return getToken(AngelscriptParser::Final, 0);
}

tree::TerminalNode* AngelscriptParser::VirtualSpecifierContext::Property() {
  return getToken(AngelscriptParser::Property, 0);
}


size_t AngelscriptParser::VirtualSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleVirtualSpecifier;
}


std::any AngelscriptParser::VirtualSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitVirtualSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::VirtualSpecifierContext* AngelscriptParser::virtualSpecifier() {
  VirtualSpecifierContext *_localctx = _tracker.createInstance<VirtualSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 242, AngelscriptParser::RuleVirtualSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1201);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 567347999933440) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseClauseContext ------------------------------------------------------------------

AngelscriptParser::BaseClauseContext::BaseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::BaseClauseContext::Colon() {
  return getToken(AngelscriptParser::Colon, 0);
}

AngelscriptParser::BaseSpecifierListContext* AngelscriptParser::BaseClauseContext::baseSpecifierList() {
  return getRuleContext<AngelscriptParser::BaseSpecifierListContext>(0);
}


size_t AngelscriptParser::BaseClauseContext::getRuleIndex() const {
  return AngelscriptParser::RuleBaseClause;
}


std::any AngelscriptParser::BaseClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBaseClause(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BaseClauseContext* AngelscriptParser::baseClause() {
  BaseClauseContext *_localctx = _tracker.createInstance<BaseClauseContext>(_ctx, getState());
  enterRule(_localctx, 244, AngelscriptParser::RuleBaseClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1203);
    match(AngelscriptParser::Colon);
    setState(1204);
    baseSpecifierList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseSpecifierListContext ------------------------------------------------------------------

AngelscriptParser::BaseSpecifierListContext::BaseSpecifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AngelscriptParser::BaseSpecifierContext *> AngelscriptParser::BaseSpecifierListContext::baseSpecifier() {
  return getRuleContexts<AngelscriptParser::BaseSpecifierContext>();
}

AngelscriptParser::BaseSpecifierContext* AngelscriptParser::BaseSpecifierListContext::baseSpecifier(size_t i) {
  return getRuleContext<AngelscriptParser::BaseSpecifierContext>(i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::BaseSpecifierListContext::Comma() {
  return getTokens(AngelscriptParser::Comma);
}

tree::TerminalNode* AngelscriptParser::BaseSpecifierListContext::Comma(size_t i) {
  return getToken(AngelscriptParser::Comma, i);
}


size_t AngelscriptParser::BaseSpecifierListContext::getRuleIndex() const {
  return AngelscriptParser::RuleBaseSpecifierList;
}


std::any AngelscriptParser::BaseSpecifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBaseSpecifierList(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BaseSpecifierListContext* AngelscriptParser::baseSpecifierList() {
  BaseSpecifierListContext *_localctx = _tracker.createInstance<BaseSpecifierListContext>(_ctx, getState());
  enterRule(_localctx, 246, AngelscriptParser::RuleBaseSpecifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1206);
    baseSpecifier();
    setState(1211);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AngelscriptParser::Comma) {
      setState(1207);
      match(AngelscriptParser::Comma);
      setState(1208);
      baseSpecifier();
      setState(1213);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseSpecifierContext ------------------------------------------------------------------

AngelscriptParser::BaseSpecifierContext::BaseSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::BaseTypeSpecifierContext* AngelscriptParser::BaseSpecifierContext::baseTypeSpecifier() {
  return getRuleContext<AngelscriptParser::BaseTypeSpecifierContext>(0);
}

tree::TerminalNode* AngelscriptParser::BaseSpecifierContext::Virtual() {
  return getToken(AngelscriptParser::Virtual, 0);
}

AngelscriptParser::AccessSpecifierContext* AngelscriptParser::BaseSpecifierContext::accessSpecifier() {
  return getRuleContext<AngelscriptParser::AccessSpecifierContext>(0);
}


size_t AngelscriptParser::BaseSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleBaseSpecifier;
}


std::any AngelscriptParser::BaseSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBaseSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BaseSpecifierContext* AngelscriptParser::baseSpecifier() {
  BaseSpecifierContext *_localctx = _tracker.createInstance<BaseSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 248, AngelscriptParser::RuleBaseSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1226);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::LeftParen:
      case AngelscriptParser::Doublecolon:
      case AngelscriptParser::Identifier: {
        setState(1214);
        baseTypeSpecifier();
        break;
      }

      case AngelscriptParser::Virtual: {
        setState(1215);
        match(AngelscriptParser::Virtual);
        setState(1217);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 7881299347898368) != 0)) {
          setState(1216);
          accessSpecifier();
        }
        setState(1219);
        baseTypeSpecifier();
        break;
      }

      case AngelscriptParser::Private:
      case AngelscriptParser::Protected:
      case AngelscriptParser::Public: {
        setState(1220);
        accessSpecifier();
        setState(1222);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AngelscriptParser::Virtual) {
          setState(1221);
          match(AngelscriptParser::Virtual);
        }
        setState(1224);
        baseTypeSpecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrDeclTypeContext ------------------------------------------------------------------

AngelscriptParser::ClassOrDeclTypeContext::ClassOrDeclTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ClassNameContext* AngelscriptParser::ClassOrDeclTypeContext::className() {
  return getRuleContext<AngelscriptParser::ClassNameContext>(0);
}

AngelscriptParser::NestedNameSpecifierContext* AngelscriptParser::ClassOrDeclTypeContext::nestedNameSpecifier() {
  return getRuleContext<AngelscriptParser::NestedNameSpecifierContext>(0);
}

AngelscriptParser::DecltypeSpecifierContext* AngelscriptParser::ClassOrDeclTypeContext::decltypeSpecifier() {
  return getRuleContext<AngelscriptParser::DecltypeSpecifierContext>(0);
}


size_t AngelscriptParser::ClassOrDeclTypeContext::getRuleIndex() const {
  return AngelscriptParser::RuleClassOrDeclType;
}


std::any AngelscriptParser::ClassOrDeclTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitClassOrDeclType(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::ClassOrDeclTypeContext* AngelscriptParser::classOrDeclType() {
  ClassOrDeclTypeContext *_localctx = _tracker.createInstance<ClassOrDeclTypeContext>(_ctx, getState());
  enterRule(_localctx, 250, AngelscriptParser::RuleClassOrDeclType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1233);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1229);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
      case 1: {
        setState(1228);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(1231);
      className();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1232);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseTypeSpecifierContext ------------------------------------------------------------------

AngelscriptParser::BaseTypeSpecifierContext::BaseTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AngelscriptParser::ClassOrDeclTypeContext* AngelscriptParser::BaseTypeSpecifierContext::classOrDeclType() {
  return getRuleContext<AngelscriptParser::ClassOrDeclTypeContext>(0);
}


size_t AngelscriptParser::BaseTypeSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleBaseTypeSpecifier;
}


std::any AngelscriptParser::BaseTypeSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitBaseTypeSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::BaseTypeSpecifierContext* AngelscriptParser::baseTypeSpecifier() {
  BaseTypeSpecifierContext *_localctx = _tracker.createInstance<BaseTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 252, AngelscriptParser::RuleBaseTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1235);
    classOrDeclType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessSpecifierContext ------------------------------------------------------------------

AngelscriptParser::AccessSpecifierContext::AccessSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::AccessSpecifierContext::Private() {
  return getToken(AngelscriptParser::Private, 0);
}

tree::TerminalNode* AngelscriptParser::AccessSpecifierContext::Protected() {
  return getToken(AngelscriptParser::Protected, 0);
}

tree::TerminalNode* AngelscriptParser::AccessSpecifierContext::Public() {
  return getToken(AngelscriptParser::Public, 0);
}


size_t AngelscriptParser::AccessSpecifierContext::getRuleIndex() const {
  return AngelscriptParser::RuleAccessSpecifier;
}


std::any AngelscriptParser::AccessSpecifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitAccessSpecifier(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::AccessSpecifierContext* AngelscriptParser::accessSpecifier() {
  AccessSpecifierContext *_localctx = _tracker.createInstance<AccessSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 254, AngelscriptParser::RuleAccessSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 7881299347898368) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorFunctionIdContext ------------------------------------------------------------------

AngelscriptParser::OperatorFunctionIdContext::OperatorFunctionIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::OperatorFunctionIdContext::Operator() {
  return getToken(AngelscriptParser::Operator, 0);
}

AngelscriptParser::TheOperatorContext* AngelscriptParser::OperatorFunctionIdContext::theOperator() {
  return getRuleContext<AngelscriptParser::TheOperatorContext>(0);
}


size_t AngelscriptParser::OperatorFunctionIdContext::getRuleIndex() const {
  return AngelscriptParser::RuleOperatorFunctionId;
}


std::any AngelscriptParser::OperatorFunctionIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitOperatorFunctionId(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::OperatorFunctionIdContext* AngelscriptParser::operatorFunctionId() {
  OperatorFunctionIdContext *_localctx = _tracker.createInstance<OperatorFunctionIdContext>(_ctx, getState());
  enterRule(_localctx, 256, AngelscriptParser::RuleOperatorFunctionId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1239);
    match(AngelscriptParser::Operator);
    setState(1240);
    theOperator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralOperatorIdContext ------------------------------------------------------------------

AngelscriptParser::LiteralOperatorIdContext::LiteralOperatorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::LiteralOperatorIdContext::Operator() {
  return getToken(AngelscriptParser::Operator, 0);
}

tree::TerminalNode* AngelscriptParser::LiteralOperatorIdContext::StringLiteral() {
  return getToken(AngelscriptParser::StringLiteral, 0);
}

tree::TerminalNode* AngelscriptParser::LiteralOperatorIdContext::Identifier() {
  return getToken(AngelscriptParser::Identifier, 0);
}

tree::TerminalNode* AngelscriptParser::LiteralOperatorIdContext::UserDefinedStringLiteral() {
  return getToken(AngelscriptParser::UserDefinedStringLiteral, 0);
}


size_t AngelscriptParser::LiteralOperatorIdContext::getRuleIndex() const {
  return AngelscriptParser::RuleLiteralOperatorId;
}


std::any AngelscriptParser::LiteralOperatorIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLiteralOperatorId(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LiteralOperatorIdContext* AngelscriptParser::literalOperatorId() {
  LiteralOperatorIdContext *_localctx = _tracker.createInstance<LiteralOperatorIdContext>(_ctx, getState());
  enterRule(_localctx, 258, AngelscriptParser::RuleLiteralOperatorId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1242);
    match(AngelscriptParser::Operator);
    setState(1246);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::StringLiteral: {
        setState(1243);
        match(AngelscriptParser::StringLiteral);
        setState(1244);
        match(AngelscriptParser::Identifier);
        break;
      }

      case AngelscriptParser::UserDefinedStringLiteral: {
        setState(1245);
        match(AngelscriptParser::UserDefinedStringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TheOperatorContext ------------------------------------------------------------------

AngelscriptParser::TheOperatorContext::TheOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Plus() {
  return getToken(AngelscriptParser::Plus, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Minus() {
  return getToken(AngelscriptParser::Minus, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Star() {
  return getToken(AngelscriptParser::Star, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Div() {
  return getToken(AngelscriptParser::Div, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Mod() {
  return getToken(AngelscriptParser::Mod, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Xor() {
  return getToken(AngelscriptParser::Xor, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::And() {
  return getToken(AngelscriptParser::And, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Or() {
  return getToken(AngelscriptParser::Or, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Tilde() {
  return getToken(AngelscriptParser::Tilde, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Not() {
  return getToken(AngelscriptParser::Not, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Assign() {
  return getToken(AngelscriptParser::Assign, 0);
}

std::vector<tree::TerminalNode *> AngelscriptParser::TheOperatorContext::Greater() {
  return getTokens(AngelscriptParser::Greater);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Greater(size_t i) {
  return getToken(AngelscriptParser::Greater, i);
}

std::vector<tree::TerminalNode *> AngelscriptParser::TheOperatorContext::Less() {
  return getTokens(AngelscriptParser::Less);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Less(size_t i) {
  return getToken(AngelscriptParser::Less, i);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::GreaterEqual() {
  return getToken(AngelscriptParser::GreaterEqual, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::PlusAssign() {
  return getToken(AngelscriptParser::PlusAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::MinusAssign() {
  return getToken(AngelscriptParser::MinusAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::StarAssign() {
  return getToken(AngelscriptParser::StarAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::ModAssign() {
  return getToken(AngelscriptParser::ModAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::XorAssign() {
  return getToken(AngelscriptParser::XorAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::AndAssign() {
  return getToken(AngelscriptParser::AndAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::OrAssign() {
  return getToken(AngelscriptParser::OrAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::RightShiftAssign() {
  return getToken(AngelscriptParser::RightShiftAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::LeftShiftAssign() {
  return getToken(AngelscriptParser::LeftShiftAssign, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Equal() {
  return getToken(AngelscriptParser::Equal, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::NotEqual() {
  return getToken(AngelscriptParser::NotEqual, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::LessEqual() {
  return getToken(AngelscriptParser::LessEqual, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::AndAnd() {
  return getToken(AngelscriptParser::AndAnd, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::OrOr() {
  return getToken(AngelscriptParser::OrOr, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::PlusPlus() {
  return getToken(AngelscriptParser::PlusPlus, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::MinusMinus() {
  return getToken(AngelscriptParser::MinusMinus, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::Comma() {
  return getToken(AngelscriptParser::Comma, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::LeftParen() {
  return getToken(AngelscriptParser::LeftParen, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::RightParen() {
  return getToken(AngelscriptParser::RightParen, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::LeftBracket() {
  return getToken(AngelscriptParser::LeftBracket, 0);
}

tree::TerminalNode* AngelscriptParser::TheOperatorContext::RightBracket() {
  return getToken(AngelscriptParser::RightBracket, 0);
}


size_t AngelscriptParser::TheOperatorContext::getRuleIndex() const {
  return AngelscriptParser::RuleTheOperator;
}


std::any AngelscriptParser::TheOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitTheOperator(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::TheOperatorContext* AngelscriptParser::theOperator() {
  TheOperatorContext *_localctx = _tracker.createInstance<TheOperatorContext>(_ctx, getState());
  enterRule(_localctx, 260, AngelscriptParser::RuleTheOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1288);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);

      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1249);
      match(AngelscriptParser::Plus);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1250);
      match(AngelscriptParser::Minus);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1251);
      match(AngelscriptParser::Star);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1252);
      match(AngelscriptParser::Div);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1253);
      match(AngelscriptParser::Mod);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1254);
      match(AngelscriptParser::Xor);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1255);
      match(AngelscriptParser::And);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1256);
      match(AngelscriptParser::Or);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1257);
      match(AngelscriptParser::Tilde);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1258);
      match(AngelscriptParser::Not);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1259);
      match(AngelscriptParser::Assign);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1260);
      match(AngelscriptParser::Greater);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1261);
      match(AngelscriptParser::Less);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1262);
      match(AngelscriptParser::GreaterEqual);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1263);
      match(AngelscriptParser::PlusAssign);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1264);
      match(AngelscriptParser::MinusAssign);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1265);
      match(AngelscriptParser::StarAssign);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1266);
      match(AngelscriptParser::ModAssign);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1267);
      match(AngelscriptParser::XorAssign);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1268);
      match(AngelscriptParser::AndAssign);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(1269);
      match(AngelscriptParser::OrAssign);
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(1270);
      match(AngelscriptParser::Less);
      setState(1271);
      match(AngelscriptParser::Less);
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(1272);
      match(AngelscriptParser::Greater);
      setState(1273);
      match(AngelscriptParser::Greater);
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(1274);
      match(AngelscriptParser::RightShiftAssign);
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(1275);
      match(AngelscriptParser::LeftShiftAssign);
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(1276);
      match(AngelscriptParser::Equal);
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(1277);
      match(AngelscriptParser::NotEqual);
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(1278);
      match(AngelscriptParser::LessEqual);
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(1279);
      match(AngelscriptParser::AndAnd);
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(1280);
      match(AngelscriptParser::OrOr);
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(1281);
      match(AngelscriptParser::PlusPlus);
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(1282);
      match(AngelscriptParser::MinusMinus);
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(1283);
      match(AngelscriptParser::Comma);
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(1284);
      match(AngelscriptParser::LeftParen);
      setState(1285);
      match(AngelscriptParser::RightParen);
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(1286);
      match(AngelscriptParser::LeftBracket);
      setState(1287);
      match(AngelscriptParser::RightBracket);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

AngelscriptParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AngelscriptParser::LiteralContext::IntegerLiteral() {
  return getToken(AngelscriptParser::IntegerLiteral, 0);
}

tree::TerminalNode* AngelscriptParser::LiteralContext::CharacterLiteral() {
  return getToken(AngelscriptParser::CharacterLiteral, 0);
}

tree::TerminalNode* AngelscriptParser::LiteralContext::FloatingLiteral() {
  return getToken(AngelscriptParser::FloatingLiteral, 0);
}

tree::TerminalNode* AngelscriptParser::LiteralContext::StringLiteral() {
  return getToken(AngelscriptParser::StringLiteral, 0);
}

AngelscriptParser::BooleanLiteralContext* AngelscriptParser::LiteralContext::booleanLiteral() {
  return getRuleContext<AngelscriptParser::BooleanLiteralContext>(0);
}

tree::TerminalNode* AngelscriptParser::LiteralContext::UserDefinedLiteral() {
  return getToken(AngelscriptParser::UserDefinedLiteral, 0);
}

tree::TerminalNode* AngelscriptParser::LiteralContext::Nullptr() {
  return getToken(AngelscriptParser::Nullptr, 0);
}


size_t AngelscriptParser::LiteralContext::getRuleIndex() const {
  return AngelscriptParser::RuleLiteral;
}


std::any AngelscriptParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<AngelscriptParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

AngelscriptParser::LiteralContext* AngelscriptParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 262, AngelscriptParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1297);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AngelscriptParser::IntegerLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(1290);
        match(AngelscriptParser::IntegerLiteral);
        break;
      }

      case AngelscriptParser::CharacterLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1291);
        match(AngelscriptParser::CharacterLiteral);
        break;
      }

      case AngelscriptParser::FloatingLiteral: {
        enterOuterAlt(_localctx, 3);
        setState(1292);
        match(AngelscriptParser::FloatingLiteral);
        break;
      }

      case AngelscriptParser::StringLiteral: {
        enterOuterAlt(_localctx, 4);
        setState(1293);
        match(AngelscriptParser::StringLiteral);
        break;
      }

      case AngelscriptParser::False_:
      case AngelscriptParser::True_: {
        enterOuterAlt(_localctx, 5);
        setState(1294);
        booleanLiteral();
        break;
      }

      case AngelscriptParser::UserDefinedLiteral: {
        enterOuterAlt(_localctx, 6);
        setState(1295);
        match(AngelscriptParser::UserDefinedLiteral);
        break;
      }

      case AngelscriptParser::Nullptr: {
        enterOuterAlt(_localctx, 7);
        setState(1296);
        match(AngelscriptParser::Nullptr);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool AngelscriptParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 9: return nestedNameSpecifierSempred(antlrcpp::downCast<NestedNameSpecifierContext *>(context), predicateIndex);
    case 19: return postfixExpressionSempred(antlrcpp::downCast<PostfixExpressionContext *>(context), predicateIndex);
    case 95: return declaratorDefSempred(antlrcpp::downCast<DeclaratorDefContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool AngelscriptParser::nestedNameSpecifierSempred(NestedNameSpecifierContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool AngelscriptParser::postfixExpressionSempred(PostfixExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 8);
    case 2: return precpred(_ctx, 6);
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool AngelscriptParser::declaratorDefSempred(DeclaratorDefContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void AngelscriptParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  angelscriptparserParserInitialize();
#else
  ::antlr4::internal::call_once(angelscriptparserParserOnceFlag, angelscriptparserParserInitialize);
#endif
}
