
// Generated from ./angelscript.g4 by ANTLR 4.13.2

#include "angelscriptVisitor.h"

#include "angelscriptParser.h"

using namespace antlrcpp;

using namespace antlr4;

namespace {

struct AngelscriptParserStaticData final {
    AngelscriptParserStaticData(std::vector<std::string> ruleNames,
                                std::vector<std::string> literalNames,
                                std::vector<std::string> symbolicNames)
        : ruleNames(std::move(ruleNames)),
          literalNames(std::move(literalNames)),
          symbolicNames(std::move(symbolicNames)),
          vocabulary(this->literalNames, this->symbolicNames) {}

    AngelscriptParserStaticData(const AngelscriptParserStaticData &) = delete;
    AngelscriptParserStaticData(AngelscriptParserStaticData &&) = delete;
    AngelscriptParserStaticData &
    operator=(const AngelscriptParserStaticData &) = delete;
    AngelscriptParserStaticData &
    operator=(AngelscriptParserStaticData &&) = delete;

    std::vector<antlr4::dfa::DFA> decisionToDFA;
    antlr4::atn::PredictionContextCache sharedContextCache;
    const std::vector<std::string> ruleNames;
    const std::vector<std::string> literalNames;
    const std::vector<std::string> symbolicNames;
    const antlr4::dfa::Vocabulary vocabulary;
    antlr4::atn::SerializedATNView serializedATN;
    std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag angelscriptParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
    std::unique_ptr<AngelscriptParserStaticData>
        angelscriptParserStaticData = nullptr;

void angelscriptParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    if (angelscriptParserStaticData != nullptr) {
        return;
    }
#else
    assert(angelscriptParserStaticData == nullptr);
#endif
    auto staticData = std::make_unique<AngelscriptParserStaticData>(
        std::vector<std::string>{
            "script",     "import_",   "enum_",      "typdef",
            "class_",     "mixin_",    "interface_", "funcdef",
            "virtprop",   "var_",      "func_",      "namespace_",
            "intfmthd",   "statblock", "paramlist",  "typemod",
            "type_",      "initlist",  "scope",      "datatype",
            "statement",  "switch_",   "break_",     "for_",
            "while_",     "dowhile",   "if_",        "continue_",
            "exprstat",   "try_",      "return_",    "case_",
            "expr",       "exprterm",  "exprvalue",  "constructcall",
            "exprpostop", "cast",      "lambda_",    "funccall",
            "varaccess",  "arglist",   "assign",     "condition",
            "exprop"},
        std::vector<std::string>{
            "",          "';'",         "'import'",  "'&'",         "'from'",
            "'shared'",  "'external'",  "'enum'",    "'{'",         "'='",
            "','",       "'}'",         "'typedef'", "'abstract'",  "'final'",
            "'class'",   "':'",         "'mixin'",   "'interface'", "'funcdef'",
            "'private'", "'protected'", "'get'",     "'set'",       "'const'",
            "'~'",       "'namespace'", "'('",       "'void'",      "')'",
            "'in'",      "'out'",       "'inout'",   "'<'",         "'>'",
            "'['",       "']'",         "'@'",       "'::'",        "'\\u003F'",
            "'auto'",    "'switch'",    "'break'",   "'for'",       "'while'",
            "'do'",      "'if'",        "'else'",    "'continue'",  "'try'",
            "'catch'",   "'return'",    "'case'",    "'default'",   "'.'",
            "'++'",      "'--'",        "'cast'",    "'function'"},
        std::vector<std::string>{
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "",
            "",         "",          "",        "",           "NUMBER",
            "BITS",     "STRING",    "LITERAL", "IDENTIFIER", "BITOP",
            "MATHOP",   "COMPOP",    "LOGICOP", "ASSIGNOP",   "PRIMTYPE",
            "FUNCATTR", "EXPRPREOP", "COMMENT", "WS"});
    static const int32_t serializedATNSegment[] = {
        4,   1,   73,  712, 2,   0,   7,   0,   2,   1,   7,   1,   2,   2,
        7,   2,   2,   3,   7,   3,   2,   4,   7,   4,   2,   5,   7,   5,
        2,   6,   7,   6,   2,   7,   7,   7,   2,   8,   7,   8,   2,   9,
        7,   9,   2,   10,  7,   10,  2,   11,  7,   11,  2,   12,  7,   12,
        2,   13,  7,   13,  2,   14,  7,   14,  2,   15,  7,   15,  2,   16,
        7,   16,  2,   17,  7,   17,  2,   18,  7,   18,  2,   19,  7,   19,
        2,   20,  7,   20,  2,   21,  7,   21,  2,   22,  7,   22,  2,   23,
        7,   23,  2,   24,  7,   24,  2,   25,  7,   25,  2,   26,  7,   26,
        2,   27,  7,   27,  2,   28,  7,   28,  2,   29,  7,   29,  2,   30,
        7,   30,  2,   31,  7,   31,  2,   32,  7,   32,  2,   33,  7,   33,
        2,   34,  7,   34,  2,   35,  7,   35,  2,   36,  7,   36,  2,   37,
        7,   37,  2,   38,  7,   38,  2,   39,  7,   39,  2,   40,  7,   40,
        2,   41,  7,   41,  2,   42,  7,   42,  2,   43,  7,   43,  2,   44,
        7,   44,  1,   0,   1,   0,   1,   0,   1,   0,   1,   0,   1,   0,
        1,   0,   1,   0,   1,   0,   1,   0,   1,   0,   1,   0,   4,   0,
        103, 8,   0,   11,  0,   12,  0,   104, 1,   0,   1,   0,   1,   1,
        1,   1,   1,   1,   3,   1,   112, 8,   1,   1,   1,   1,   1,   1,
        1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   5,   2,   122,
        8,   2,   10,  2,   12,  2,   125, 9,   2,   1,   2,   1,   2,   1,
        2,   1,   2,   1,   2,   1,   2,   1,   2,   3,   2,   134, 8,   2,
        1,   2,   1,   2,   1,   2,   1,   2,   3,   2,   140, 8,   2,   5,
        2,   142, 8,   2,   10,  2,   12,  2,   145, 9,   2,   1,   2,   3,
        2,   148, 8,   2,   1,   3,   1,   3,   1,   3,   1,   3,   1,   3,
        1,   4,   5,   4,   156, 8,   4,   10,  4,   12,  4,   159, 9,   4,
        1,   4,   1,   4,   1,   4,   1,   4,   1,   4,   1,   4,   1,   4,
        5,   4,   168, 8,   4,   10,  4,   12,  4,   171, 9,   4,   3,   4,
        173, 8,   4,   1,   4,   1,   4,   1,   4,   1,   4,   1,   4,   5,
        4,   180, 8,   4,   10,  4,   12,  4,   183, 9,   4,   1,   4,   3,
        4,   186, 8,   4,   1,   5,   1,   5,   1,   5,   1,   6,   5,   6,
        192, 8,   6,   10,  6,   12,  6,   195, 9,   6,   1,   6,   1,   6,
        1,   6,   1,   6,   1,   6,   1,   6,   1,   6,   5,   6,   204, 8,
        6,   10,  6,   12,  6,   207, 9,   6,   3,   6,   209, 8,   6,   1,
        6,   1,   6,   1,   6,   5,   6,   214, 8,   6,   10,  6,   12,  6,
        217, 9,   6,   1,   6,   3,   6,   220, 8,   6,   1,   7,   5,   7,
        223, 8,   7,   10,  7,   12,  7,   226, 9,   7,   1,   7,   1,   7,
        1,   7,   3,   7,   231, 8,   7,   1,   7,   1,   7,   1,   7,   1,
        7,   1,   8,   3,   8,   238, 8,   8,   1,   8,   1,   8,   3,   8,
        242, 8,   8,   1,   8,   1,   8,   1,   8,   1,   8,   3,   8,   248,
        8,   8,   1,   8,   1,   8,   1,   8,   3,   8,   253, 8,   8,   5,
        8,   255, 8,   8,   10,  8,   12,  8,   258, 9,   8,   1,   8,   1,
        8,   1,   9,   3,   9,   263, 8,   9,   1,   9,   1,   9,   1,   9,
        1,   9,   1,   9,   3,   9,   270, 8,   9,   1,   9,   3,   9,   273,
        8,   9,   1,   9,   1,   9,   1,   9,   1,   9,   1,   9,   3,   9,
        280, 8,   9,   1,   9,   3,   9,   283, 8,   9,   5,   9,   285, 8,
        9,   10,  9,   12,  9,   288, 9,   9,   1,   9,   1,   9,   1,   10,
        5,   10,  293, 8,   10,  10,  10,  12,  10,  296, 9,   10,  1,   10,
        3,   10,  299, 8,   10,  1,   10,  1,   10,  3,   10,  303, 8,   10,
        1,   10,  3,   10,  306, 8,   10,  1,   10,  1,   10,  1,   10,  3,
        10,  311, 8,   10,  1,   10,  3,   10,  314, 8,   10,  1,   10,  1,
        10,  3,   10,  318, 8,   10,  1,   11,  1,   11,  1,   11,  1,   11,
        1,   11,  1,   11,  1,   12,  1,   12,  3,   12,  328, 8,   12,  1,
        12,  1,   12,  1,   12,  3,   12,  333, 8,   12,  1,   12,  1,   12,
        1,   13,  1,   13,  1,   13,  5,   13,  340, 8,   13,  10,  13,  12,
        13,  343, 9,   13,  1,   13,  1,   13,  1,   14,  1,   14,  1,   14,
        1,   14,  1,   14,  3,   14,  352, 8,   14,  1,   14,  1,   14,  3,
        14,  356, 8,   14,  1,   14,  1,   14,  1,   14,  1,   14,  3,   14,
        362, 8,   14,  1,   14,  1,   14,  3,   14,  366, 8,   14,  5,   14,
        368, 8,   14,  10,  14,  12,  14,  371, 9,   14,  3,   14,  373, 8,
        14,  1,   14,  1,   14,  1,   15,  1,   15,  3,   15,  379, 8,   15,
        3,   15,  381, 8,   15,  1,   16,  3,   16,  384, 8,   16,  1,   16,
        1,   16,  1,   16,  1,   16,  1,   16,  1,   16,  5,   16,  392, 8,
        16,  10,  16,  12,  16,  395, 9,   16,  1,   16,  1,   16,  5,   16,
        399, 8,   16,  10,  16,  12,  16,  402, 9,   16,  1,   16,  1,   16,
        1,   16,  1,   16,  3,   16,  408, 8,   16,  5,   16,  410, 8,   16,
        10,  16,  12,  16,  413, 9,   16,  1,   17,  1,   17,  1,   17,  3,
        17,  418, 8,   17,  1,   17,  1,   17,  1,   17,  3,   17,  423, 8,
        17,  5,   17,  425, 8,   17,  10,  17,  12,  17,  428, 9,   17,  1,
        17,  1,   17,  1,   18,  3,   18,  433, 8,   18,  1,   18,  1,   18,
        5,   18,  437, 8,   18,  10,  18,  12,  18,  440, 9,   18,  1,   18,
        1,   18,  1,   18,  1,   18,  1,   18,  5,   18,  447, 8,   18,  10,
        18,  12,  18,  450, 9,   18,  1,   18,  1,   18,  3,   18,  454, 8,
        18,  1,   18,  3,   18,  457, 8,   18,  1,   19,  1,   19,  1,   20,
        1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,
        1,   20,  1,   20,  1,   20,  3,   20,  472, 8,   20,  1,   21,  1,
        21,  1,   21,  1,   21,  1,   21,  1,   21,  5,   21,  480, 8,   21,
        10,  21,  12,  21,  483, 9,   21,  1,   21,  1,   21,  1,   22,  1,
        22,  1,   22,  1,   23,  1,   23,  1,   23,  1,   23,  3,   23,  494,
        8,   23,  1,   23,  1,   23,  1,   23,  1,   23,  5,   23,  500, 8,
        23,  10,  23,  12,  23,  503, 9,   23,  3,   23,  505, 8,   23,  1,
        23,  1,   23,  1,   23,  1,   24,  1,   24,  1,   24,  1,   24,  1,
        24,  1,   24,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  1,
        25,  1,   25,  1,   25,  1,   26,  1,   26,  1,   26,  1,   26,  1,
        26,  1,   26,  1,   26,  3,   26,  531, 8,   26,  1,   27,  1,   27,
        1,   27,  1,   28,  3,   28,  537, 8,   28,  1,   28,  1,   28,  1,
        29,  1,   29,  1,   29,  1,   29,  1,   29,  1,   30,  1,   30,  3,
        30,  548, 8,   30,  1,   30,  1,   30,  1,   31,  1,   31,  1,   31,
        3,   31,  555, 8,   31,  1,   31,  1,   31,  5,   31,  559, 8,   31,
        10,  31,  12,  31,  562, 9,   31,  1,   32,  1,   32,  1,   32,  1,
        32,  5,   32,  568, 8,   32,  10,  32,  12,  32,  571, 9,   32,  1,
        33,  1,   33,  1,   33,  3,   33,  576, 8,   33,  1,   33,  1,   33,
        5,   33,  580, 8,   33,  10,  33,  12,  33,  583, 9,   33,  1,   33,
        1,   33,  5,   33,  587, 8,   33,  10,  33,  12,  33,  590, 9,   33,
        3,   33,  592, 8,   33,  1,   34,  1,   34,  1,   34,  1,   34,  1,
        34,  1,   34,  1,   34,  1,   34,  1,   34,  1,   34,  3,   34,  604,
        8,   34,  1,   35,  1,   35,  1,   35,  1,   36,  1,   36,  1,   36,
        3,   36,  612, 8,   36,  1,   36,  1,   36,  1,   36,  3,   36,  617,
        8,   36,  1,   36,  1,   36,  1,   36,  3,   36,  622, 8,   36,  1,
        36,  1,   36,  5,   36,  626, 8,   36,  10,  36,  12,  36,  629, 9,
        36,  1,   36,  1,   36,  1,   36,  1,   36,  1,   36,  3,   36,  636,
        8,   36,  1,   37,  1,   37,  1,   37,  1,   37,  1,   37,  1,   37,
        1,   37,  1,   37,  1,   38,  1,   38,  1,   38,  1,   38,  1,   38,
        3,   38,  651, 8,   38,  1,   38,  1,   38,  1,   38,  1,   38,  1,
        38,  3,   38,  658, 8,   38,  1,   38,  5,   38,  661, 8,   38,  10,
        38,  12,  38,  664, 9,   38,  3,   38,  666, 8,   38,  1,   38,  1,
        38,  1,   38,  1,   39,  1,   39,  1,   39,  1,   39,  1,   40,  1,
        40,  1,   40,  1,   41,  1,   41,  1,   41,  3,   41,  681, 8,   41,
        1,   41,  1,   41,  1,   41,  1,   41,  3,   41,  687, 8,   41,  1,
        41,  5,   41,  690, 8,   41,  10,  41,  12,  41,  693, 9,   41,  1,
        41,  1,   41,  1,   42,  1,   42,  1,   42,  3,   42,  700, 8,   42,
        1,   43,  1,   43,  1,   43,  1,   43,  1,   43,  1,   43,  3,   43,
        708, 8,   43,  1,   44,  1,   44,  1,   44,  0,   0,   45,  0,   2,
        4,   6,   8,   10,  12,  14,  16,  18,  20,  22,  24,  26,  28,  30,
        32,  34,  36,  38,  40,  42,  44,  46,  48,  50,  52,  54,  56,  58,
        60,  62,  64,  66,  68,  70,  72,  74,  76,  78,  80,  82,  84,  86,
        88,  0,   7,   1,   0,   5,   6,   2,   0,   5,   6,   13,  14,  1,
        0,   20,  21,  1,   0,   22,  23,  1,   0,   30,  32,  3,   0,   39,
        40,  63,  63,  69,  69,  1,   0,   64,  67,  797, 0,   102, 1,   0,
        0,   0,   2,   108, 1,   0,   0,   0,   4,   123, 1,   0,   0,   0,
        6,   149, 1,   0,   0,   0,   8,   157, 1,   0,   0,   0,   10,  187,
        1,   0,   0,   0,   12,  193, 1,   0,   0,   0,   14,  224, 1,   0,
        0,   0,   16,  237, 1,   0,   0,   0,   18,  262, 1,   0,   0,   0,
        20,  294, 1,   0,   0,   0,   22,  319, 1,   0,   0,   0,   24,  325,
        1,   0,   0,   0,   26,  336, 1,   0,   0,   0,   28,  346, 1,   0,
        0,   0,   30,  380, 1,   0,   0,   0,   32,  383, 1,   0,   0,   0,
        34,  414, 1,   0,   0,   0,   36,  432, 1,   0,   0,   0,   38,  458,
        1,   0,   0,   0,   40,  471, 1,   0,   0,   0,   42,  473, 1,   0,
        0,   0,   44,  486, 1,   0,   0,   0,   46,  489, 1,   0,   0,   0,
        48,  509, 1,   0,   0,   0,   50,  515, 1,   0,   0,   0,   52,  523,
        1,   0,   0,   0,   54,  532, 1,   0,   0,   0,   56,  536, 1,   0,
        0,   0,   58,  540, 1,   0,   0,   0,   60,  545, 1,   0,   0,   0,
        62,  554, 1,   0,   0,   0,   64,  563, 1,   0,   0,   0,   66,  591,
        1,   0,   0,   0,   68,  603, 1,   0,   0,   0,   70,  605, 1,   0,
        0,   0,   72,  635, 1,   0,   0,   0,   74,  637, 1,   0,   0,   0,
        76,  645, 1,   0,   0,   0,   78,  670, 1,   0,   0,   0,   80,  674,
        1,   0,   0,   0,   82,  677, 1,   0,   0,   0,   84,  696, 1,   0,
        0,   0,   86,  701, 1,   0,   0,   0,   88,  709, 1,   0,   0,   0,
        90,  103, 3,   2,   1,   0,   91,  103, 3,   4,   2,   0,   92,  103,
        3,   6,   3,   0,   93,  103, 3,   8,   4,   0,   94,  103, 3,   10,
        5,   0,   95,  103, 3,   12,  6,   0,   96,  103, 3,   14,  7,   0,
        97,  103, 3,   16,  8,   0,   98,  103, 3,   18,  9,   0,   99,  103,
        3,   20,  10,  0,   100, 103, 3,   22,  11,  0,   101, 103, 5,   1,
        0,   0,   102, 90,  1,   0,   0,   0,   102, 91,  1,   0,   0,   0,
        102, 92,  1,   0,   0,   0,   102, 93,  1,   0,   0,   0,   102, 94,
        1,   0,   0,   0,   102, 95,  1,   0,   0,   0,   102, 96,  1,   0,
        0,   0,   102, 97,  1,   0,   0,   0,   102, 98,  1,   0,   0,   0,
        102, 99,  1,   0,   0,   0,   102, 100, 1,   0,   0,   0,   102, 101,
        1,   0,   0,   0,   103, 104, 1,   0,   0,   0,   104, 102, 1,   0,
        0,   0,   104, 105, 1,   0,   0,   0,   105, 106, 1,   0,   0,   0,
        106, 107, 5,   0,   0,   1,   107, 1,   1,   0,   0,   0,   108, 109,
        5,   2,   0,   0,   109, 111, 3,   32,  16,  0,   110, 112, 5,   3,
        0,   0,   111, 110, 1,   0,   0,   0,   111, 112, 1,   0,   0,   0,
        112, 113, 1,   0,   0,   0,   113, 114, 5,   63,  0,   0,   114, 115,
        3,   28,  14,  0,   115, 116, 5,   70,  0,   0,   116, 117, 5,   4,
        0,   0,   117, 118, 5,   61,  0,   0,   118, 119, 5,   1,   0,   0,
        119, 3,   1,   0,   0,   0,   120, 122, 7,   0,   0,   0,   121, 120,
        1,   0,   0,   0,   122, 125, 1,   0,   0,   0,   123, 121, 1,   0,
        0,   0,   123, 124, 1,   0,   0,   0,   124, 126, 1,   0,   0,   0,
        125, 123, 1,   0,   0,   0,   126, 127, 5,   7,   0,   0,   127, 147,
        5,   63,  0,   0,   128, 148, 5,   1,   0,   0,   129, 130, 5,   8,
        0,   0,   130, 133, 5,   63,  0,   0,   131, 132, 5,   9,   0,   0,
        132, 134, 3,   64,  32,  0,   133, 131, 1,   0,   0,   0,   133, 134,
        1,   0,   0,   0,   134, 143, 1,   0,   0,   0,   135, 136, 5,   10,
        0,   0,   136, 139, 5,   63,  0,   0,   137, 138, 5,   9,   0,   0,
        138, 140, 3,   64,  32,  0,   139, 137, 1,   0,   0,   0,   139, 140,
        1,   0,   0,   0,   140, 142, 1,   0,   0,   0,   141, 135, 1,   0,
        0,   0,   142, 145, 1,   0,   0,   0,   143, 141, 1,   0,   0,   0,
        143, 144, 1,   0,   0,   0,   144, 146, 1,   0,   0,   0,   145, 143,
        1,   0,   0,   0,   146, 148, 5,   11,  0,   0,   147, 128, 1,   0,
        0,   0,   147, 129, 1,   0,   0,   0,   148, 5,   1,   0,   0,   0,
        149, 150, 5,   12,  0,   0,   150, 151, 5,   69,  0,   0,   151, 152,
        5,   63,  0,   0,   152, 153, 5,   1,   0,   0,   153, 7,   1,   0,
        0,   0,   154, 156, 7,   1,   0,   0,   155, 154, 1,   0,   0,   0,
        156, 159, 1,   0,   0,   0,   157, 155, 1,   0,   0,   0,   157, 158,
        1,   0,   0,   0,   158, 160, 1,   0,   0,   0,   159, 157, 1,   0,
        0,   0,   160, 161, 5,   15,  0,   0,   161, 185, 5,   63,  0,   0,
        162, 186, 5,   1,   0,   0,   163, 164, 5,   16,  0,   0,   164, 169,
        5,   63,  0,   0,   165, 166, 5,   10,  0,   0,   166, 168, 5,   63,
        0,   0,   167, 165, 1,   0,   0,   0,   168, 171, 1,   0,   0,   0,
        169, 167, 1,   0,   0,   0,   169, 170, 1,   0,   0,   0,   170, 173,
        1,   0,   0,   0,   171, 169, 1,   0,   0,   0,   172, 163, 1,   0,
        0,   0,   172, 173, 1,   0,   0,   0,   173, 174, 1,   0,   0,   0,
        174, 181, 5,   8,   0,   0,   175, 180, 3,   16,  8,   0,   176, 180,
        3,   20,  10,  0,   177, 180, 3,   18,  9,   0,   178, 180, 3,   14,
        7,   0,   179, 175, 1,   0,   0,   0,   179, 176, 1,   0,   0,   0,
        179, 177, 1,   0,   0,   0,   179, 178, 1,   0,   0,   0,   180, 183,
        1,   0,   0,   0,   181, 179, 1,   0,   0,   0,   181, 182, 1,   0,
        0,   0,   182, 184, 1,   0,   0,   0,   183, 181, 1,   0,   0,   0,
        184, 186, 5,   11,  0,   0,   185, 162, 1,   0,   0,   0,   185, 172,
        1,   0,   0,   0,   186, 9,   1,   0,   0,   0,   187, 188, 5,   17,
        0,   0,   188, 189, 3,   8,   4,   0,   189, 11,  1,   0,   0,   0,
        190, 192, 7,   0,   0,   0,   191, 190, 1,   0,   0,   0,   192, 195,
        1,   0,   0,   0,   193, 191, 1,   0,   0,   0,   193, 194, 1,   0,
        0,   0,   194, 196, 1,   0,   0,   0,   195, 193, 1,   0,   0,   0,
        196, 197, 5,   18,  0,   0,   197, 219, 5,   63,  0,   0,   198, 220,
        5,   1,   0,   0,   199, 200, 5,   16,  0,   0,   200, 205, 5,   63,
        0,   0,   201, 202, 5,   10,  0,   0,   202, 204, 5,   63,  0,   0,
        203, 201, 1,   0,   0,   0,   204, 207, 1,   0,   0,   0,   205, 203,
        1,   0,   0,   0,   205, 206, 1,   0,   0,   0,   206, 209, 1,   0,
        0,   0,   207, 205, 1,   0,   0,   0,   208, 199, 1,   0,   0,   0,
        208, 209, 1,   0,   0,   0,   209, 210, 1,   0,   0,   0,   210, 215,
        5,   8,   0,   0,   211, 214, 3,   16,  8,   0,   212, 214, 3,   24,
        12,  0,   213, 211, 1,   0,   0,   0,   213, 212, 1,   0,   0,   0,
        214, 217, 1,   0,   0,   0,   215, 213, 1,   0,   0,   0,   215, 216,
        1,   0,   0,   0,   216, 218, 1,   0,   0,   0,   217, 215, 1,   0,
        0,   0,   218, 220, 5,   11,  0,   0,   219, 198, 1,   0,   0,   0,
        219, 208, 1,   0,   0,   0,   220, 13,  1,   0,   0,   0,   221, 223,
        7,   0,   0,   0,   222, 221, 1,   0,   0,   0,   223, 226, 1,   0,
        0,   0,   224, 222, 1,   0,   0,   0,   224, 225, 1,   0,   0,   0,
        225, 227, 1,   0,   0,   0,   226, 224, 1,   0,   0,   0,   227, 228,
        5,   19,  0,   0,   228, 230, 3,   32,  16,  0,   229, 231, 5,   3,
        0,   0,   230, 229, 1,   0,   0,   0,   230, 231, 1,   0,   0,   0,
        231, 232, 1,   0,   0,   0,   232, 233, 5,   63,  0,   0,   233, 234,
        3,   28,  14,  0,   234, 235, 5,   1,   0,   0,   235, 15,  1,   0,
        0,   0,   236, 238, 7,   2,   0,   0,   237, 236, 1,   0,   0,   0,
        237, 238, 1,   0,   0,   0,   238, 239, 1,   0,   0,   0,   239, 241,
        3,   32,  16,  0,   240, 242, 5,   3,   0,   0,   241, 240, 1,   0,
        0,   0,   241, 242, 1,   0,   0,   0,   242, 243, 1,   0,   0,   0,
        243, 244, 5,   63,  0,   0,   244, 256, 5,   8,   0,   0,   245, 247,
        7,   3,   0,   0,   246, 248, 5,   24,  0,   0,   247, 246, 1,   0,
        0,   0,   247, 248, 1,   0,   0,   0,   248, 249, 1,   0,   0,   0,
        249, 252, 5,   70,  0,   0,   250, 253, 3,   26,  13,  0,   251, 253,
        5,   1,   0,   0,   252, 250, 1,   0,   0,   0,   252, 251, 1,   0,
        0,   0,   253, 255, 1,   0,   0,   0,   254, 245, 1,   0,   0,   0,
        255, 258, 1,   0,   0,   0,   256, 254, 1,   0,   0,   0,   256, 257,
        1,   0,   0,   0,   257, 259, 1,   0,   0,   0,   258, 256, 1,   0,
        0,   0,   259, 260, 5,   11,  0,   0,   260, 17,  1,   0,   0,   0,
        261, 263, 7,   2,   0,   0,   262, 261, 1,   0,   0,   0,   262, 263,
        1,   0,   0,   0,   263, 264, 1,   0,   0,   0,   264, 265, 3,   32,
        16,  0,   265, 272, 5,   63,  0,   0,   266, 269, 5,   9,   0,   0,
        267, 270, 3,   34,  17,  0,   268, 270, 3,   64,  32,  0,   269, 267,
        1,   0,   0,   0,   269, 268, 1,   0,   0,   0,   270, 273, 1,   0,
        0,   0,   271, 273, 3,   82,  41,  0,   272, 266, 1,   0,   0,   0,
        272, 271, 1,   0,   0,   0,   272, 273, 1,   0,   0,   0,   273, 286,
        1,   0,   0,   0,   274, 275, 5,   10,  0,   0,   275, 282, 5,   63,
        0,   0,   276, 279, 5,   9,   0,   0,   277, 280, 3,   34,  17,  0,
        278, 280, 3,   64,  32,  0,   279, 277, 1,   0,   0,   0,   279, 278,
        1,   0,   0,   0,   280, 283, 1,   0,   0,   0,   281, 283, 3,   82,
        41,  0,   282, 276, 1,   0,   0,   0,   282, 281, 1,   0,   0,   0,
        282, 283, 1,   0,   0,   0,   283, 285, 1,   0,   0,   0,   284, 274,
        1,   0,   0,   0,   285, 288, 1,   0,   0,   0,   286, 284, 1,   0,
        0,   0,   286, 287, 1,   0,   0,   0,   287, 289, 1,   0,   0,   0,
        288, 286, 1,   0,   0,   0,   289, 290, 5,   1,   0,   0,   290, 19,
        1,   0,   0,   0,   291, 293, 7,   0,   0,   0,   292, 291, 1,   0,
        0,   0,   293, 296, 1,   0,   0,   0,   294, 292, 1,   0,   0,   0,
        294, 295, 1,   0,   0,   0,   295, 298, 1,   0,   0,   0,   296, 294,
        1,   0,   0,   0,   297, 299, 7,   2,   0,   0,   298, 297, 1,   0,
        0,   0,   298, 299, 1,   0,   0,   0,   299, 305, 1,   0,   0,   0,
        300, 302, 3,   32,  16,  0,   301, 303, 5,   3,   0,   0,   302, 301,
        1,   0,   0,   0,   302, 303, 1,   0,   0,   0,   303, 306, 1,   0,
        0,   0,   304, 306, 5,   25,  0,   0,   305, 300, 1,   0,   0,   0,
        305, 304, 1,   0,   0,   0,   305, 306, 1,   0,   0,   0,   306, 307,
        1,   0,   0,   0,   307, 308, 5,   63,  0,   0,   308, 310, 3,   28,
        14,  0,   309, 311, 5,   24,  0,   0,   310, 309, 1,   0,   0,   0,
        310, 311, 1,   0,   0,   0,   311, 313, 1,   0,   0,   0,   312, 314,
        5,   70,  0,   0,   313, 312, 1,   0,   0,   0,   313, 314, 1,   0,
        0,   0,   314, 317, 1,   0,   0,   0,   315, 318, 5,   1,   0,   0,
        316, 318, 3,   26,  13,  0,   317, 315, 1,   0,   0,   0,   317, 316,
        1,   0,   0,   0,   318, 21,  1,   0,   0,   0,   319, 320, 5,   26,
        0,   0,   320, 321, 5,   63,  0,   0,   321, 322, 5,   8,   0,   0,
        322, 323, 3,   0,   0,   0,   323, 324, 5,   11,  0,   0,   324, 23,
        1,   0,   0,   0,   325, 327, 3,   32,  16,  0,   326, 328, 5,   3,
        0,   0,   327, 326, 1,   0,   0,   0,   327, 328, 1,   0,   0,   0,
        328, 329, 1,   0,   0,   0,   329, 330, 5,   63,  0,   0,   330, 332,
        3,   28,  14,  0,   331, 333, 5,   24,  0,   0,   332, 331, 1,   0,
        0,   0,   332, 333, 1,   0,   0,   0,   333, 334, 1,   0,   0,   0,
        334, 335, 5,   1,   0,   0,   335, 25,  1,   0,   0,   0,   336, 341,
        5,   8,   0,   0,   337, 340, 3,   18,  9,   0,   338, 340, 3,   40,
        20,  0,   339, 337, 1,   0,   0,   0,   339, 338, 1,   0,   0,   0,
        340, 343, 1,   0,   0,   0,   341, 339, 1,   0,   0,   0,   341, 342,
        1,   0,   0,   0,   342, 344, 1,   0,   0,   0,   343, 341, 1,   0,
        0,   0,   344, 345, 5,   11,  0,   0,   345, 27,  1,   0,   0,   0,
        346, 372, 5,   27,  0,   0,   347, 373, 5,   28,  0,   0,   348, 349,
        3,   32,  16,  0,   349, 351, 3,   30,  15,  0,   350, 352, 5,   63,
        0,   0,   351, 350, 1,   0,   0,   0,   351, 352, 1,   0,   0,   0,
        352, 355, 1,   0,   0,   0,   353, 354, 5,   9,   0,   0,   354, 356,
        3,   64,  32,  0,   355, 353, 1,   0,   0,   0,   355, 356, 1,   0,
        0,   0,   356, 369, 1,   0,   0,   0,   357, 358, 5,   10,  0,   0,
        358, 359, 3,   32,  16,  0,   359, 361, 3,   30,  15,  0,   360, 362,
        5,   63,  0,   0,   361, 360, 1,   0,   0,   0,   361, 362, 1,   0,
        0,   0,   362, 365, 1,   0,   0,   0,   363, 364, 5,   9,   0,   0,
        364, 366, 3,   64,  32,  0,   365, 363, 1,   0,   0,   0,   365, 366,
        1,   0,   0,   0,   366, 368, 1,   0,   0,   0,   367, 357, 1,   0,
        0,   0,   368, 371, 1,   0,   0,   0,   369, 367, 1,   0,   0,   0,
        369, 370, 1,   0,   0,   0,   370, 373, 1,   0,   0,   0,   371, 369,
        1,   0,   0,   0,   372, 347, 1,   0,   0,   0,   372, 348, 1,   0,
        0,   0,   372, 373, 1,   0,   0,   0,   373, 374, 1,   0,   0,   0,
        374, 375, 5,   29,  0,   0,   375, 29,  1,   0,   0,   0,   376, 378,
        5,   3,   0,   0,   377, 379, 7,   4,   0,   0,   378, 377, 1,   0,
        0,   0,   378, 379, 1,   0,   0,   0,   379, 381, 1,   0,   0,   0,
        380, 376, 1,   0,   0,   0,   380, 381, 1,   0,   0,   0,   381, 31,
        1,   0,   0,   0,   382, 384, 5,   24,  0,   0,   383, 382, 1,   0,
        0,   0,   383, 384, 1,   0,   0,   0,   384, 385, 1,   0,   0,   0,
        385, 386, 3,   36,  18,  0,   386, 400, 3,   38,  19,  0,   387, 388,
        5,   33,  0,   0,   388, 393, 3,   32,  16,  0,   389, 390, 5,   10,
        0,   0,   390, 392, 3,   32,  16,  0,   391, 389, 1,   0,   0,   0,
        392, 395, 1,   0,   0,   0,   393, 391, 1,   0,   0,   0,   393, 394,
        1,   0,   0,   0,   394, 396, 1,   0,   0,   0,   395, 393, 1,   0,
        0,   0,   396, 397, 5,   34,  0,   0,   397, 399, 1,   0,   0,   0,
        398, 387, 1,   0,   0,   0,   399, 402, 1,   0,   0,   0,   400, 398,
        1,   0,   0,   0,   400, 401, 1,   0,   0,   0,   401, 411, 1,   0,
        0,   0,   402, 400, 1,   0,   0,   0,   403, 404, 5,   35,  0,   0,
        404, 410, 5,   36,  0,   0,   405, 407, 5,   37,  0,   0,   406, 408,
        5,   24,  0,   0,   407, 406, 1,   0,   0,   0,   407, 408, 1,   0,
        0,   0,   408, 410, 1,   0,   0,   0,   409, 403, 1,   0,   0,   0,
        409, 405, 1,   0,   0,   0,   410, 413, 1,   0,   0,   0,   411, 409,
        1,   0,   0,   0,   411, 412, 1,   0,   0,   0,   412, 33,  1,   0,
        0,   0,   413, 411, 1,   0,   0,   0,   414, 417, 5,   8,   0,   0,
        415, 418, 3,   84,  42,  0,   416, 418, 3,   34,  17,  0,   417, 415,
        1,   0,   0,   0,   417, 416, 1,   0,   0,   0,   417, 418, 1,   0,
        0,   0,   418, 426, 1,   0,   0,   0,   419, 422, 5,   10,  0,   0,
        420, 423, 3,   84,  42,  0,   421, 423, 3,   34,  17,  0,   422, 420,
        1,   0,   0,   0,   422, 421, 1,   0,   0,   0,   422, 423, 1,   0,
        0,   0,   423, 425, 1,   0,   0,   0,   424, 419, 1,   0,   0,   0,
        425, 428, 1,   0,   0,   0,   426, 424, 1,   0,   0,   0,   426, 427,
        1,   0,   0,   0,   427, 429, 1,   0,   0,   0,   428, 426, 1,   0,
        0,   0,   429, 430, 5,   11,  0,   0,   430, 35,  1,   0,   0,   0,
        431, 433, 5,   38,  0,   0,   432, 431, 1,   0,   0,   0,   432, 433,
        1,   0,   0,   0,   433, 438, 1,   0,   0,   0,   434, 435, 5,   63,
        0,   0,   435, 437, 5,   38,  0,   0,   436, 434, 1,   0,   0,   0,
        437, 440, 1,   0,   0,   0,   438, 436, 1,   0,   0,   0,   438, 439,
        1,   0,   0,   0,   439, 456, 1,   0,   0,   0,   440, 438, 1,   0,
        0,   0,   441, 453, 5,   63,  0,   0,   442, 443, 5,   33,  0,   0,
        443, 448, 3,   32,  16,  0,   444, 445, 5,   10,  0,   0,   445, 447,
        3,   32,  16,  0,   446, 444, 1,   0,   0,   0,   447, 450, 1,   0,
        0,   0,   448, 446, 1,   0,   0,   0,   448, 449, 1,   0,   0,   0,
        449, 451, 1,   0,   0,   0,   450, 448, 1,   0,   0,   0,   451, 452,
        5,   34,  0,   0,   452, 454, 1,   0,   0,   0,   453, 442, 1,   0,
        0,   0,   453, 454, 1,   0,   0,   0,   454, 455, 1,   0,   0,   0,
        455, 457, 5,   38,  0,   0,   456, 441, 1,   0,   0,   0,   456, 457,
        1,   0,   0,   0,   457, 37,  1,   0,   0,   0,   458, 459, 7,   5,
        0,   0,   459, 39,  1,   0,   0,   0,   460, 472, 3,   52,  26,  0,
        461, 472, 3,   46,  23,  0,   462, 472, 3,   48,  24,  0,   463, 472,
        3,   60,  30,  0,   464, 472, 3,   26,  13,  0,   465, 472, 3,   44,
        22,  0,   466, 472, 3,   54,  27,  0,   467, 472, 3,   50,  25,  0,
        468, 472, 3,   42,  21,  0,   469, 472, 3,   56,  28,  0,   470, 472,
        3,   58,  29,  0,   471, 460, 1,   0,   0,   0,   471, 461, 1,   0,
        0,   0,   471, 462, 1,   0,   0,   0,   471, 463, 1,   0,   0,   0,
        471, 464, 1,   0,   0,   0,   471, 465, 1,   0,   0,   0,   471, 466,
        1,   0,   0,   0,   471, 467, 1,   0,   0,   0,   471, 468, 1,   0,
        0,   0,   471, 469, 1,   0,   0,   0,   471, 470, 1,   0,   0,   0,
        472, 41,  1,   0,   0,   0,   473, 474, 5,   41,  0,   0,   474, 475,
        5,   27,  0,   0,   475, 476, 3,   84,  42,  0,   476, 477, 5,   29,
        0,   0,   477, 481, 5,   8,   0,   0,   478, 480, 3,   62,  31,  0,
        479, 478, 1,   0,   0,   0,   480, 483, 1,   0,   0,   0,   481, 479,
        1,   0,   0,   0,   481, 482, 1,   0,   0,   0,   482, 484, 1,   0,
        0,   0,   483, 481, 1,   0,   0,   0,   484, 485, 5,   11,  0,   0,
        485, 43,  1,   0,   0,   0,   486, 487, 5,   42,  0,   0,   487, 488,
        5,   1,   0,   0,   488, 45,  1,   0,   0,   0,   489, 490, 5,   43,
        0,   0,   490, 493, 5,   27,  0,   0,   491, 494, 3,   18,  9,   0,
        492, 494, 3,   56,  28,  0,   493, 491, 1,   0,   0,   0,   493, 492,
        1,   0,   0,   0,   494, 495, 1,   0,   0,   0,   495, 504, 3,   56,
        28,  0,   496, 501, 3,   84,  42,  0,   497, 498, 5,   10,  0,   0,
        498, 500, 3,   84,  42,  0,   499, 497, 1,   0,   0,   0,   500, 503,
        1,   0,   0,   0,   501, 499, 1,   0,   0,   0,   501, 502, 1,   0,
        0,   0,   502, 505, 1,   0,   0,   0,   503, 501, 1,   0,   0,   0,
        504, 496, 1,   0,   0,   0,   504, 505, 1,   0,   0,   0,   505, 506,
        1,   0,   0,   0,   506, 507, 5,   29,  0,   0,   507, 508, 3,   40,
        20,  0,   508, 47,  1,   0,   0,   0,   509, 510, 5,   44,  0,   0,
        510, 511, 5,   27,  0,   0,   511, 512, 3,   84,  42,  0,   512, 513,
        5,   29,  0,   0,   513, 514, 3,   40,  20,  0,   514, 49,  1,   0,
        0,   0,   515, 516, 5,   45,  0,   0,   516, 517, 3,   40,  20,  0,
        517, 518, 5,   44,  0,   0,   518, 519, 5,   27,  0,   0,   519, 520,
        3,   84,  42,  0,   520, 521, 5,   29,  0,   0,   521, 522, 5,   1,
        0,   0,   522, 51,  1,   0,   0,   0,   523, 524, 5,   46,  0,   0,
        524, 525, 5,   27,  0,   0,   525, 526, 3,   84,  42,  0,   526, 527,
        5,   29,  0,   0,   527, 530, 3,   40,  20,  0,   528, 529, 5,   47,
        0,   0,   529, 531, 3,   40,  20,  0,   530, 528, 1,   0,   0,   0,
        530, 531, 1,   0,   0,   0,   531, 53,  1,   0,   0,   0,   532, 533,
        5,   48,  0,   0,   533, 534, 5,   1,   0,   0,   534, 55,  1,   0,
        0,   0,   535, 537, 3,   84,  42,  0,   536, 535, 1,   0,   0,   0,
        536, 537, 1,   0,   0,   0,   537, 538, 1,   0,   0,   0,   538, 539,
        5,   1,   0,   0,   539, 57,  1,   0,   0,   0,   540, 541, 5,   49,
        0,   0,   541, 542, 3,   26,  13,  0,   542, 543, 5,   50,  0,   0,
        543, 544, 3,   26,  13,  0,   544, 59,  1,   0,   0,   0,   545, 547,
        5,   51,  0,   0,   546, 548, 3,   86,  43,  0,   547, 546, 1,   0,
        0,   0,   547, 548, 1,   0,   0,   0,   548, 549, 1,   0,   0,   0,
        549, 550, 5,   1,   0,   0,   550, 61,  1,   0,   0,   0,   551, 552,
        5,   52,  0,   0,   552, 555, 3,   64,  32,  0,   553, 555, 5,   53,
        0,   0,   554, 551, 1,   0,   0,   0,   554, 553, 1,   0,   0,   0,
        555, 556, 1,   0,   0,   0,   556, 560, 5,   16,  0,   0,   557, 559,
        3,   40,  20,  0,   558, 557, 1,   0,   0,   0,   559, 562, 1,   0,
        0,   0,   560, 558, 1,   0,   0,   0,   560, 561, 1,   0,   0,   0,
        561, 63,  1,   0,   0,   0,   562, 560, 1,   0,   0,   0,   563, 569,
        3,   66,  33,  0,   564, 565, 3,   88,  44,  0,   565, 566, 3,   66,
        33,  0,   566, 568, 1,   0,   0,   0,   567, 564, 1,   0,   0,   0,
        568, 571, 1,   0,   0,   0,   569, 567, 1,   0,   0,   0,   569, 570,
        1,   0,   0,   0,   570, 65,  1,   0,   0,   0,   571, 569, 1,   0,
        0,   0,   572, 573, 3,   32,  16,  0,   573, 574, 5,   9,   0,   0,
        574, 576, 1,   0,   0,   0,   575, 572, 1,   0,   0,   0,   575, 576,
        1,   0,   0,   0,   576, 577, 1,   0,   0,   0,   577, 592, 3,   34,
        17,  0,   578, 580, 5,   71,  0,   0,   579, 578, 1,   0,   0,   0,
        580, 583, 1,   0,   0,   0,   581, 579, 1,   0,   0,   0,   581, 582,
        1,   0,   0,   0,   582, 584, 1,   0,   0,   0,   583, 581, 1,   0,
        0,   0,   584, 588, 3,   68,  34,  0,   585, 587, 3,   72,  36,  0,
        586, 585, 1,   0,   0,   0,   587, 590, 1,   0,   0,   0,   588, 586,
        1,   0,   0,   0,   588, 589, 1,   0,   0,   0,   589, 592, 1,   0,
        0,   0,   590, 588, 1,   0,   0,   0,   591, 575, 1,   0,   0,   0,
        591, 581, 1,   0,   0,   0,   592, 67,  1,   0,   0,   0,   593, 604,
        3,   70,  35,  0,   594, 604, 3,   78,  39,  0,   595, 604, 3,   80,
        40,  0,   596, 604, 3,   74,  37,  0,   597, 604, 5,   62,  0,   0,
        598, 599, 5,   27,  0,   0,   599, 600, 3,   84,  42,  0,   600, 601,
        5,   29,  0,   0,   601, 604, 1,   0,   0,   0,   602, 604, 3,   76,
        38,  0,   603, 593, 1,   0,   0,   0,   603, 594, 1,   0,   0,   0,
        603, 595, 1,   0,   0,   0,   603, 596, 1,   0,   0,   0,   603, 597,
        1,   0,   0,   0,   603, 598, 1,   0,   0,   0,   603, 602, 1,   0,
        0,   0,   604, 69,  1,   0,   0,   0,   605, 606, 3,   32,  16,  0,
        606, 607, 3,   82,  41,  0,   607, 71,  1,   0,   0,   0,   608, 611,
        5,   54,  0,   0,   609, 612, 3,   78,  39,  0,   610, 612, 5,   63,
        0,   0,   611, 609, 1,   0,   0,   0,   611, 610, 1,   0,   0,   0,
        612, 636, 1,   0,   0,   0,   613, 616, 5,   35,  0,   0,   614, 615,
        5,   63,  0,   0,   615, 617, 5,   16,  0,   0,   616, 614, 1,   0,
        0,   0,   616, 617, 1,   0,   0,   0,   617, 618, 1,   0,   0,   0,
        618, 627, 3,   84,  42,  0,   619, 621, 5,   10,  0,   0,   620, 622,
        5,   63,  0,   0,   621, 620, 1,   0,   0,   0,   621, 622, 1,   0,
        0,   0,   622, 623, 1,   0,   0,   0,   623, 624, 5,   16,  0,   0,
        624, 626, 3,   84,  42,  0,   625, 619, 1,   0,   0,   0,   626, 629,
        1,   0,   0,   0,   627, 625, 1,   0,   0,   0,   627, 628, 1,   0,
        0,   0,   628, 630, 1,   0,   0,   0,   629, 627, 1,   0,   0,   0,
        630, 631, 5,   36,  0,   0,   631, 636, 1,   0,   0,   0,   632, 636,
        3,   82,  41,  0,   633, 636, 5,   55,  0,   0,   634, 636, 5,   56,
        0,   0,   635, 608, 1,   0,   0,   0,   635, 613, 1,   0,   0,   0,
        635, 632, 1,   0,   0,   0,   635, 633, 1,   0,   0,   0,   635, 634,
        1,   0,   0,   0,   636, 73,  1,   0,   0,   0,   637, 638, 5,   57,
        0,   0,   638, 639, 5,   33,  0,   0,   639, 640, 3,   32,  16,  0,
        640, 641, 5,   34,  0,   0,   641, 642, 5,   27,  0,   0,   642, 643,
        3,   84,  42,  0,   643, 644, 5,   29,  0,   0,   644, 75,  1,   0,
        0,   0,   645, 646, 5,   58,  0,   0,   646, 665, 5,   27,  0,   0,
        647, 648, 3,   32,  16,  0,   648, 649, 3,   30,  15,  0,   649, 651,
        1,   0,   0,   0,   650, 647, 1,   0,   0,   0,   650, 651, 1,   0,
        0,   0,   651, 652, 1,   0,   0,   0,   652, 662, 5,   63,  0,   0,
        653, 657, 5,   10,  0,   0,   654, 655, 3,   32,  16,  0,   655, 656,
        3,   30,  15,  0,   656, 658, 1,   0,   0,   0,   657, 654, 1,   0,
        0,   0,   657, 658, 1,   0,   0,   0,   658, 659, 1,   0,   0,   0,
        659, 661, 5,   63,  0,   0,   660, 653, 1,   0,   0,   0,   661, 664,
        1,   0,   0,   0,   662, 660, 1,   0,   0,   0,   662, 663, 1,   0,
        0,   0,   663, 666, 1,   0,   0,   0,   664, 662, 1,   0,   0,   0,
        665, 650, 1,   0,   0,   0,   665, 666, 1,   0,   0,   0,   666, 667,
        1,   0,   0,   0,   667, 668, 5,   29,  0,   0,   668, 669, 3,   26,
        13,  0,   669, 77,  1,   0,   0,   0,   670, 671, 3,   36,  18,  0,
        671, 672, 5,   63,  0,   0,   672, 673, 3,   82,  41,  0,   673, 79,
        1,   0,   0,   0,   674, 675, 3,   36,  18,  0,   675, 676, 5,   63,
        0,   0,   676, 81,  1,   0,   0,   0,   677, 680, 5,   27,  0,   0,
        678, 679, 5,   63,  0,   0,   679, 681, 5,   16,  0,   0,   680, 678,
        1,   0,   0,   0,   680, 681, 1,   0,   0,   0,   681, 682, 1,   0,
        0,   0,   682, 691, 3,   84,  42,  0,   683, 686, 5,   10,  0,   0,
        684, 685, 5,   63,  0,   0,   685, 687, 5,   16,  0,   0,   686, 684,
        1,   0,   0,   0,   686, 687, 1,   0,   0,   0,   687, 688, 1,   0,
        0,   0,   688, 690, 3,   84,  42,  0,   689, 683, 1,   0,   0,   0,
        690, 693, 1,   0,   0,   0,   691, 689, 1,   0,   0,   0,   691, 692,
        1,   0,   0,   0,   692, 694, 1,   0,   0,   0,   693, 691, 1,   0,
        0,   0,   694, 695, 5,   29,  0,   0,   695, 83,  1,   0,   0,   0,
        696, 699, 3,   86,  43,  0,   697, 698, 5,   68,  0,   0,   698, 700,
        3,   84,  42,  0,   699, 697, 1,   0,   0,   0,   699, 700, 1,   0,
        0,   0,   700, 85,  1,   0,   0,   0,   701, 707, 3,   64,  32,  0,
        702, 703, 5,   39,  0,   0,   703, 704, 3,   84,  42,  0,   704, 705,
        5,   16,  0,   0,   705, 706, 3,   84,  42,  0,   706, 708, 1,   0,
        0,   0,   707, 702, 1,   0,   0,   0,   707, 708, 1,   0,   0,   0,
        708, 87,  1,   0,   0,   0,   709, 710, 7,   6,   0,   0,   710, 89,
        1,   0,   0,   0,   96,  102, 104, 111, 123, 133, 139, 143, 147, 157,
        169, 172, 179, 181, 185, 193, 205, 208, 213, 215, 219, 224, 230, 237,
        241, 247, 252, 256, 262, 269, 272, 279, 282, 286, 294, 298, 302, 305,
        310, 313, 317, 327, 332, 339, 341, 351, 355, 361, 365, 369, 372, 378,
        380, 383, 393, 400, 407, 409, 411, 417, 422, 426, 432, 438, 448, 453,
        456, 471, 481, 493, 501, 504, 530, 536, 547, 554, 560, 569, 575, 581,
        588, 591, 603, 611, 616, 621, 627, 635, 650, 657, 662, 665, 680, 686,
        691, 699, 707};
    staticData->serializedATN = antlr4::atn::SerializedATNView(
        serializedATNSegment,
        sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

    antlr4::atn::ATNDeserializer deserializer;
    staticData->atn = deserializer.deserialize(staticData->serializedATN);

    const size_t count = staticData->atn->getNumberOfDecisions();
    staticData->decisionToDFA.reserve(count);
    for (size_t i = 0; i < count; i++) {
        staticData->decisionToDFA.emplace_back(
            staticData->atn->getDecisionState(i), i);
    }
    angelscriptParserStaticData = std::move(staticData);
}

} // namespace

angelscriptParser::angelscriptParser(TokenStream *input)
    : angelscriptParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

angelscriptParser::angelscriptParser(
    TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options)
    : Parser(input) {
    angelscriptParser::initialize();
    _interpreter = new atn::ParserATNSimulator(
        this, *angelscriptParserStaticData->atn,
        angelscriptParserStaticData->decisionToDFA,
        angelscriptParserStaticData->sharedContextCache, options);
}

angelscriptParser::~angelscriptParser() { delete _interpreter; }

const atn::ATN &angelscriptParser::getATN() const {
    return *angelscriptParserStaticData->atn;
}

std::string angelscriptParser::getGrammarFileName() const {
    return "angelscript.g4";
}

const std::vector<std::string> &angelscriptParser::getRuleNames() const {
    return angelscriptParserStaticData->ruleNames;
}

const dfa::Vocabulary &angelscriptParser::getVocabulary() const {
    return angelscriptParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView angelscriptParser::getSerializedATN() const {
    return angelscriptParserStaticData->serializedATN;
}

//----------------- ScriptContext
//------------------------------------------------------------------

angelscriptParser::ScriptContext::ScriptContext(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

tree::TerminalNode *angelscriptParser::ScriptContext::EOF() {
    return getToken(angelscriptParser::EOF, 0);
}

std::vector<angelscriptParser::Import_Context *>
angelscriptParser::ScriptContext::import_() {
    return getRuleContexts<angelscriptParser::Import_Context>();
}

angelscriptParser::Import_Context *
angelscriptParser::ScriptContext::import_(size_t i) {
    return getRuleContext<angelscriptParser::Import_Context>(i);
}

std::vector<angelscriptParser::Enum_Context *>
angelscriptParser::ScriptContext::enum_() {
    return getRuleContexts<angelscriptParser::Enum_Context>();
}

angelscriptParser::Enum_Context *
angelscriptParser::ScriptContext::enum_(size_t i) {
    return getRuleContext<angelscriptParser::Enum_Context>(i);
}

std::vector<angelscriptParser::TypdefContext *>
angelscriptParser::ScriptContext::typdef() {
    return getRuleContexts<angelscriptParser::TypdefContext>();
}

angelscriptParser::TypdefContext *
angelscriptParser::ScriptContext::typdef(size_t i) {
    return getRuleContext<angelscriptParser::TypdefContext>(i);
}

std::vector<angelscriptParser::Class_Context *>
angelscriptParser::ScriptContext::class_() {
    return getRuleContexts<angelscriptParser::Class_Context>();
}

angelscriptParser::Class_Context *
angelscriptParser::ScriptContext::class_(size_t i) {
    return getRuleContext<angelscriptParser::Class_Context>(i);
}

std::vector<angelscriptParser::Mixin_Context *>
angelscriptParser::ScriptContext::mixin_() {
    return getRuleContexts<angelscriptParser::Mixin_Context>();
}

angelscriptParser::Mixin_Context *
angelscriptParser::ScriptContext::mixin_(size_t i) {
    return getRuleContext<angelscriptParser::Mixin_Context>(i);
}

std::vector<angelscriptParser::Interface_Context *>
angelscriptParser::ScriptContext::interface_() {
    return getRuleContexts<angelscriptParser::Interface_Context>();
}

angelscriptParser::Interface_Context *
angelscriptParser::ScriptContext::interface_(size_t i) {
    return getRuleContext<angelscriptParser::Interface_Context>(i);
}

std::vector<angelscriptParser::FuncdefContext *>
angelscriptParser::ScriptContext::funcdef() {
    return getRuleContexts<angelscriptParser::FuncdefContext>();
}

angelscriptParser::FuncdefContext *
angelscriptParser::ScriptContext::funcdef(size_t i) {
    return getRuleContext<angelscriptParser::FuncdefContext>(i);
}

std::vector<angelscriptParser::VirtpropContext *>
angelscriptParser::ScriptContext::virtprop() {
    return getRuleContexts<angelscriptParser::VirtpropContext>();
}

angelscriptParser::VirtpropContext *
angelscriptParser::ScriptContext::virtprop(size_t i) {
    return getRuleContext<angelscriptParser::VirtpropContext>(i);
}

std::vector<angelscriptParser::Var_Context *>
angelscriptParser::ScriptContext::var_() {
    return getRuleContexts<angelscriptParser::Var_Context>();
}

angelscriptParser::Var_Context *
angelscriptParser::ScriptContext::var_(size_t i) {
    return getRuleContext<angelscriptParser::Var_Context>(i);
}

std::vector<angelscriptParser::Func_Context *>
angelscriptParser::ScriptContext::func_() {
    return getRuleContexts<angelscriptParser::Func_Context>();
}

angelscriptParser::Func_Context *
angelscriptParser::ScriptContext::func_(size_t i) {
    return getRuleContext<angelscriptParser::Func_Context>(i);
}

std::vector<angelscriptParser::Namespace_Context *>
angelscriptParser::ScriptContext::namespace_() {
    return getRuleContexts<angelscriptParser::Namespace_Context>();
}

angelscriptParser::Namespace_Context *
angelscriptParser::ScriptContext::namespace_(size_t i) {
    return getRuleContext<angelscriptParser::Namespace_Context>(i);
}

size_t angelscriptParser::ScriptContext::getRuleIndex() const {
    return angelscriptParser::RuleScript;
}

std::any
angelscriptParser::ScriptContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitScript(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ScriptContext *angelscriptParser::script() {
    ScriptContext *_localctx =
        _tracker.createInstance<ScriptContext>(_ctx, getState());
    enterRule(_localctx, 0, angelscriptParser::RuleScript);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(102);
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
            setState(102);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 0, _ctx)) {
            case 1: {
                setState(90);
                import_();
                break;
            }

            case 2: {
                setState(91);
                enum_();
                break;
            }

            case 3: {
                setState(92);
                typdef();
                break;
            }

            case 4: {
                setState(93);
                class_();
                break;
            }

            case 5: {
                setState(94);
                mixin_();
                break;
            }

            case 6: {
                setState(95);
                interface_();
                break;
            }

            case 7: {
                setState(96);
                funcdef();
                break;
            }

            case 8: {
                setState(97);
                virtprop();
                break;
            }

            case 9: {
                setState(98);
                var_();
                break;
            }

            case 10: {
                setState(99);
                func_();
                break;
            }

            case 11: {
                setState(100);
                namespace_();
                break;
            }

            case 12: {
                setState(101);
                match(angelscriptParser::T__0);
                break;
            }

            default:
                break;
            }
            setState(104);
            _errHandler->sync(this);
            _la = _input->LA(1);
        } while ((((_la & ~0x3fULL) == 0) &&
                  ((1ULL << _la) & -9223370112587861786) != 0) ||
                 _la == angelscriptParser::PRIMTYPE);
        setState(106);
        match(angelscriptParser::EOF);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Import_Context
//------------------------------------------------------------------

angelscriptParser::Import_Context::Import_Context(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Type_Context *angelscriptParser::Import_Context::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

tree::TerminalNode *angelscriptParser::Import_Context::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

angelscriptParser::ParamlistContext *
angelscriptParser::Import_Context::paramlist() {
    return getRuleContext<angelscriptParser::ParamlistContext>(0);
}

tree::TerminalNode *angelscriptParser::Import_Context::FUNCATTR() {
    return getToken(angelscriptParser::FUNCATTR, 0);
}

tree::TerminalNode *angelscriptParser::Import_Context::STRING() {
    return getToken(angelscriptParser::STRING, 0);
}

size_t angelscriptParser::Import_Context::getRuleIndex() const {
    return angelscriptParser::RuleImport_;
}

std::any
angelscriptParser::Import_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitImport_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Import_Context *angelscriptParser::import_() {
    Import_Context *_localctx =
        _tracker.createInstance<Import_Context>(_ctx, getState());
    enterRule(_localctx, 2, angelscriptParser::RuleImport_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(108);
        match(angelscriptParser::T__1);
        setState(109);
        type_();
        setState(111);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__2) {
            setState(110);
            match(angelscriptParser::T__2);
        }
        setState(113);
        match(angelscriptParser::IDENTIFIER);
        setState(114);
        paramlist();
        setState(115);
        match(angelscriptParser::FUNCATTR);
        setState(116);
        match(angelscriptParser::T__3);
        setState(117);
        match(angelscriptParser::STRING);
        setState(118);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Enum_Context
//------------------------------------------------------------------

angelscriptParser::Enum_Context::Enum_Context(ParserRuleContext *parent,
                                              size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<tree::TerminalNode *>
angelscriptParser::Enum_Context::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::Enum_Context::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::ExprContext *>
angelscriptParser::Enum_Context::expr() {
    return getRuleContexts<angelscriptParser::ExprContext>();
}

angelscriptParser::ExprContext *
angelscriptParser::Enum_Context::expr(size_t i) {
    return getRuleContext<angelscriptParser::ExprContext>(i);
}

size_t angelscriptParser::Enum_Context::getRuleIndex() const {
    return angelscriptParser::RuleEnum_;
}

std::any
angelscriptParser::Enum_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitEnum_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Enum_Context *angelscriptParser::enum_() {
    Enum_Context *_localctx =
        _tracker.createInstance<Enum_Context>(_ctx, getState());
    enterRule(_localctx, 4, angelscriptParser::RuleEnum_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(123);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__4

               || _la == angelscriptParser::T__5) {
            setState(120);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__4

                  || _la == angelscriptParser::T__5)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
            setState(125);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(126);
        match(angelscriptParser::T__6);
        setState(127);
        match(angelscriptParser::IDENTIFIER);
        setState(147);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__0: {
            setState(128);
            match(angelscriptParser::T__0);
            break;
        }

        case angelscriptParser::T__7: {
            setState(129);
            match(angelscriptParser::T__7);
            setState(130);
            match(angelscriptParser::IDENTIFIER);
            setState(133);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::T__8) {
                setState(131);
                match(angelscriptParser::T__8);
                setState(132);
                expr();
            }
            setState(143);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == angelscriptParser::T__9) {
                setState(135);
                match(angelscriptParser::T__9);
                setState(136);
                match(angelscriptParser::IDENTIFIER);
                setState(139);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == angelscriptParser::T__8) {
                    setState(137);
                    match(angelscriptParser::T__8);
                    setState(138);
                    expr();
                }
                setState(145);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            setState(146);
            match(angelscriptParser::T__10);
            break;
        }

        default:
            throw NoViableAltException(this);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypdefContext
//------------------------------------------------------------------

angelscriptParser::TypdefContext::TypdefContext(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

tree::TerminalNode *angelscriptParser::TypdefContext::PRIMTYPE() {
    return getToken(angelscriptParser::PRIMTYPE, 0);
}

tree::TerminalNode *angelscriptParser::TypdefContext::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

size_t angelscriptParser::TypdefContext::getRuleIndex() const {
    return angelscriptParser::RuleTypdef;
}

std::any
angelscriptParser::TypdefContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitTypdef(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::TypdefContext *angelscriptParser::typdef() {
    TypdefContext *_localctx =
        _tracker.createInstance<TypdefContext>(_ctx, getState());
    enterRule(_localctx, 6, angelscriptParser::RuleTypdef);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(149);
        match(angelscriptParser::T__11);
        setState(150);
        match(angelscriptParser::PRIMTYPE);
        setState(151);
        match(angelscriptParser::IDENTIFIER);
        setState(152);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Class_Context
//------------------------------------------------------------------

angelscriptParser::Class_Context::Class_Context(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<tree::TerminalNode *>
angelscriptParser::Class_Context::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::Class_Context::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::VirtpropContext *>
angelscriptParser::Class_Context::virtprop() {
    return getRuleContexts<angelscriptParser::VirtpropContext>();
}

angelscriptParser::VirtpropContext *
angelscriptParser::Class_Context::virtprop(size_t i) {
    return getRuleContext<angelscriptParser::VirtpropContext>(i);
}

std::vector<angelscriptParser::Func_Context *>
angelscriptParser::Class_Context::func_() {
    return getRuleContexts<angelscriptParser::Func_Context>();
}

angelscriptParser::Func_Context *
angelscriptParser::Class_Context::func_(size_t i) {
    return getRuleContext<angelscriptParser::Func_Context>(i);
}

std::vector<angelscriptParser::Var_Context *>
angelscriptParser::Class_Context::var_() {
    return getRuleContexts<angelscriptParser::Var_Context>();
}

angelscriptParser::Var_Context *
angelscriptParser::Class_Context::var_(size_t i) {
    return getRuleContext<angelscriptParser::Var_Context>(i);
}

std::vector<angelscriptParser::FuncdefContext *>
angelscriptParser::Class_Context::funcdef() {
    return getRuleContexts<angelscriptParser::FuncdefContext>();
}

angelscriptParser::FuncdefContext *
angelscriptParser::Class_Context::funcdef(size_t i) {
    return getRuleContext<angelscriptParser::FuncdefContext>(i);
}

size_t angelscriptParser::Class_Context::getRuleIndex() const {
    return angelscriptParser::RuleClass_;
}

std::any
angelscriptParser::Class_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitClass_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Class_Context *angelscriptParser::class_() {
    Class_Context *_localctx =
        _tracker.createInstance<Class_Context>(_ctx, getState());
    enterRule(_localctx, 8, angelscriptParser::RuleClass_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(157);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~0x3fULL) == 0) && ((1ULL << _la) & 24672) != 0)) {
            setState(154);
            _la = _input->LA(1);
            if (!((((_la & ~0x3fULL) == 0) && ((1ULL << _la) & 24672) != 0))) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
            setState(159);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(160);
        match(angelscriptParser::T__14);
        setState(161);
        match(angelscriptParser::IDENTIFIER);
        setState(185);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__0: {
            setState(162);
            match(angelscriptParser::T__0);
            break;
        }

        case angelscriptParser::T__7:
        case angelscriptParser::T__15: {
            setState(172);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::T__15) {
                setState(163);
                match(angelscriptParser::T__15);
                setState(164);
                match(angelscriptParser::IDENTIFIER);
                setState(169);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == angelscriptParser::T__9) {
                    setState(165);
                    match(angelscriptParser::T__9);
                    setState(166);
                    match(angelscriptParser::IDENTIFIER);
                    setState(171);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
            }
            setState(174);
            match(angelscriptParser::T__7);
            setState(181);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~0x3fULL) == 0) &&
                    ((1ULL << _la) & -9223370112655425440) != 0) ||
                   _la == angelscriptParser::PRIMTYPE) {
                setState(179);
                _errHandler->sync(this);
                switch (
                    getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                        _input, 11, _ctx)) {
                case 1: {
                    setState(175);
                    virtprop();
                    break;
                }

                case 2: {
                    setState(176);
                    func_();
                    break;
                }

                case 3: {
                    setState(177);
                    var_();
                    break;
                }

                case 4: {
                    setState(178);
                    funcdef();
                    break;
                }

                default:
                    break;
                }
                setState(183);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            setState(184);
            match(angelscriptParser::T__10);
            break;
        }

        default:
            throw NoViableAltException(this);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Mixin_Context
//------------------------------------------------------------------

angelscriptParser::Mixin_Context::Mixin_Context(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Class_Context *angelscriptParser::Mixin_Context::class_() {
    return getRuleContext<angelscriptParser::Class_Context>(0);
}

size_t angelscriptParser::Mixin_Context::getRuleIndex() const {
    return angelscriptParser::RuleMixin_;
}

std::any
angelscriptParser::Mixin_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitMixin_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Mixin_Context *angelscriptParser::mixin_() {
    Mixin_Context *_localctx =
        _tracker.createInstance<Mixin_Context>(_ctx, getState());
    enterRule(_localctx, 10, angelscriptParser::RuleMixin_);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(187);
        match(angelscriptParser::T__16);
        setState(188);
        class_();

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Interface_Context
//------------------------------------------------------------------

angelscriptParser::Interface_Context::Interface_Context(
    ParserRuleContext *parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<tree::TerminalNode *>
angelscriptParser::Interface_Context::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::Interface_Context::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::VirtpropContext *>
angelscriptParser::Interface_Context::virtprop() {
    return getRuleContexts<angelscriptParser::VirtpropContext>();
}

angelscriptParser::VirtpropContext *
angelscriptParser::Interface_Context::virtprop(size_t i) {
    return getRuleContext<angelscriptParser::VirtpropContext>(i);
}

std::vector<angelscriptParser::IntfmthdContext *>
angelscriptParser::Interface_Context::intfmthd() {
    return getRuleContexts<angelscriptParser::IntfmthdContext>();
}

angelscriptParser::IntfmthdContext *
angelscriptParser::Interface_Context::intfmthd(size_t i) {
    return getRuleContext<angelscriptParser::IntfmthdContext>(i);
}

size_t angelscriptParser::Interface_Context::getRuleIndex() const {
    return angelscriptParser::RuleInterface_;
}

std::any
angelscriptParser::Interface_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitInterface_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Interface_Context *angelscriptParser::interface_() {
    Interface_Context *_localctx =
        _tracker.createInstance<Interface_Context>(_ctx, getState());
    enterRule(_localctx, 12, angelscriptParser::RuleInterface_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(193);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__4

               || _la == angelscriptParser::T__5) {
            setState(190);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__4

                  || _la == angelscriptParser::T__5)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
            setState(195);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(196);
        match(angelscriptParser::T__17);
        setState(197);
        match(angelscriptParser::IDENTIFIER);
        setState(219);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__0: {
            setState(198);
            match(angelscriptParser::T__0);
            break;
        }

        case angelscriptParser::T__7:
        case angelscriptParser::T__15: {
            setState(208);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::T__15) {
                setState(199);
                match(angelscriptParser::T__15);
                setState(200);
                match(angelscriptParser::IDENTIFIER);
                setState(205);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == angelscriptParser::T__9) {
                    setState(201);
                    match(angelscriptParser::T__9);
                    setState(202);
                    match(angelscriptParser::IDENTIFIER);
                    setState(207);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
            }
            setState(210);
            match(angelscriptParser::T__7);
            setState(215);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (((((_la - 20) & ~0x3fULL) == 0) &&
                    ((1ULL << (_la - 20)) & 571746048278547) != 0)) {
                setState(213);
                _errHandler->sync(this);
                switch (
                    getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                        _input, 17, _ctx)) {
                case 1: {
                    setState(211);
                    virtprop();
                    break;
                }

                case 2: {
                    setState(212);
                    intfmthd();
                    break;
                }

                default:
                    break;
                }
                setState(217);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            setState(218);
            match(angelscriptParser::T__10);
            break;
        }

        default:
            throw NoViableAltException(this);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FuncdefContext
//------------------------------------------------------------------

angelscriptParser::FuncdefContext::FuncdefContext(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Type_Context *angelscriptParser::FuncdefContext::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

tree::TerminalNode *angelscriptParser::FuncdefContext::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

angelscriptParser::ParamlistContext *
angelscriptParser::FuncdefContext::paramlist() {
    return getRuleContext<angelscriptParser::ParamlistContext>(0);
}

size_t angelscriptParser::FuncdefContext::getRuleIndex() const {
    return angelscriptParser::RuleFuncdef;
}

std::any
angelscriptParser::FuncdefContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitFuncdef(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::FuncdefContext *angelscriptParser::funcdef() {
    FuncdefContext *_localctx =
        _tracker.createInstance<FuncdefContext>(_ctx, getState());
    enterRule(_localctx, 14, angelscriptParser::RuleFuncdef);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(224);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__4

               || _la == angelscriptParser::T__5) {
            setState(221);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__4

                  || _la == angelscriptParser::T__5)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
            setState(226);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(227);
        match(angelscriptParser::T__18);
        setState(228);
        type_();
        setState(230);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__2) {
            setState(229);
            match(angelscriptParser::T__2);
        }
        setState(232);
        match(angelscriptParser::IDENTIFIER);
        setState(233);
        paramlist();
        setState(234);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VirtpropContext
//------------------------------------------------------------------

angelscriptParser::VirtpropContext::VirtpropContext(ParserRuleContext *parent,
                                                    size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Type_Context *angelscriptParser::VirtpropContext::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

tree::TerminalNode *angelscriptParser::VirtpropContext::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

std::vector<tree::TerminalNode *>
angelscriptParser::VirtpropContext::FUNCATTR() {
    return getTokens(angelscriptParser::FUNCATTR);
}

tree::TerminalNode *angelscriptParser::VirtpropContext::FUNCATTR(size_t i) {
    return getToken(angelscriptParser::FUNCATTR, i);
}

std::vector<angelscriptParser::StatblockContext *>
angelscriptParser::VirtpropContext::statblock() {
    return getRuleContexts<angelscriptParser::StatblockContext>();
}

angelscriptParser::StatblockContext *
angelscriptParser::VirtpropContext::statblock(size_t i) {
    return getRuleContext<angelscriptParser::StatblockContext>(i);
}

size_t angelscriptParser::VirtpropContext::getRuleIndex() const {
    return angelscriptParser::RuleVirtprop;
}

std::any
angelscriptParser::VirtpropContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitVirtprop(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::VirtpropContext *angelscriptParser::virtprop() {
    VirtpropContext *_localctx =
        _tracker.createInstance<VirtpropContext>(_ctx, getState());
    enterRule(_localctx, 16, angelscriptParser::RuleVirtprop);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(237);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__19

            || _la == angelscriptParser::T__20) {
            setState(236);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__19

                  || _la == angelscriptParser::T__20)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
        }
        setState(239);
        type_();
        setState(241);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__2) {
            setState(240);
            match(angelscriptParser::T__2);
        }
        setState(243);
        match(angelscriptParser::IDENTIFIER);
        setState(244);
        match(angelscriptParser::T__7);
        setState(256);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__21

               || _la == angelscriptParser::T__22) {
            setState(245);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__21

                  || _la == angelscriptParser::T__22)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
            setState(247);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::T__23) {
                setState(246);
                match(angelscriptParser::T__23);
            }
            setState(249);
            match(angelscriptParser::FUNCATTR);
            setState(252);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case angelscriptParser::T__7: {
                setState(250);
                statblock();
                break;
            }

            case angelscriptParser::T__0: {
                setState(251);
                match(angelscriptParser::T__0);
                break;
            }

            default:
                throw NoViableAltException(this);
            }
            setState(258);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(259);
        match(angelscriptParser::T__10);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Var_Context
//------------------------------------------------------------------

angelscriptParser::Var_Context::Var_Context(ParserRuleContext *parent,
                                            size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Type_Context *angelscriptParser::Var_Context::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

std::vector<tree::TerminalNode *> angelscriptParser::Var_Context::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::Var_Context::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::ArglistContext *>
angelscriptParser::Var_Context::arglist() {
    return getRuleContexts<angelscriptParser::ArglistContext>();
}

angelscriptParser::ArglistContext *
angelscriptParser::Var_Context::arglist(size_t i) {
    return getRuleContext<angelscriptParser::ArglistContext>(i);
}

std::vector<angelscriptParser::InitlistContext *>
angelscriptParser::Var_Context::initlist() {
    return getRuleContexts<angelscriptParser::InitlistContext>();
}

angelscriptParser::InitlistContext *
angelscriptParser::Var_Context::initlist(size_t i) {
    return getRuleContext<angelscriptParser::InitlistContext>(i);
}

std::vector<angelscriptParser::ExprContext *>
angelscriptParser::Var_Context::expr() {
    return getRuleContexts<angelscriptParser::ExprContext>();
}

angelscriptParser::ExprContext *angelscriptParser::Var_Context::expr(size_t i) {
    return getRuleContext<angelscriptParser::ExprContext>(i);
}

size_t angelscriptParser::Var_Context::getRuleIndex() const {
    return angelscriptParser::RuleVar_;
}

std::any
angelscriptParser::Var_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitVar_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Var_Context *angelscriptParser::var_() {
    Var_Context *_localctx =
        _tracker.createInstance<Var_Context>(_ctx, getState());
    enterRule(_localctx, 18, angelscriptParser::RuleVar_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(262);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__19

            || _la == angelscriptParser::T__20) {
            setState(261);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__19

                  || _la == angelscriptParser::T__20)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
        }
        setState(264);
        type_();
        setState(265);
        match(angelscriptParser::IDENTIFIER);
        setState(272);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__8: {
            setState(266);
            match(angelscriptParser::T__8);
            setState(269);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 28, _ctx)) {
            case 1: {
                setState(267);
                initlist();
                break;
            }

            case 2: {
                setState(268);
                expr();
                break;
            }

            default:
                break;
            }
            break;
        }

        case angelscriptParser::T__26: {
            setState(271);
            arglist();
            break;
        }

        case angelscriptParser::T__0:
        case angelscriptParser::T__9: {
            break;
        }

        default:
            break;
        }
        setState(286);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__9) {
            setState(274);
            match(angelscriptParser::T__9);
            setState(275);
            match(angelscriptParser::IDENTIFIER);
            setState(282);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case angelscriptParser::T__8: {
                setState(276);
                match(angelscriptParser::T__8);
                setState(279);
                _errHandler->sync(this);
                switch (
                    getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                        _input, 30, _ctx)) {
                case 1: {
                    setState(277);
                    initlist();
                    break;
                }

                case 2: {
                    setState(278);
                    expr();
                    break;
                }

                default:
                    break;
                }
                break;
            }

            case angelscriptParser::T__26: {
                setState(281);
                arglist();
                break;
            }

            case angelscriptParser::T__0:
            case angelscriptParser::T__9: {
                break;
            }

            default:
                break;
            }
            setState(288);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(289);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Func_Context
//------------------------------------------------------------------

angelscriptParser::Func_Context::Func_Context(ParserRuleContext *parent,
                                              size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

tree::TerminalNode *angelscriptParser::Func_Context::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

angelscriptParser::ParamlistContext *
angelscriptParser::Func_Context::paramlist() {
    return getRuleContext<angelscriptParser::ParamlistContext>(0);
}

angelscriptParser::StatblockContext *
angelscriptParser::Func_Context::statblock() {
    return getRuleContext<angelscriptParser::StatblockContext>(0);
}

angelscriptParser::Type_Context *angelscriptParser::Func_Context::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

tree::TerminalNode *angelscriptParser::Func_Context::FUNCATTR() {
    return getToken(angelscriptParser::FUNCATTR, 0);
}

size_t angelscriptParser::Func_Context::getRuleIndex() const {
    return angelscriptParser::RuleFunc_;
}

std::any
angelscriptParser::Func_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitFunc_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Func_Context *angelscriptParser::func_() {
    Func_Context *_localctx =
        _tracker.createInstance<Func_Context>(_ctx, getState());
    enterRule(_localctx, 20, angelscriptParser::RuleFunc_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(294);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__4

               || _la == angelscriptParser::T__5) {
            setState(291);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__4

                  || _la == angelscriptParser::T__5)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
            setState(296);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(298);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__19

            || _la == angelscriptParser::T__20) {
            setState(297);
            _la = _input->LA(1);
            if (!(_la == angelscriptParser::T__19

                  || _la == angelscriptParser::T__20)) {
                _errHandler->recoverInline(this);
            } else {
                _errHandler->reportMatch(this);
                consume();
            }
        }
        setState(305);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 36, _ctx)) {
        case 1: {
            setState(300);
            type_();
            setState(302);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::T__2) {
                setState(301);
                match(angelscriptParser::T__2);
            }
            break;
        }

        case 2: {
            setState(304);
            match(angelscriptParser::T__24);
            break;
        }

        default:
            break;
        }
        setState(307);
        match(angelscriptParser::IDENTIFIER);
        setState(308);
        paramlist();
        setState(310);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__23) {
            setState(309);
            match(angelscriptParser::T__23);
        }
        setState(313);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::FUNCATTR) {
            setState(312);
            match(angelscriptParser::FUNCATTR);
        }
        setState(317);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__0: {
            setState(315);
            match(angelscriptParser::T__0);
            break;
        }

        case angelscriptParser::T__7: {
            setState(316);
            statblock();
            break;
        }

        default:
            throw NoViableAltException(this);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Namespace_Context
//------------------------------------------------------------------

angelscriptParser::Namespace_Context::Namespace_Context(
    ParserRuleContext *parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

tree::TerminalNode *angelscriptParser::Namespace_Context::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

angelscriptParser::ScriptContext *
angelscriptParser::Namespace_Context::script() {
    return getRuleContext<angelscriptParser::ScriptContext>(0);
}

size_t angelscriptParser::Namespace_Context::getRuleIndex() const {
    return angelscriptParser::RuleNamespace_;
}

std::any
angelscriptParser::Namespace_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitNamespace_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Namespace_Context *angelscriptParser::namespace_() {
    Namespace_Context *_localctx =
        _tracker.createInstance<Namespace_Context>(_ctx, getState());
    enterRule(_localctx, 22, angelscriptParser::RuleNamespace_);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(319);
        match(angelscriptParser::T__25);
        setState(320);
        match(angelscriptParser::IDENTIFIER);
        setState(321);
        match(angelscriptParser::T__7);
        setState(322);
        script();
        setState(323);
        match(angelscriptParser::T__10);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IntfmthdContext
//------------------------------------------------------------------

angelscriptParser::IntfmthdContext::IntfmthdContext(ParserRuleContext *parent,
                                                    size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Type_Context *angelscriptParser::IntfmthdContext::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

tree::TerminalNode *angelscriptParser::IntfmthdContext::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

angelscriptParser::ParamlistContext *
angelscriptParser::IntfmthdContext::paramlist() {
    return getRuleContext<angelscriptParser::ParamlistContext>(0);
}

size_t angelscriptParser::IntfmthdContext::getRuleIndex() const {
    return angelscriptParser::RuleIntfmthd;
}

std::any
angelscriptParser::IntfmthdContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitIntfmthd(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::IntfmthdContext *angelscriptParser::intfmthd() {
    IntfmthdContext *_localctx =
        _tracker.createInstance<IntfmthdContext>(_ctx, getState());
    enterRule(_localctx, 24, angelscriptParser::RuleIntfmthd);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(325);
        type_();
        setState(327);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__2) {
            setState(326);
            match(angelscriptParser::T__2);
        }
        setState(329);
        match(angelscriptParser::IDENTIFIER);
        setState(330);
        paramlist();
        setState(332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__23) {
            setState(331);
            match(angelscriptParser::T__23);
        }
        setState(334);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StatblockContext
//------------------------------------------------------------------

angelscriptParser::StatblockContext::StatblockContext(ParserRuleContext *parent,
                                                      size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<angelscriptParser::Var_Context *>
angelscriptParser::StatblockContext::var_() {
    return getRuleContexts<angelscriptParser::Var_Context>();
}

angelscriptParser::Var_Context *
angelscriptParser::StatblockContext::var_(size_t i) {
    return getRuleContext<angelscriptParser::Var_Context>(i);
}

std::vector<angelscriptParser::StatementContext *>
angelscriptParser::StatblockContext::statement() {
    return getRuleContexts<angelscriptParser::StatementContext>();
}

angelscriptParser::StatementContext *
angelscriptParser::StatblockContext::statement(size_t i) {
    return getRuleContext<angelscriptParser::StatementContext>(i);
}

size_t angelscriptParser::StatblockContext::getRuleIndex() const {
    return angelscriptParser::RuleStatblock;
}

std::any
angelscriptParser::StatblockContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitStatblock(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::StatblockContext *angelscriptParser::statblock() {
    StatblockContext *_localctx =
        _tracker.createInstance<StatblockContext>(_ctx, getState());
    enterRule(_localctx, 26, angelscriptParser::RuleStatblock);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(336);
        match(angelscriptParser::T__7);
        setState(341);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~0x3fULL) == 0) &&
                ((1ULL << _la) & -4176103766691413758) != 0) ||
               _la == angelscriptParser::PRIMTYPE

               || _la == angelscriptParser::EXPRPREOP) {
            setState(339);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 42, _ctx)) {
            case 1: {
                setState(337);
                var_();
                break;
            }

            case 2: {
                setState(338);
                statement();
                break;
            }

            default:
                break;
            }
            setState(343);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(344);
        match(angelscriptParser::T__10);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ParamlistContext
//------------------------------------------------------------------

angelscriptParser::ParamlistContext::ParamlistContext(ParserRuleContext *parent,
                                                      size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<angelscriptParser::Type_Context *>
angelscriptParser::ParamlistContext::type_() {
    return getRuleContexts<angelscriptParser::Type_Context>();
}

angelscriptParser::Type_Context *
angelscriptParser::ParamlistContext::type_(size_t i) {
    return getRuleContext<angelscriptParser::Type_Context>(i);
}

std::vector<angelscriptParser::TypemodContext *>
angelscriptParser::ParamlistContext::typemod() {
    return getRuleContexts<angelscriptParser::TypemodContext>();
}

angelscriptParser::TypemodContext *
angelscriptParser::ParamlistContext::typemod(size_t i) {
    return getRuleContext<angelscriptParser::TypemodContext>(i);
}

std::vector<tree::TerminalNode *>
angelscriptParser::ParamlistContext::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::ParamlistContext::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::ExprContext *>
angelscriptParser::ParamlistContext::expr() {
    return getRuleContexts<angelscriptParser::ExprContext>();
}

angelscriptParser::ExprContext *
angelscriptParser::ParamlistContext::expr(size_t i) {
    return getRuleContext<angelscriptParser::ExprContext>(i);
}

size_t angelscriptParser::ParamlistContext::getRuleIndex() const {
    return angelscriptParser::RuleParamlist;
}

std::any
angelscriptParser::ParamlistContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitParamlist(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ParamlistContext *angelscriptParser::paramlist() {
    ParamlistContext *_localctx =
        _tracker.createInstance<ParamlistContext>(_ctx, getState());
    enterRule(_localctx, 28, angelscriptParser::RuleParamlist);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(346);
        match(angelscriptParser::T__26);
        setState(372);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__27: {
            setState(347);
            match(angelscriptParser::T__27);
            break;
        }

        case angelscriptParser::T__23:
        case angelscriptParser::T__37:
        case angelscriptParser::T__38:
        case angelscriptParser::T__39:
        case angelscriptParser::IDENTIFIER:
        case angelscriptParser::PRIMTYPE: {
            setState(348);
            type_();
            setState(349);
            typemod();
            setState(351);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::IDENTIFIER) {
                setState(350);
                match(angelscriptParser::IDENTIFIER);
            }
            setState(355);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::T__8) {
                setState(353);
                match(angelscriptParser::T__8);
                setState(354);
                expr();
            }
            setState(369);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == angelscriptParser::T__9) {
                setState(357);
                match(angelscriptParser::T__9);
                setState(358);
                type_();
                setState(359);
                typemod();
                setState(361);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == angelscriptParser::IDENTIFIER) {
                    setState(360);
                    match(angelscriptParser::IDENTIFIER);
                }
                setState(365);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == angelscriptParser::T__8) {
                    setState(363);
                    match(angelscriptParser::T__8);
                    setState(364);
                    expr();
                }
                setState(371);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            break;
        }

        case angelscriptParser::T__28: {
            break;
        }

        default:
            break;
        }
        setState(374);
        match(angelscriptParser::T__28);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypemodContext
//------------------------------------------------------------------

angelscriptParser::TypemodContext::TypemodContext(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

size_t angelscriptParser::TypemodContext::getRuleIndex() const {
    return angelscriptParser::RuleTypemod;
}

std::any
angelscriptParser::TypemodContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitTypemod(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::TypemodContext *angelscriptParser::typemod() {
    TypemodContext *_localctx =
        _tracker.createInstance<TypemodContext>(_ctx, getState());
    enterRule(_localctx, 30, angelscriptParser::RuleTypemod);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(380);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__2) {
            setState(376);
            match(angelscriptParser::T__2);
            setState(378);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if ((((_la & ~0x3fULL) == 0) &&
                 ((1ULL << _la) & 7516192768) != 0)) {
                setState(377);
                _la = _input->LA(1);
                if (!((((_la & ~0x3fULL) == 0) &&
                       ((1ULL << _la) & 7516192768) != 0))) {
                    _errHandler->recoverInline(this);
                } else {
                    _errHandler->reportMatch(this);
                    consume();
                }
            }
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Type_Context
//------------------------------------------------------------------

angelscriptParser::Type_Context::Type_Context(ParserRuleContext *parent,
                                              size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ScopeContext *angelscriptParser::Type_Context::scope() {
    return getRuleContext<angelscriptParser::ScopeContext>(0);
}

angelscriptParser::DatatypeContext *
angelscriptParser::Type_Context::datatype() {
    return getRuleContext<angelscriptParser::DatatypeContext>(0);
}

std::vector<angelscriptParser::Type_Context *>
angelscriptParser::Type_Context::type_() {
    return getRuleContexts<angelscriptParser::Type_Context>();
}

angelscriptParser::Type_Context *
angelscriptParser::Type_Context::type_(size_t i) {
    return getRuleContext<angelscriptParser::Type_Context>(i);
}

size_t angelscriptParser::Type_Context::getRuleIndex() const {
    return angelscriptParser::RuleType_;
}

std::any
angelscriptParser::Type_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitType_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Type_Context *angelscriptParser::type_() {
    Type_Context *_localctx =
        _tracker.createInstance<Type_Context>(_ctx, getState());
    enterRule(_localctx, 32, angelscriptParser::RuleType_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(383);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__23) {
            setState(382);
            match(angelscriptParser::T__23);
        }
        setState(385);
        scope();
        setState(386);
        datatype();
        setState(400);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__32) {
            setState(387);
            match(angelscriptParser::T__32);
            setState(388);
            type_();
            setState(393);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == angelscriptParser::T__9) {
                setState(389);
                match(angelscriptParser::T__9);
                setState(390);
                type_();
                setState(395);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            setState(396);
            match(angelscriptParser::T__33);
            setState(402);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(411);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__34

               || _la == angelscriptParser::T__36) {
            setState(409);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case angelscriptParser::T__34: {
                setState(403);
                match(angelscriptParser::T__34);
                setState(404);
                match(angelscriptParser::T__35);
                break;
            }

            case angelscriptParser::T__36: {
                setState(405);
                match(angelscriptParser::T__36);
                setState(407);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == angelscriptParser::T__23) {
                    setState(406);
                    match(angelscriptParser::T__23);
                }
                break;
            }

            default:
                throw NoViableAltException(this);
            }
            setState(413);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- InitlistContext
//------------------------------------------------------------------

angelscriptParser::InitlistContext::InitlistContext(ParserRuleContext *parent,
                                                    size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<angelscriptParser::AssignContext *>
angelscriptParser::InitlistContext::assign() {
    return getRuleContexts<angelscriptParser::AssignContext>();
}

angelscriptParser::AssignContext *
angelscriptParser::InitlistContext::assign(size_t i) {
    return getRuleContext<angelscriptParser::AssignContext>(i);
}

std::vector<angelscriptParser::InitlistContext *>
angelscriptParser::InitlistContext::initlist() {
    return getRuleContexts<angelscriptParser::InitlistContext>();
}

angelscriptParser::InitlistContext *
angelscriptParser::InitlistContext::initlist(size_t i) {
    return getRuleContext<angelscriptParser::InitlistContext>(i);
}

size_t angelscriptParser::InitlistContext::getRuleIndex() const {
    return angelscriptParser::RuleInitlist;
}

std::any
angelscriptParser::InitlistContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitInitlist(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::InitlistContext *angelscriptParser::initlist() {
    InitlistContext *_localctx =
        _tracker.createInstance<InitlistContext>(_ctx, getState());
    enterRule(_localctx, 34, angelscriptParser::RuleInitlist);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(414);
        match(angelscriptParser::T__7);
        setState(417);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 58, _ctx)) {
        case 1: {
            setState(415);
            assign();
            break;
        }

        case 2: {
            setState(416);
            initlist();
            break;
        }

        default:
            break;
        }
        setState(426);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__9) {
            setState(419);
            match(angelscriptParser::T__9);
            setState(422);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 59, _ctx)) {
            case 1: {
                setState(420);
                assign();
                break;
            }

            case 2: {
                setState(421);
                initlist();
                break;
            }

            default:
                break;
            }
            setState(428);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(429);
        match(angelscriptParser::T__10);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ScopeContext
//------------------------------------------------------------------

angelscriptParser::ScopeContext::ScopeContext(ParserRuleContext *parent,
                                              size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<tree::TerminalNode *>
angelscriptParser::ScopeContext::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::ScopeContext::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::Type_Context *>
angelscriptParser::ScopeContext::type_() {
    return getRuleContexts<angelscriptParser::Type_Context>();
}

angelscriptParser::Type_Context *
angelscriptParser::ScopeContext::type_(size_t i) {
    return getRuleContext<angelscriptParser::Type_Context>(i);
}

size_t angelscriptParser::ScopeContext::getRuleIndex() const {
    return angelscriptParser::RuleScope;
}

std::any
angelscriptParser::ScopeContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitScope(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ScopeContext *angelscriptParser::scope() {
    ScopeContext *_localctx =
        _tracker.createInstance<ScopeContext>(_ctx, getState());
    enterRule(_localctx, 36, angelscriptParser::RuleScope);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(432);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__37) {
            setState(431);
            match(angelscriptParser::T__37);
        }
        setState(438);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 62, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(434);
                match(angelscriptParser::IDENTIFIER);
                setState(435);
                match(angelscriptParser::T__37);
            }
            setState(440);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 62, _ctx);
        }
        setState(456);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 65, _ctx)) {
        case 1: {
            setState(441);
            match(angelscriptParser::IDENTIFIER);
            setState(453);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == angelscriptParser::T__32) {
                setState(442);
                match(angelscriptParser::T__32);
                setState(443);
                type_();
                setState(448);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == angelscriptParser::T__9) {
                    setState(444);
                    match(angelscriptParser::T__9);
                    setState(445);
                    type_();
                    setState(450);
                    _errHandler->sync(this);
                    _la = _input->LA(1);
                }
                setState(451);
                match(angelscriptParser::T__33);
            }
            setState(455);
            match(angelscriptParser::T__37);
            break;
        }

        default:
            break;
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DatatypeContext
//------------------------------------------------------------------

angelscriptParser::DatatypeContext::DatatypeContext(ParserRuleContext *parent,
                                                    size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

tree::TerminalNode *angelscriptParser::DatatypeContext::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

tree::TerminalNode *angelscriptParser::DatatypeContext::PRIMTYPE() {
    return getToken(angelscriptParser::PRIMTYPE, 0);
}

size_t angelscriptParser::DatatypeContext::getRuleIndex() const {
    return angelscriptParser::RuleDatatype;
}

std::any
angelscriptParser::DatatypeContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitDatatype(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::DatatypeContext *angelscriptParser::datatype() {
    DatatypeContext *_localctx =
        _tracker.createInstance<DatatypeContext>(_ctx, getState());
    enterRule(_localctx, 38, angelscriptParser::RuleDatatype);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(458);
        _la = _input->LA(1);
        if (!(((((_la - 39) & ~0x3fULL) == 0) &&
               ((1ULL << (_la - 39)) & 1090519043) != 0))) {
            _errHandler->recoverInline(this);
        } else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StatementContext
//------------------------------------------------------------------

angelscriptParser::StatementContext::StatementContext(ParserRuleContext *parent,
                                                      size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::If_Context *angelscriptParser::StatementContext::if_() {
    return getRuleContext<angelscriptParser::If_Context>(0);
}

angelscriptParser::For_Context *angelscriptParser::StatementContext::for_() {
    return getRuleContext<angelscriptParser::For_Context>(0);
}

angelscriptParser::While_Context *
angelscriptParser::StatementContext::while_() {
    return getRuleContext<angelscriptParser::While_Context>(0);
}

angelscriptParser::Return_Context *
angelscriptParser::StatementContext::return_() {
    return getRuleContext<angelscriptParser::Return_Context>(0);
}

angelscriptParser::StatblockContext *
angelscriptParser::StatementContext::statblock() {
    return getRuleContext<angelscriptParser::StatblockContext>(0);
}

angelscriptParser::Break_Context *
angelscriptParser::StatementContext::break_() {
    return getRuleContext<angelscriptParser::Break_Context>(0);
}

angelscriptParser::Continue_Context *
angelscriptParser::StatementContext::continue_() {
    return getRuleContext<angelscriptParser::Continue_Context>(0);
}

angelscriptParser::DowhileContext *
angelscriptParser::StatementContext::dowhile() {
    return getRuleContext<angelscriptParser::DowhileContext>(0);
}

angelscriptParser::Switch_Context *
angelscriptParser::StatementContext::switch_() {
    return getRuleContext<angelscriptParser::Switch_Context>(0);
}

angelscriptParser::ExprstatContext *
angelscriptParser::StatementContext::exprstat() {
    return getRuleContext<angelscriptParser::ExprstatContext>(0);
}

angelscriptParser::Try_Context *angelscriptParser::StatementContext::try_() {
    return getRuleContext<angelscriptParser::Try_Context>(0);
}

size_t angelscriptParser::StatementContext::getRuleIndex() const {
    return angelscriptParser::RuleStatement;
}

std::any
angelscriptParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitStatement(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::StatementContext *angelscriptParser::statement() {
    StatementContext *_localctx =
        _tracker.createInstance<StatementContext>(_ctx, getState());
    enterRule(_localctx, 40, angelscriptParser::RuleStatement);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        setState(471);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 66, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(460);
            if_();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(461);
            for_();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(462);
            while_();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(463);
            return_();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(464);
            statblock();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(465);
            break_();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(466);
            continue_();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(467);
            dowhile();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(468);
            switch_();
            break;
        }

        case 10: {
            enterOuterAlt(_localctx, 10);
            setState(469);
            exprstat();
            break;
        }

        case 11: {
            enterOuterAlt(_localctx, 11);
            setState(470);
            try_();
            break;
        }

        default:
            break;
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Switch_Context
//------------------------------------------------------------------

angelscriptParser::Switch_Context::Switch_Context(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::AssignContext *angelscriptParser::Switch_Context::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

std::vector<angelscriptParser::Case_Context *>
angelscriptParser::Switch_Context::case_() {
    return getRuleContexts<angelscriptParser::Case_Context>();
}

angelscriptParser::Case_Context *
angelscriptParser::Switch_Context::case_(size_t i) {
    return getRuleContext<angelscriptParser::Case_Context>(i);
}

size_t angelscriptParser::Switch_Context::getRuleIndex() const {
    return angelscriptParser::RuleSwitch_;
}

std::any
angelscriptParser::Switch_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitSwitch_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Switch_Context *angelscriptParser::switch_() {
    Switch_Context *_localctx =
        _tracker.createInstance<Switch_Context>(_ctx, getState());
    enterRule(_localctx, 42, angelscriptParser::RuleSwitch_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(473);
        match(angelscriptParser::T__40);
        setState(474);
        match(angelscriptParser::T__26);
        setState(475);
        assign();
        setState(476);
        match(angelscriptParser::T__28);
        setState(477);
        match(angelscriptParser::T__7);
        setState(481);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__51

               || _la == angelscriptParser::T__52) {
            setState(478);
            case_();
            setState(483);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(484);
        match(angelscriptParser::T__10);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Break_Context
//------------------------------------------------------------------

angelscriptParser::Break_Context::Break_Context(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

size_t angelscriptParser::Break_Context::getRuleIndex() const {
    return angelscriptParser::RuleBreak_;
}

std::any
angelscriptParser::Break_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitBreak_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Break_Context *angelscriptParser::break_() {
    Break_Context *_localctx =
        _tracker.createInstance<Break_Context>(_ctx, getState());
    enterRule(_localctx, 44, angelscriptParser::RuleBreak_);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(486);
        match(angelscriptParser::T__41);
        setState(487);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- For_Context
//------------------------------------------------------------------

angelscriptParser::For_Context::For_Context(ParserRuleContext *parent,
                                            size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<angelscriptParser::ExprstatContext *>
angelscriptParser::For_Context::exprstat() {
    return getRuleContexts<angelscriptParser::ExprstatContext>();
}

angelscriptParser::ExprstatContext *
angelscriptParser::For_Context::exprstat(size_t i) {
    return getRuleContext<angelscriptParser::ExprstatContext>(i);
}

angelscriptParser::StatementContext *
angelscriptParser::For_Context::statement() {
    return getRuleContext<angelscriptParser::StatementContext>(0);
}

angelscriptParser::Var_Context *angelscriptParser::For_Context::var_() {
    return getRuleContext<angelscriptParser::Var_Context>(0);
}

std::vector<angelscriptParser::AssignContext *>
angelscriptParser::For_Context::assign() {
    return getRuleContexts<angelscriptParser::AssignContext>();
}

angelscriptParser::AssignContext *
angelscriptParser::For_Context::assign(size_t i) {
    return getRuleContext<angelscriptParser::AssignContext>(i);
}

size_t angelscriptParser::For_Context::getRuleIndex() const {
    return angelscriptParser::RuleFor_;
}

std::any
angelscriptParser::For_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitFor_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::For_Context *angelscriptParser::for_() {
    For_Context *_localctx =
        _tracker.createInstance<For_Context>(_ctx, getState());
    enterRule(_localctx, 46, angelscriptParser::RuleFor_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(489);
        match(angelscriptParser::T__42);
        setState(490);
        match(angelscriptParser::T__26);
        setState(493);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 68, _ctx)) {
        case 1: {
            setState(491);
            var_();
            break;
        }

        case 2: {
            setState(492);
            exprstat();
            break;
        }

        default:
            break;
        }
        setState(495);
        exprstat();
        setState(504);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 8) & ~0x3fULL) == 0) &&
             ((1ULL << (_la - 8)) & -6861796974735589375) != 0)) {
            setState(496);
            assign();
            setState(501);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == angelscriptParser::T__9) {
                setState(497);
                match(angelscriptParser::T__9);
                setState(498);
                assign();
                setState(503);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
        setState(506);
        match(angelscriptParser::T__28);
        setState(507);
        statement();

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- While_Context
//------------------------------------------------------------------

angelscriptParser::While_Context::While_Context(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::AssignContext *angelscriptParser::While_Context::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

angelscriptParser::StatementContext *
angelscriptParser::While_Context::statement() {
    return getRuleContext<angelscriptParser::StatementContext>(0);
}

size_t angelscriptParser::While_Context::getRuleIndex() const {
    return angelscriptParser::RuleWhile_;
}

std::any
angelscriptParser::While_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitWhile_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::While_Context *angelscriptParser::while_() {
    While_Context *_localctx =
        _tracker.createInstance<While_Context>(_ctx, getState());
    enterRule(_localctx, 48, angelscriptParser::RuleWhile_);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(509);
        match(angelscriptParser::T__43);
        setState(510);
        match(angelscriptParser::T__26);
        setState(511);
        assign();
        setState(512);
        match(angelscriptParser::T__28);
        setState(513);
        statement();

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DowhileContext
//------------------------------------------------------------------

angelscriptParser::DowhileContext::DowhileContext(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::StatementContext *
angelscriptParser::DowhileContext::statement() {
    return getRuleContext<angelscriptParser::StatementContext>(0);
}

angelscriptParser::AssignContext *angelscriptParser::DowhileContext::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

size_t angelscriptParser::DowhileContext::getRuleIndex() const {
    return angelscriptParser::RuleDowhile;
}

std::any
angelscriptParser::DowhileContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitDowhile(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::DowhileContext *angelscriptParser::dowhile() {
    DowhileContext *_localctx =
        _tracker.createInstance<DowhileContext>(_ctx, getState());
    enterRule(_localctx, 50, angelscriptParser::RuleDowhile);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(515);
        match(angelscriptParser::T__44);
        setState(516);
        statement();
        setState(517);
        match(angelscriptParser::T__43);
        setState(518);
        match(angelscriptParser::T__26);
        setState(519);
        assign();
        setState(520);
        match(angelscriptParser::T__28);
        setState(521);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- If_Context
//------------------------------------------------------------------

angelscriptParser::If_Context::If_Context(ParserRuleContext *parent,
                                          size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::AssignContext *angelscriptParser::If_Context::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

std::vector<angelscriptParser::StatementContext *>
angelscriptParser::If_Context::statement() {
    return getRuleContexts<angelscriptParser::StatementContext>();
}

angelscriptParser::StatementContext *
angelscriptParser::If_Context::statement(size_t i) {
    return getRuleContext<angelscriptParser::StatementContext>(i);
}

size_t angelscriptParser::If_Context::getRuleIndex() const {
    return angelscriptParser::RuleIf_;
}

std::any
angelscriptParser::If_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitIf_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::If_Context *angelscriptParser::if_() {
    If_Context *_localctx =
        _tracker.createInstance<If_Context>(_ctx, getState());
    enterRule(_localctx, 52, angelscriptParser::RuleIf_);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(523);
        match(angelscriptParser::T__45);
        setState(524);
        match(angelscriptParser::T__26);
        setState(525);
        assign();
        setState(526);
        match(angelscriptParser::T__28);
        setState(527);
        statement();
        setState(530);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 71, _ctx)) {
        case 1: {
            setState(528);
            match(angelscriptParser::T__46);
            setState(529);
            statement();
            break;
        }

        default:
            break;
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Continue_Context
//------------------------------------------------------------------

angelscriptParser::Continue_Context::Continue_Context(ParserRuleContext *parent,
                                                      size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

size_t angelscriptParser::Continue_Context::getRuleIndex() const {
    return angelscriptParser::RuleContinue_;
}

std::any
angelscriptParser::Continue_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitContinue_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Continue_Context *angelscriptParser::continue_() {
    Continue_Context *_localctx =
        _tracker.createInstance<Continue_Context>(_ctx, getState());
    enterRule(_localctx, 54, angelscriptParser::RuleContinue_);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(532);
        match(angelscriptParser::T__47);
        setState(533);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprstatContext
//------------------------------------------------------------------

angelscriptParser::ExprstatContext::ExprstatContext(ParserRuleContext *parent,
                                                    size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::AssignContext *angelscriptParser::ExprstatContext::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

size_t angelscriptParser::ExprstatContext::getRuleIndex() const {
    return angelscriptParser::RuleExprstat;
}

std::any
angelscriptParser::ExprstatContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitExprstat(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ExprstatContext *angelscriptParser::exprstat() {
    ExprstatContext *_localctx =
        _tracker.createInstance<ExprstatContext>(_ctx, getState());
    enterRule(_localctx, 56, angelscriptParser::RuleExprstat);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(536);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 8) & ~0x3fULL) == 0) &&
             ((1ULL << (_la - 8)) & -6861796974735589375) != 0)) {
            setState(535);
            assign();
        }
        setState(538);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Try_Context
//------------------------------------------------------------------

angelscriptParser::Try_Context::Try_Context(ParserRuleContext *parent,
                                            size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<angelscriptParser::StatblockContext *>
angelscriptParser::Try_Context::statblock() {
    return getRuleContexts<angelscriptParser::StatblockContext>();
}

angelscriptParser::StatblockContext *
angelscriptParser::Try_Context::statblock(size_t i) {
    return getRuleContext<angelscriptParser::StatblockContext>(i);
}

size_t angelscriptParser::Try_Context::getRuleIndex() const {
    return angelscriptParser::RuleTry_;
}

std::any
angelscriptParser::Try_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitTry_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Try_Context *angelscriptParser::try_() {
    Try_Context *_localctx =
        _tracker.createInstance<Try_Context>(_ctx, getState());
    enterRule(_localctx, 58, angelscriptParser::RuleTry_);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(540);
        match(angelscriptParser::T__48);
        setState(541);
        statblock();
        setState(542);
        match(angelscriptParser::T__49);
        setState(543);
        statblock();

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Return_Context
//------------------------------------------------------------------

angelscriptParser::Return_Context::Return_Context(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ConditionContext *
angelscriptParser::Return_Context::condition() {
    return getRuleContext<angelscriptParser::ConditionContext>(0);
}

size_t angelscriptParser::Return_Context::getRuleIndex() const {
    return angelscriptParser::RuleReturn_;
}

std::any
angelscriptParser::Return_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitReturn_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Return_Context *angelscriptParser::return_() {
    Return_Context *_localctx =
        _tracker.createInstance<Return_Context>(_ctx, getState());
    enterRule(_localctx, 60, angelscriptParser::RuleReturn_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(545);
        match(angelscriptParser::T__50);
        setState(547);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 8) & ~0x3fULL) == 0) &&
             ((1ULL << (_la - 8)) & -6861796974735589375) != 0)) {
            setState(546);
            condition();
        }
        setState(549);
        match(angelscriptParser::T__0);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Case_Context
//------------------------------------------------------------------

angelscriptParser::Case_Context::Case_Context(ParserRuleContext *parent,
                                              size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ExprContext *angelscriptParser::Case_Context::expr() {
    return getRuleContext<angelscriptParser::ExprContext>(0);
}

std::vector<angelscriptParser::StatementContext *>
angelscriptParser::Case_Context::statement() {
    return getRuleContexts<angelscriptParser::StatementContext>();
}

angelscriptParser::StatementContext *
angelscriptParser::Case_Context::statement(size_t i) {
    return getRuleContext<angelscriptParser::StatementContext>(i);
}

size_t angelscriptParser::Case_Context::getRuleIndex() const {
    return angelscriptParser::RuleCase_;
}

std::any
angelscriptParser::Case_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitCase_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Case_Context *angelscriptParser::case_() {
    Case_Context *_localctx =
        _tracker.createInstance<Case_Context>(_ctx, getState());
    enterRule(_localctx, 62, angelscriptParser::RuleCase_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(554);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__51: {
            setState(551);
            match(angelscriptParser::T__51);
            setState(552);
            expr();
            break;
        }

        case angelscriptParser::T__52: {
            setState(553);
            match(angelscriptParser::T__52);
            break;
        }

        default:
            throw NoViableAltException(this);
        }
        setState(556);
        match(angelscriptParser::T__15);
        setState(560);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~0x3fULL) == 0) &&
                ((1ULL << _la) & -4176103766694559486) != 0) ||
               _la == angelscriptParser::PRIMTYPE

               || _la == angelscriptParser::EXPRPREOP) {
            setState(557);
            statement();
            setState(562);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprContext
//------------------------------------------------------------------

angelscriptParser::ExprContext::ExprContext(ParserRuleContext *parent,
                                            size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<angelscriptParser::ExprtermContext *>
angelscriptParser::ExprContext::exprterm() {
    return getRuleContexts<angelscriptParser::ExprtermContext>();
}

angelscriptParser::ExprtermContext *
angelscriptParser::ExprContext::exprterm(size_t i) {
    return getRuleContext<angelscriptParser::ExprtermContext>(i);
}

std::vector<angelscriptParser::ExpropContext *>
angelscriptParser::ExprContext::exprop() {
    return getRuleContexts<angelscriptParser::ExpropContext>();
}

angelscriptParser::ExpropContext *
angelscriptParser::ExprContext::exprop(size_t i) {
    return getRuleContext<angelscriptParser::ExpropContext>(i);
}

size_t angelscriptParser::ExprContext::getRuleIndex() const {
    return angelscriptParser::RuleExpr;
}

std::any
angelscriptParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitExpr(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ExprContext *angelscriptParser::expr() {
    ExprContext *_localctx =
        _tracker.createInstance<ExprContext>(_ctx, getState());
    enterRule(_localctx, 64, angelscriptParser::RuleExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(563);
        exprterm();
        setState(569);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 64) & ~0x3fULL) == 0) &&
                ((1ULL << (_la - 64)) & 15) != 0)) {
            setState(564);
            exprop();
            setState(565);
            exprterm();
            setState(571);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprtermContext
//------------------------------------------------------------------

angelscriptParser::ExprtermContext::ExprtermContext(ParserRuleContext *parent,
                                                    size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::InitlistContext *
angelscriptParser::ExprtermContext::initlist() {
    return getRuleContext<angelscriptParser::InitlistContext>(0);
}

angelscriptParser::Type_Context *angelscriptParser::ExprtermContext::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

angelscriptParser::ExprvalueContext *
angelscriptParser::ExprtermContext::exprvalue() {
    return getRuleContext<angelscriptParser::ExprvalueContext>(0);
}

std::vector<tree::TerminalNode *>
angelscriptParser::ExprtermContext::EXPRPREOP() {
    return getTokens(angelscriptParser::EXPRPREOP);
}

tree::TerminalNode *angelscriptParser::ExprtermContext::EXPRPREOP(size_t i) {
    return getToken(angelscriptParser::EXPRPREOP, i);
}

std::vector<angelscriptParser::ExprpostopContext *>
angelscriptParser::ExprtermContext::exprpostop() {
    return getRuleContexts<angelscriptParser::ExprpostopContext>();
}

angelscriptParser::ExprpostopContext *
angelscriptParser::ExprtermContext::exprpostop(size_t i) {
    return getRuleContext<angelscriptParser::ExprpostopContext>(i);
}

size_t angelscriptParser::ExprtermContext::getRuleIndex() const {
    return angelscriptParser::RuleExprterm;
}

std::any
angelscriptParser::ExprtermContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitExprterm(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ExprtermContext *angelscriptParser::exprterm() {
    ExprtermContext *_localctx =
        _tracker.createInstance<ExprtermContext>(_ctx, getState());
    enterRule(_localctx, 66, angelscriptParser::RuleExprterm);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        setState(591);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 80, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(575);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (((((_la - 24) & ~0x3fULL) == 0) &&
                 ((1ULL << (_la - 24)) & 35734128017409) != 0)) {
                setState(572);
                type_();
                setState(573);
                match(angelscriptParser::T__8);
            }
            setState(577);
            initlist();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(581);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == angelscriptParser::EXPRPREOP) {
                setState(578);
                match(angelscriptParser::EXPRPREOP);
                setState(583);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            setState(584);
            exprvalue();
            setState(588);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~0x3fULL) == 0) &&
                    ((1ULL << _la) & 126100824060329984) != 0)) {
                setState(585);
                exprpostop();
                setState(590);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            break;
        }

        default:
            break;
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprvalueContext
//------------------------------------------------------------------

angelscriptParser::ExprvalueContext::ExprvalueContext(ParserRuleContext *parent,
                                                      size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ConstructcallContext *
angelscriptParser::ExprvalueContext::constructcall() {
    return getRuleContext<angelscriptParser::ConstructcallContext>(0);
}

angelscriptParser::FunccallContext *
angelscriptParser::ExprvalueContext::funccall() {
    return getRuleContext<angelscriptParser::FunccallContext>(0);
}

angelscriptParser::VaraccessContext *
angelscriptParser::ExprvalueContext::varaccess() {
    return getRuleContext<angelscriptParser::VaraccessContext>(0);
}

angelscriptParser::CastContext *angelscriptParser::ExprvalueContext::cast() {
    return getRuleContext<angelscriptParser::CastContext>(0);
}

tree::TerminalNode *angelscriptParser::ExprvalueContext::LITERAL() {
    return getToken(angelscriptParser::LITERAL, 0);
}

angelscriptParser::AssignContext *
angelscriptParser::ExprvalueContext::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

angelscriptParser::Lambda_Context *
angelscriptParser::ExprvalueContext::lambda_() {
    return getRuleContext<angelscriptParser::Lambda_Context>(0);
}

size_t angelscriptParser::ExprvalueContext::getRuleIndex() const {
    return angelscriptParser::RuleExprvalue;
}

std::any
angelscriptParser::ExprvalueContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitExprvalue(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ExprvalueContext *angelscriptParser::exprvalue() {
    ExprvalueContext *_localctx =
        _tracker.createInstance<ExprvalueContext>(_ctx, getState());
    enterRule(_localctx, 68, angelscriptParser::RuleExprvalue);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        setState(603);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 81, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(593);
            constructcall();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(594);
            funccall();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(595);
            varaccess();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(596);
            cast();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(597);
            match(angelscriptParser::LITERAL);
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(598);
            match(angelscriptParser::T__26);
            setState(599);
            assign();
            setState(600);
            match(angelscriptParser::T__28);
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(602);
            lambda_();
            break;
        }

        default:
            break;
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ConstructcallContext
//------------------------------------------------------------------

angelscriptParser::ConstructcallContext::ConstructcallContext(
    ParserRuleContext *parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Type_Context *
angelscriptParser::ConstructcallContext::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

angelscriptParser::ArglistContext *
angelscriptParser::ConstructcallContext::arglist() {
    return getRuleContext<angelscriptParser::ArglistContext>(0);
}

size_t angelscriptParser::ConstructcallContext::getRuleIndex() const {
    return angelscriptParser::RuleConstructcall;
}

std::any angelscriptParser::ConstructcallContext::accept(
    tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitConstructcall(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ConstructcallContext *angelscriptParser::constructcall() {
    ConstructcallContext *_localctx =
        _tracker.createInstance<ConstructcallContext>(_ctx, getState());
    enterRule(_localctx, 70, angelscriptParser::RuleConstructcall);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(605);
        type_();
        setState(606);
        arglist();

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprpostopContext
//------------------------------------------------------------------

angelscriptParser::ExprpostopContext::ExprpostopContext(
    ParserRuleContext *parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::FunccallContext *
angelscriptParser::ExprpostopContext::funccall() {
    return getRuleContext<angelscriptParser::FunccallContext>(0);
}

std::vector<tree::TerminalNode *>
angelscriptParser::ExprpostopContext::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::ExprpostopContext::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::AssignContext *>
angelscriptParser::ExprpostopContext::assign() {
    return getRuleContexts<angelscriptParser::AssignContext>();
}

angelscriptParser::AssignContext *
angelscriptParser::ExprpostopContext::assign(size_t i) {
    return getRuleContext<angelscriptParser::AssignContext>(i);
}

angelscriptParser::ArglistContext *
angelscriptParser::ExprpostopContext::arglist() {
    return getRuleContext<angelscriptParser::ArglistContext>(0);
}

size_t angelscriptParser::ExprpostopContext::getRuleIndex() const {
    return angelscriptParser::RuleExprpostop;
}

std::any
angelscriptParser::ExprpostopContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitExprpostop(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ExprpostopContext *angelscriptParser::exprpostop() {
    ExprpostopContext *_localctx =
        _tracker.createInstance<ExprpostopContext>(_ctx, getState());
    enterRule(_localctx, 72, angelscriptParser::RuleExprpostop);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        setState(635);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case angelscriptParser::T__53: {
            enterOuterAlt(_localctx, 1);
            setState(608);
            match(angelscriptParser::T__53);
            setState(611);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 82, _ctx)) {
            case 1: {
                setState(609);
                funccall();
                break;
            }

            case 2: {
                setState(610);
                match(angelscriptParser::IDENTIFIER);
                break;
            }

            default:
                break;
            }
            break;
        }

        case angelscriptParser::T__34: {
            enterOuterAlt(_localctx, 2);
            setState(613);
            match(angelscriptParser::T__34);
            setState(616);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 83, _ctx)) {
            case 1: {
                setState(614);
                match(angelscriptParser::IDENTIFIER);
                setState(615);
                match(angelscriptParser::T__15);
                break;
            }

            default:
                break;
            }
            setState(618);
            assign();
            setState(627);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == angelscriptParser::T__9) {
                setState(619);
                match(angelscriptParser::T__9);
                setState(621);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == angelscriptParser::IDENTIFIER) {
                    setState(620);
                    match(angelscriptParser::IDENTIFIER);
                }
                setState(623);
                match(angelscriptParser::T__15);
                setState(624);
                assign();
                setState(629);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            setState(630);
            match(angelscriptParser::T__35);
            break;
        }

        case angelscriptParser::T__26: {
            enterOuterAlt(_localctx, 3);
            setState(632);
            arglist();
            break;
        }

        case angelscriptParser::T__54: {
            enterOuterAlt(_localctx, 4);
            setState(633);
            match(angelscriptParser::T__54);
            break;
        }

        case angelscriptParser::T__55: {
            enterOuterAlt(_localctx, 5);
            setState(634);
            match(angelscriptParser::T__55);
            break;
        }

        default:
            throw NoViableAltException(this);
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CastContext
//------------------------------------------------------------------

angelscriptParser::CastContext::CastContext(ParserRuleContext *parent,
                                            size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::Type_Context *angelscriptParser::CastContext::type_() {
    return getRuleContext<angelscriptParser::Type_Context>(0);
}

angelscriptParser::AssignContext *angelscriptParser::CastContext::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

size_t angelscriptParser::CastContext::getRuleIndex() const {
    return angelscriptParser::RuleCast;
}

std::any
angelscriptParser::CastContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitCast(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::CastContext *angelscriptParser::cast() {
    CastContext *_localctx =
        _tracker.createInstance<CastContext>(_ctx, getState());
    enterRule(_localctx, 74, angelscriptParser::RuleCast);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(637);
        match(angelscriptParser::T__56);
        setState(638);
        match(angelscriptParser::T__32);
        setState(639);
        type_();
        setState(640);
        match(angelscriptParser::T__33);
        setState(641);
        match(angelscriptParser::T__26);
        setState(642);
        assign();
        setState(643);
        match(angelscriptParser::T__28);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- Lambda_Context
//------------------------------------------------------------------

angelscriptParser::Lambda_Context::Lambda_Context(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::StatblockContext *
angelscriptParser::Lambda_Context::statblock() {
    return getRuleContext<angelscriptParser::StatblockContext>(0);
}

std::vector<tree::TerminalNode *>
angelscriptParser::Lambda_Context::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::Lambda_Context::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

std::vector<angelscriptParser::Type_Context *>
angelscriptParser::Lambda_Context::type_() {
    return getRuleContexts<angelscriptParser::Type_Context>();
}

angelscriptParser::Type_Context *
angelscriptParser::Lambda_Context::type_(size_t i) {
    return getRuleContext<angelscriptParser::Type_Context>(i);
}

std::vector<angelscriptParser::TypemodContext *>
angelscriptParser::Lambda_Context::typemod() {
    return getRuleContexts<angelscriptParser::TypemodContext>();
}

angelscriptParser::TypemodContext *
angelscriptParser::Lambda_Context::typemod(size_t i) {
    return getRuleContext<angelscriptParser::TypemodContext>(i);
}

size_t angelscriptParser::Lambda_Context::getRuleIndex() const {
    return angelscriptParser::RuleLambda_;
}

std::any
angelscriptParser::Lambda_Context::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitLambda_(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::Lambda_Context *angelscriptParser::lambda_() {
    Lambda_Context *_localctx =
        _tracker.createInstance<Lambda_Context>(_ctx, getState());
    enterRule(_localctx, 76, angelscriptParser::RuleLambda_);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(645);
        match(angelscriptParser::T__57);
        setState(646);
        match(angelscriptParser::T__26);
        setState(665);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 24) & ~0x3fULL) == 0) &&
             ((1ULL << (_la - 24)) & 35734128017409) != 0)) {
            setState(650);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 87, _ctx)) {
            case 1: {
                setState(647);
                type_();
                setState(648);
                typemod();
                break;
            }

            default:
                break;
            }
            setState(652);
            match(angelscriptParser::IDENTIFIER);
            setState(662);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == angelscriptParser::T__9) {
                setState(653);
                match(angelscriptParser::T__9);
                setState(657);
                _errHandler->sync(this);

                switch (
                    getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                        _input, 88, _ctx)) {
                case 1: {
                    setState(654);
                    type_();
                    setState(655);
                    typemod();
                    break;
                }

                default:
                    break;
                }
                setState(659);
                match(angelscriptParser::IDENTIFIER);
                setState(664);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
        }
        setState(667);
        match(angelscriptParser::T__28);
        setState(668);
        statblock();

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FunccallContext
//------------------------------------------------------------------

angelscriptParser::FunccallContext::FunccallContext(ParserRuleContext *parent,
                                                    size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ScopeContext *angelscriptParser::FunccallContext::scope() {
    return getRuleContext<angelscriptParser::ScopeContext>(0);
}

tree::TerminalNode *angelscriptParser::FunccallContext::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

angelscriptParser::ArglistContext *
angelscriptParser::FunccallContext::arglist() {
    return getRuleContext<angelscriptParser::ArglistContext>(0);
}

size_t angelscriptParser::FunccallContext::getRuleIndex() const {
    return angelscriptParser::RuleFunccall;
}

std::any
angelscriptParser::FunccallContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitFunccall(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::FunccallContext *angelscriptParser::funccall() {
    FunccallContext *_localctx =
        _tracker.createInstance<FunccallContext>(_ctx, getState());
    enterRule(_localctx, 78, angelscriptParser::RuleFunccall);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(670);
        scope();
        setState(671);
        match(angelscriptParser::IDENTIFIER);
        setState(672);
        arglist();

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VaraccessContext
//------------------------------------------------------------------

angelscriptParser::VaraccessContext::VaraccessContext(ParserRuleContext *parent,
                                                      size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ScopeContext *angelscriptParser::VaraccessContext::scope() {
    return getRuleContext<angelscriptParser::ScopeContext>(0);
}

tree::TerminalNode *angelscriptParser::VaraccessContext::IDENTIFIER() {
    return getToken(angelscriptParser::IDENTIFIER, 0);
}

size_t angelscriptParser::VaraccessContext::getRuleIndex() const {
    return angelscriptParser::RuleVaraccess;
}

std::any
angelscriptParser::VaraccessContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitVaraccess(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::VaraccessContext *angelscriptParser::varaccess() {
    VaraccessContext *_localctx =
        _tracker.createInstance<VaraccessContext>(_ctx, getState());
    enterRule(_localctx, 80, angelscriptParser::RuleVaraccess);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(674);
        scope();
        setState(675);
        match(angelscriptParser::IDENTIFIER);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ArglistContext
//------------------------------------------------------------------

angelscriptParser::ArglistContext::ArglistContext(ParserRuleContext *parent,
                                                  size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

std::vector<angelscriptParser::AssignContext *>
angelscriptParser::ArglistContext::assign() {
    return getRuleContexts<angelscriptParser::AssignContext>();
}

angelscriptParser::AssignContext *
angelscriptParser::ArglistContext::assign(size_t i) {
    return getRuleContext<angelscriptParser::AssignContext>(i);
}

std::vector<tree::TerminalNode *>
angelscriptParser::ArglistContext::IDENTIFIER() {
    return getTokens(angelscriptParser::IDENTIFIER);
}

tree::TerminalNode *angelscriptParser::ArglistContext::IDENTIFIER(size_t i) {
    return getToken(angelscriptParser::IDENTIFIER, i);
}

size_t angelscriptParser::ArglistContext::getRuleIndex() const {
    return angelscriptParser::RuleArglist;
}

std::any
angelscriptParser::ArglistContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitArglist(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ArglistContext *angelscriptParser::arglist() {
    ArglistContext *_localctx =
        _tracker.createInstance<ArglistContext>(_ctx, getState());
    enterRule(_localctx, 82, angelscriptParser::RuleArglist);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(677);
        match(angelscriptParser::T__26);
        setState(680);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 91, _ctx)) {
        case 1: {
            setState(678);
            match(angelscriptParser::IDENTIFIER);
            setState(679);
            match(angelscriptParser::T__15);
            break;
        }

        default:
            break;
        }
        setState(682);
        assign();
        setState(691);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == angelscriptParser::T__9) {
            setState(683);
            match(angelscriptParser::T__9);
            setState(686);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
                _input, 92, _ctx)) {
            case 1: {
                setState(684);
                match(angelscriptParser::IDENTIFIER);
                setState(685);
                match(angelscriptParser::T__15);
                break;
            }

            default:
                break;
            }
            setState(688);
            assign();
            setState(693);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(694);
        match(angelscriptParser::T__28);

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignContext
//------------------------------------------------------------------

angelscriptParser::AssignContext::AssignContext(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ConditionContext *
angelscriptParser::AssignContext::condition() {
    return getRuleContext<angelscriptParser::ConditionContext>(0);
}

tree::TerminalNode *angelscriptParser::AssignContext::ASSIGNOP() {
    return getToken(angelscriptParser::ASSIGNOP, 0);
}

angelscriptParser::AssignContext *angelscriptParser::AssignContext::assign() {
    return getRuleContext<angelscriptParser::AssignContext>(0);
}

size_t angelscriptParser::AssignContext::getRuleIndex() const {
    return angelscriptParser::RuleAssign;
}

std::any
angelscriptParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitAssign(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::AssignContext *angelscriptParser::assign() {
    AssignContext *_localctx =
        _tracker.createInstance<AssignContext>(_ctx, getState());
    enterRule(_localctx, 84, angelscriptParser::RuleAssign);

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(696);
        condition();
        setState(699);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(
            _input, 94, _ctx)) {
        case 1: {
            setState(697);
            match(angelscriptParser::ASSIGNOP);
            setState(698);
            assign();
            break;
        }

        default:
            break;
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ConditionContext
//------------------------------------------------------------------

angelscriptParser::ConditionContext::ConditionContext(ParserRuleContext *parent,
                                                      size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

angelscriptParser::ExprContext *angelscriptParser::ConditionContext::expr() {
    return getRuleContext<angelscriptParser::ExprContext>(0);
}

std::vector<angelscriptParser::AssignContext *>
angelscriptParser::ConditionContext::assign() {
    return getRuleContexts<angelscriptParser::AssignContext>();
}

angelscriptParser::AssignContext *
angelscriptParser::ConditionContext::assign(size_t i) {
    return getRuleContext<angelscriptParser::AssignContext>(i);
}

size_t angelscriptParser::ConditionContext::getRuleIndex() const {
    return angelscriptParser::RuleCondition;
}

std::any
angelscriptParser::ConditionContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitCondition(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ConditionContext *angelscriptParser::condition() {
    ConditionContext *_localctx =
        _tracker.createInstance<ConditionContext>(_ctx, getState());
    enterRule(_localctx, 86, angelscriptParser::RuleCondition);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(701);
        expr();
        setState(707);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == angelscriptParser::T__38) {
            setState(702);
            match(angelscriptParser::T__38);
            setState(703);
            assign();
            setState(704);
            match(angelscriptParser::T__15);
            setState(705);
            assign();
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExpropContext
//------------------------------------------------------------------

angelscriptParser::ExpropContext::ExpropContext(ParserRuleContext *parent,
                                                size_t invokingState)
    : ParserRuleContext(parent, invokingState) {}

tree::TerminalNode *angelscriptParser::ExpropContext::MATHOP() {
    return getToken(angelscriptParser::MATHOP, 0);
}

tree::TerminalNode *angelscriptParser::ExpropContext::COMPOP() {
    return getToken(angelscriptParser::COMPOP, 0);
}

tree::TerminalNode *angelscriptParser::ExpropContext::LOGICOP() {
    return getToken(angelscriptParser::LOGICOP, 0);
}

tree::TerminalNode *angelscriptParser::ExpropContext::BITOP() {
    return getToken(angelscriptParser::BITOP, 0);
}

size_t angelscriptParser::ExpropContext::getRuleIndex() const {
    return angelscriptParser::RuleExprop;
}

std::any
angelscriptParser::ExpropContext::accept(tree::ParseTreeVisitor *visitor) {
    if (auto parserVisitor = dynamic_cast<angelscriptVisitor *>(visitor))
        return parserVisitor->visitExprop(this);
    else
        return visitor->visitChildren(this);
}

angelscriptParser::ExpropContext *angelscriptParser::exprop() {
    ExpropContext *_localctx =
        _tracker.createInstance<ExpropContext>(_ctx, getState());
    enterRule(_localctx, 88, angelscriptParser::RuleExprop);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally([=, this] {
#else
    auto onExit = finally([=] {
#endif
        exitRule();
    });
    try {
        enterOuterAlt(_localctx, 1);
        setState(709);
        _la = _input->LA(1);
        if (!(((((_la - 64) & ~0x3fULL) == 0) &&
               ((1ULL << (_la - 64)) & 15) != 0))) {
            _errHandler->recoverInline(this);
        } else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException &e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

void angelscriptParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    angelscriptParserInitialize();
#else
    ::antlr4::internal::call_once(angelscriptParserOnceFlag,
                                  angelscriptParserInitialize);
#endif
}
